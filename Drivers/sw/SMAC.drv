%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    05.07.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\SMACSettings.Inc
%define! Abstract Common\SMACAbstract.Inc
%include Common\Header.h

%if (CPUfamily = "Kinetis")
#include "PE_LDD.h" /* hack for Processor Expert (e.g. in MCU10.3) and LDD: PE_LDD.h includes at the end all shared modules, causing a recursive header file include conflict */
%endif

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"
%include sw\CommonSupport.prg
%-
%define INLINE_ME
%-
#define %'ModuleName'%.RADIO_BUF_SIZE %@PHY@'ModuleName'%.RADIO_BUF_SIZE  %>%CTAB /*!< size of the radio tx/rx buffers */
#define %'ModuleName'%.gu8RTxMode     %@PHY@'ModuleName'%.gu8RTxMode      %>%CTAB /*!< application can read this variable */
#define %'ModuleName'%.psDrvRxPacket  %@PHY@'ModuleName'%.psDrvRxPacket   %>%CTAB /*!< pointer to the rx data structure */

#define %'ModuleName'%.SUCCESS   %@PHY@'ModuleName'%.SUCCESS    %>%CTAB /*!< everything ok */
#define %'ModuleName'%.TIMEOUT   %@PHY@'ModuleName'%.TIMEOUT    %>%CTAB /*!< timeout while sending message (other side did not respond) */
#define %'ModuleName'%.OVERFLOW  %@PHY@'ModuleName'%.OVERFLOW   %>%CTAB /*!< we received a message longer than expected */

#define %'ModuleName'%.SCAN_MODE_ED   %@PHY@'ModuleName'%.SCAN_MODE_ED
#define %'ModuleName'%.SCAN_MODE_CCA  %@PHY@'ModuleName'%.SCAN_MODE_CCA

#define %'ModuleName'%.ERROR  %@PHY@'ModuleName'%.ERROR

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN MCPSDataRequest
%ifdef MCPSDataRequest
%if defined(INLINE_ME)
#define %'ModuleName'%.%MCPSDataRequest(psTxPacket) %@PHY@'ModuleName'%.PDDataRequest(psTxPacket)
%else
byte %'ModuleName'%.%MCPSDataRequest(tTxPacket *psTxPacket);
%endif
%define! ParpsTxPacket
%define! RetVal
%include Common\SMACMCPSDataRequest.Inc

%endif %- MCPSDataRequest
%-BW_METHOD_END MCPSDataRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEHibernateRequest
%ifdef MLMEHibernateRequest
byte %'ModuleName'%.%MLMEHibernateRequest(void);
%define! RetVal
%include Common\SMACMLMEHibernateRequest.Inc

%endif %- MLMEHibernateRequest
%-BW_METHOD_END MLMEHibernateRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEDozeRequest
%ifdef MLMEDozeRequest
byte %'ModuleName'%.%MLMEDozeRequest(dword u32Timeout);
%define! Paru32Timeout
%define! RetVal
%include Common\SMACMLMEDozeRequest.Inc

%endif %- MLMEDozeRequest
%-BW_METHOD_END MLMEDozeRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEWakeRequest
%ifdef MLMEWakeRequest
byte %'ModuleName'%.%MLMEWakeRequest(void);
%define! RetVal
%include Common\SMACMLMEWakeRequest.Inc

%endif %- MLMEWakeRequest
%-BW_METHOD_END MLMEWakeRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMESetChannelRequest
%ifdef MLMESetChannelRequest
%if defined(INLINE_ME)
#define %'ModuleName'%.%MLMESetChannelRequest(u8Channel) %@PHY@'ModuleName'%.PLMESetChannelRequest(u8Channel)
%else
byte %'ModuleName'%.%MLMESetChannelRequest(byte u8Channel);
%endif
%define! Paru8Channel
%define! RetVal
%include Common\SMACMLMESetChannelRequest.Inc

%endif %- MLMESetChannelRequest
%-BW_METHOD_END MLMESetChannelRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMERXEnableRequest
%ifdef MLMERXEnableRequest
byte %'ModuleName'%.%MLMERXEnableRequest(tRxPacket* psRxPacket, dword u32Timeout);
%define! Paru32Timeout
%define! ParpsRxPacket
%define! RetVal
%include Common\SMACMLMERXEnableRequest.Inc

%endif %- MLMERXEnableRequest
%-BW_METHOD_END MLMERXEnableRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMERXDisableRequest
%ifdef MLMERXDisableRequest
byte %'ModuleName'%.%MLMERXDisableRequest(void);
%define! RetVal
%include Common\SMACMLMERXDisableRequest.Inc

%endif %- MLMERXDisableRequest
%-BW_METHOD_END MLMERXDisableRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMESetMC13192ClockRate
%ifdef MLMESetMC13192ClockRate
%if defined(INLINE_ME)
#define %'ModuleName'%.%MLMESetMC13192ClockRate(u8Freq)  %@PHY@'ModuleName'%.PLMESetMC13192ClockRate(u8Freq)
%else
byte %'ModuleName'%.%MLMESetMC13192ClockRate(byte u8Freq);
%endif
%define! Paru8Freq
%define! RetVal
%include Common\SMACMLMESetMC13192ClockRate.Inc

%endif %- MLMESetMC13192ClockRate
%-BW_METHOD_END MLMESetMC13192ClockRate
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMESetMC13192TmrPrescale
%ifdef MLMESetMC13192TmrPrescale
byte %'ModuleName'%.%MLMESetMC13192TmrPrescale(byte u8Freq);
%define! Paru8Freq
%define! RetVal
%include Common\SMACMLMESetMC13192TmrPrescale.Inc

%endif %- MLMESetMC13192TmrPrescale
%-BW_METHOD_END MLMESetMC13192TmrPrescale
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEEnergyDetect
%ifdef MLMEEnergyDetect
byte %'ModuleName'%.%MLMEEnergyDetect(void);
%define! RetVal
%include Common\SMACMLMEEnergyDetect.Inc

%endif %- MLMEEnergyDetect
%-BW_METHOD_END MLMEEnergyDetect
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEMC13192SoftReset
%ifdef MLMEMC13192SoftReset
byte %'ModuleName'%.%MLMEMC13192SoftReset(void);
%define! RetVal
%include Common\SMACMLMEMC13192SoftReset.Inc

%endif %- MLMEMC13192SoftReset
%-BW_METHOD_END MLMEMC13192SoftReset
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEMC13192XtalAdjust
%ifdef MLMEMC13192XtalAdjust
byte %'ModuleName'%.%MLMEMC13192XtalAdjust(byte u8ReqValue);
%define! Paru8ReqValue
%define! RetVal
%include Common\SMACMLMEMC13192XtalAdjust.Inc

%endif %- MLMEMC13192XtalAdjust
%-BW_METHOD_END MLMEMC13192XtalAdjust
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMELinkQuality
%ifdef MLMELinkQuality
byte %'ModuleName'%.%MLMELinkQuality(void);
%define! RetVal
%include Common\SMACMLMELinkQuality.Inc

%endif %- MLMELinkQuality
%-BW_METHOD_END MLMELinkQuality
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEMC13192FEGainAdjust
%ifdef MLMEMC13192FEGainAdjust
byte %'ModuleName'%.%MLMEMC13192FEGainAdjust(byte u8GainValue);
%define! Paru8GainValue
%define! RetVal
%include Common\SMACMLMEMC13192FEGainAdjust.Inc

%endif %- MLMEMC13192FEGainAdjust
%-BW_METHOD_END MLMEMC13192FEGainAdjust
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEScanRequest
%ifdef MLMEScanRequest
byte %'ModuleName'%.%MLMEScanRequest(byte flags, byte *pu8ChannelScan);
%define! Parflags
%define! Parpu8ChannelScan
%define! RetVal
%include Common\SMACMLMEScanRequest.Inc

%endif %- MLMEScanRequest
%-BW_METHOD_END MLMEScanRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEMC13192PAOutputAdjust
%ifdef MLMEMC13192PAOutputAdjust
%if defined(INLINE_ME)
#define %'ModuleName'%.%MLMEMC13192PAOutputAdjust(u8PaValue) %@PHY@'ModuleName'%.PLMEMC13192PAOutputAdjust(u8PaValue)
%else
byte %'ModuleName'%.%MLMEMC13192PAOutputAdjust(byte u8PaValue);
%endif
%define! Paru8PaValue
%define! RetVal
%include Common\SMACMLMEMC13192PAOutputAdjust.Inc

%endif %- MLMEMC13192PAOutputAdjust
%-BW_METHOD_END MLMEMC13192PAOutputAdjust
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEGetRficVersion
%ifdef MLMEGetRficVersion
byte %'ModuleName'%.%MLMEGetRficVersion(void);
%define! RetVal
%include Common\SMACMLMEGetRficVersion.Inc

%endif %- MLMEGetRficVersion
%-BW_METHOD_END MLMEGetRficVersion
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMETestMode
%ifdef MLMETestMode
void %'ModuleName'%.%MLMETestMode(tTxPacket *psPacket, byte u8mode);
%define! ParpsPacket
%define! Paru8mode
%include Common\SMACMLMETestMode.Inc

%endif %- MLMETestMode
%-BW_METHOD_END MLMETestMode
%-************************************************************************************************************
%-BW_METHOD_BEGIN RadioInit
%ifdef RadioInit
%-BW_PUBLISH_MACRO
#define %'ModuleName'%.%RadioInit %@PHY@'ModuleName'%.%RadioInit
%include Common\SMACRadioInit.Inc

%endif %- RadioInit
%-BW_METHOD_END RadioInit
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\SMACSettings.Inc
%define! Abstract Common\SMACAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN MCPSDataRequest
%ifdef MCPSDataRequest
%define! ParpsTxPacket
%define! RetVal
%include Common\SMACMCPSDataRequest.Inc
%if defined(INLINE_ME)
/* method is implemented as macro, see header file */
%else
/*!
 * \brief Transmit data packet
 * \param *psTxPacket packet pointer
 * \return Status
 */
byte %'ModuleName'%.%MCPSDataRequest(tTxPacket *psTxPacket)
{
  /* Send it to the phy for processing */
  return %@PHY@'ModuleName'%.PDDataRequest(psTxPacket);
}
%endif

%endif %- MCPSDataRequest
%-BW_METHOD_END MCPSDataRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEHibernateRequest
%ifdef MLMEHibernateRequest
%define! RetVal
%include Common\SMACMLMEHibernateRequest.Inc
/*!
 * \brief Hibernate the MC13192 (very low current, no CLKO)
 * \return Status
 */
byte %'ModuleName'%.%MLMEHibernateRequest(void)
{
  return %@PHY@'ModuleName'%.PLMEHibernateRequest();
}

%endif %- MLMEHibernateRequest
%-BW_METHOD_END MLMEHibernateRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEDozeRequest
%ifdef MLMEDozeRequest
%define! Paru32Timeout
%define! RetVal
%include Common\SMACMLMEDozeRequest.Inc
/*!
 * \brief Doze the MC13192 (Low current, CLKO <= 1MHz)
 * \param u32Timeout 32-bit time period
 * \return Status
 */
byte %'ModuleName'%.%MLMEDozeRequest(dword u32Timeout)
{
  return %@PHY@'ModuleName'%.PLMEDozeRequest(u32Timeout);
}

%endif %- MLMEDozeRequest
%-BW_METHOD_END MLMEDozeRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEWakeRequest
%ifdef MLMEWakeRequest
%define! RetVal
%include Common\SMACMLMEWakeRequest.Inc
/*!
 * \brief Wake the MC13192 from Hibernate or Doze
 * \return Status
 */
byte %'ModuleName'%.%MLMEWakeRequest(void)
{
  if (%@PHY@'ModuleName'%.gu8RTxMode == %@PHY@'ModuleName'%.DOZE_MODE || %@PHY@'ModuleName'%.gu8RTxMode == %@PHY@'ModuleName'%.HIBERNATE_MODE) {
    return %@PHY@'ModuleName'%.PLMEWakeRequest();
  }
  return %'ModuleName'%.ERROR;
}

%endif %- MLMEWakeRequest
%-BW_METHOD_END MLMEWakeRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMESetChannelRequest
%ifdef MLMESetChannelRequest
%define! Paru8Channel
%define! RetVal
%include Common\SMACMLMESetChannelRequest.Inc
%if defined(INLINE_ME)
  /* method is implemented as macro, see header file */
%else
 /*!
 * \brief Set the MC13192 operating channel
 * \param u8Channel Channel number (0-15)   \n
 * Channel frequencies :                    \n
 *  0 : 2.405GHz                            \n
 *  1 : 2.410GHz                            \n
 *  2 : 2.415GHz                            \n
 *  3 : 2.420GHz                            \n
 *  4 : 2.425GHz                            \n
 *  5 : 2.430GHz                            \n
 *  6 : 2.435GHz                            \n
 *  7 : 2.440GHz                            \n
 *  8 : 2.445GHz                            \n
 *  9 : 2.450GHz                            \n
 *  10: 2.455GHz                            \n
 *  11: 2.460GHz                            \n
 *  12: 2.465GHz                            \n
 *  13: 2.470GHz                            \n
 *  14: 2.475GHz                            \n
 *  15: 2.480GHz                            \n
 * \return Status
 */
byte %'ModuleName'%.%MLMESetChannelRequest(byte u8Channel)
{
  return %@PHY@'ModuleName'%.PLMESetChannelRequest(u8Channel);
}
%endif

%endif %- MLMESetChannelRequest
%-BW_METHOD_END MLMESetChannelRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMERXEnableRequest
%ifdef MLMERXEnableRequest
%define! Paru32Timeout
%define! ParpsRxPacket
%define! RetVal
%include Common\SMACMLMERXEnableRequest.Inc
/*!
 * \brief Set the MC13192 receiver ON (with optional timeout)
 * \param *psRxPacket Packet pointer for received data
 * \param u32Timeout timeout
 * \note Timeout of 0 disables the timeout.
 * The actual timeout period is the timeout value times the MC13192 timer rate
 * from MLMESetMC13192TmrPrescale.
 * \return Status
 */
byte %'ModuleName'%.%MLMERXEnableRequest(tRxPacket* psRxPacket, dword u32Timeout)
{
  byte u8Status = 0;

  %@PHY@'ModuleName'%.psDrvRxPacket = psRxPacket;     %>%CTAB /* Assign the rx_packet to SMAC global. */
  if (u32Timeout == 0) {          %>%CTAB /* Timeout disabled */
    /* Just enable the receiver */
    u8Status = %@PHY@'ModuleName'%.PLMESetTrxStateRequest(%@PHY@'ModuleName'%.RX_MODE);
  } else {
    /* Timeout requested. Get the current time and add the timeout value. */
    /* Erratum: In order to avoid the missing Irq, we reset the timer1 */
    %@PHY@'ModuleName'%.PLMESetTimeRequest(0x00000000);
    u8Status = %@PHY@'ModuleName'%.PLMEEnableMC13192Timer1(u32Timeout);   %>%CTAB /* Set the timeout in TC1 */
    u8Status = %@PHY@'ModuleName'%.PLMESetTrxStateRequest(%@PHY@'ModuleName'%.RX_MODE_WTO);
  }
  return u8Status;
}

%endif %- MLMERXEnableRequest
%-BW_METHOD_END MLMERXEnableRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMERXDisableRequest
%ifdef MLMERXDisableRequest
%define! RetVal
%include Common\SMACMLMERXDisableRequest.Inc
/*!
 * \brief Set the MC13192 receiver OFF
 * \return Status
 */
byte %'ModuleName'%.%MLMERXDisableRequest(void)
{
  (void)%@PHY@'ModuleName'%.PLMEDisableMC13192Timer1();   %>%CTAB /* In case the timeout is being used, disable it also */
  if (%@PHY@'ModuleName'%.PLMESetTrxStateRequest(%@PHY@'ModuleName'%.IDLE_MODE) == %@PHY@'ModuleName'%.SUCCESS) {   %>%CTAB /* Attempt to disable the timer */
    return %'ModuleName'%.SUCCESS;
  } else {
    return %'ModuleName'%.ERROR;
  }
}

%endif %- MLMERXDisableRequest
%-BW_METHOD_END MLMERXDisableRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMESetMC13192ClockRate
%ifdef MLMESetMC13192ClockRate
%define! Paru8Freq
%define! RetVal
%include Common\SMACMLMESetMC13192ClockRate.Inc
%if defined(INLINE_ME)
  /* method is implemented as macro, see header file */
%else
 /*!
 * \brief Set MC13192 CLKo frequency
 * \param u8Freq Frequency value enumeration (0-7)  \n
 *  Freq    Output Frequency                        \n
 *  0       16MHz (Recommended default)             \n
 *  1       8MHz                                    \n
 *  2       4MHz                                    \n
 *  3       2MHz                                    \n
 *  4       1MHz                                    \n
 *  5       62.5kHz                                 \n
 *  6       32.786kHz                               \n
 *  7       16.393kHz                               \n
 * \return Status
 */
byte %'ModuleName'%.%MLMESetMC13192ClockRate(byte u8Freq)
{
  return %@PHY@'ModuleName'%.PLMESetMC13192ClockRate(u8Freq);
}
%endif

%endif %- MLMESetMC13192ClockRate
%-BW_METHOD_END MLMESetMC13192ClockRate
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMESetMC13192TmrPrescale
%ifdef MLMESetMC13192TmrPrescale
%define! Paru8Freq
%define! RetVal
%include Common\SMACMLMESetMC13192TmrPrescale.Inc
/*!
 * \brief Set MC13192 timer frequency
 * \param u8Freq Frequency value enumeration (0-7)  \n
 *  Freq    Output Frequency                        \n
 *  0       16MHz (Recommended default)             \n
 *  1       8MHz                                    \n
 *  2       4MHz                                    \n
 *  3       2MHz                                    \n
 *  4       1MHz                                    \n
 *  5       62.5kHz                                 \n
 *  6       32.786kHz                               \n
 *  7       16.393kHz                               \n
 * \return Status
 */
byte %'ModuleName'%.%MLMESetMC13192TmrPrescale(byte u8Freq)
{
  return %@PHY@'ModuleName'%.PLMESetMC13192TmrPrescale(u8Freq);
}

%endif %- MLMESetMC13192TmrPrescale
%-BW_METHOD_END MLMESetMC13192TmrPrescale
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEEnergyDetect
%ifdef MLMEEnergyDetect
%define! RetVal
%include Common\SMACMLMEEnergyDetect.Inc
/*!
 * \brief Measure channel energy
 * \return Energy
 * \note                                \n
 * Actual power returned is: -(power/2) \n
 * Global calibration required for accuracy (from MLMEMC13192FEGainAdjust).
*/
byte %'ModuleName'%.%MLMEEnergyDetect(void)
{
  return %@PHY@'ModuleName'%.PLMEEnergyDetect();
}

%endif %- MLMEEnergyDetect
%-BW_METHOD_END MLMEEnergyDetect
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEMC13192SoftReset
%ifdef MLMEMC13192SoftReset
%define! RetVal
%include Common\SMACMLMEMC13192SoftReset.Inc
/*!
 * \brief Force the MC13192 into a soft reset condition
 * \return Status
*/
byte %'ModuleName'%.%MLMEMC13192SoftReset(void)
{
  /* Performs a soft reset of MC13192 via writing to register 0*/
  return %@PHY@'ModuleName'%.PLMEMC13192SoftReset();
}

%endif %- MLMEMC13192SoftReset
%-BW_METHOD_END MLMEMC13192SoftReset
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEMC13192XtalAdjust
%ifdef MLMEMC13192XtalAdjust
%define! Paru8ReqValue
%define! RetVal
%include Common\SMACMLMEMC13192XtalAdjust.Inc
/*!
 * \brief Adjust the MC13192s crystal trim value
 * \param u8ReqValue Trim Value (0-255)
 * \return Status
*/
byte %'ModuleName'%.%MLMEMC13192XtalAdjust(byte u8ReqValue)
{
  return %@PHY@'ModuleName'%.PLMEMC13192XtalAdjust(u8ReqValue);
}

%endif %- MLMEMC13192XtalAdjust
%-BW_METHOD_END MLMEMC13192XtalAdjust
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMELinkQuality
%ifdef MLMELinkQuality
%define! RetVal
%include Common\SMACMLMELinkQuality.Inc
/*!
 * \brief Report energy from last successful RX packet
 * \return Energy
 * \note                                   \n
 * Actual power returned is: -(power/2)    \n
 * Global calibration required for accuracy (from MLMEMC13192FEGainAdjust).
 */
byte %'ModuleName'%.%MLMELinkQuality(void)
{
  return %@PHY@'ModuleName'%.PLMELinkQuality();
}

%endif %- MLMELinkQuality
%-BW_METHOD_END MLMELinkQuality
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEMC13192FEGainAdjust
%ifdef MLMEMC13192FEGainAdjust
%define! Paru8GainValue
%define! RetVal
%include Common\SMACMLMEMC13192FEGainAdjust.Inc
/*!
 * \brief Adjust the MC13192s gain compensator
 * \param u8GainValue Gain compensation value (0 to 255. 128 is center point)
 * \return Status
 */
byte %'ModuleName'%.%MLMEMC13192FEGainAdjust(byte u8GainValue)
{
  return %@PHY@'ModuleName'%.PLMEMC13192FEGainAdjust(u8GainValue);
}

%endif %- MLMEMC13192FEGainAdjust
%-BW_METHOD_END MLMEMC13192FEGainAdjust
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEScanRequest
%ifdef MLMEScanRequest
%define! Parflags
%define! Parpu8ChannelScan
%define! RetVal
%include Common\SMACMLMEScanRequest.Inc
/*
 * \brief Scan the enabled channels for energy
 * \param[in] flags Flags option: SCAN_MODE_CCA, SCAN_MODE_ED
 * \param[out] The results of the scan [pointer to an array of 16 bytes]
 * \return Status
 */
byte %'ModuleName'%.%MLMEScanRequest(byte flags, byte *pu8ChannelScan)
{
  word u16ChannelReg1, u16ChannelReg2;
  byte u8ClearestChLevel = 0; %>%CTAB /* Default to very busy */
  byte u8ClearestCh = 0;
  byte u8i;

  /* Turn off the Radio if it is on */
  (void)%'ModuleName'%.MLMERXDisableRequest();
  /* Save current channel registers to set it back */
  u16ChannelReg1 = %@PHY@'ModuleName'%.Read(%@PHY@'ModuleName'%.LO1_IDIV_ADDR);
  u16ChannelReg2 = %@PHY@'ModuleName'%.Read(%@PHY@'ModuleName'%.LO1_NUM_ADDR);

  for (u8i=0; u8i < 16; u8i++) {
    (void)%'ModuleName'%.MLMESetChannelRequest(u8i);
    if (flags & %'ModuleName'%.SCAN_MODE_CCA) {
      pu8ChannelScan[u8i] = %@PHY@'ModuleName'%.PLMECCARequest();
    }
    if (flags & %'ModuleName'%.SCAN_MODE_ED) {
      pu8ChannelScan[u8i] = %@PHY@'ModuleName'%.PLMEEnergyDetect();
    }
    /* Find the clearest Channel (Largest Number)*/
    if (pu8ChannelScan[u8i] > u8ClearestChLevel) {
      u8ClearestChLevel = pu8ChannelScan[u8i];
      u8ClearestCh = u8i;
    }
  }
  /* Restore Channel Value */
  %@PHY@'ModuleName'%.Write(%@PHY@'ModuleName'%.LO1_IDIV_ADDR, u16ChannelReg1);
  %@PHY@'ModuleName'%.Write(%@PHY@'ModuleName'%.LO1_NUM_ADDR, u16ChannelReg2);
  return u8ClearestCh;
}

%endif %- MLMEScanRequest
%-BW_METHOD_END MLMEScanRequest
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEMC13192PAOutputAdjust
%ifdef MLMEMC13192PAOutputAdjust
%define! Paru8PaValue
%define! RetVal
%include Common\SMACMLMEMC13192PAOutputAdjust.Inc
%if defined(INLINE_ME)
  /* method is implemented as macro, see header file */
%else
/*!
 * \brief Adjust the Output power of the transmitter
 * \param u8PaValue Course Valueacket
 * \return Status
 */
byte %'ModuleName'%.%MLMEMC13192PAOutputAdjust(byte u8PaValue)
{
  return %@PHY@'ModuleName'%.PLMEMC13192PAOutputAdjust(u8PaValue);
}
%endif

%endif %- MLMEMC13192PAOutputAdjust
%-BW_METHOD_END MLMEMC13192PAOutputAdjust
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMEGetRficVersion
%ifdef MLMEGetRficVersion
%define! RetVal
%include Common\SMACMLMEGetRficVersion.Inc
/*!
 * \brief Reads the version number of the IC
 * \return The version number of the IC
 */
byte %'ModuleName'%.%MLMEGetRficVersion(void)
{
  return %@PHY@'ModuleName'%.PLMEGetRficVersion();
}

%endif %- MLMEGetRficVersion
%-BW_METHOD_END MLMEGetRficVersion
%-************************************************************************************************************
%-BW_METHOD_BEGIN MLMETestMode
%ifdef MLMETestMode
%define! ParpsPacket
%define! Paru8mode
%include Common\SMACMLMETestMode.Inc
/*!
 * \brief Execute a test mode
 * \param *psPacket Packet pointer
 * \param u8mode desired test mode
 */
void %'ModuleName'%.%MLMETestMode(tTxPacket *psPacket, byte u8mode)
{
  %@PHY@'ModuleName'%.PLMETestMode(psPacket, u8mode);
}

%endif %- MLMETestMode
%-BW_METHOD_END MLMETestMode
%-************************************************************************************************************
%-BW_METHOD_BEGIN RadioInit
%ifdef RadioInit
%include Common\SMACRadioInit.Inc
/*
void %'ModuleName'%.%RadioInit(void)
  ** This method is implemented as macro
*/

%endif %- RadioInit
%-BW_METHOD_END RadioInit
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%-  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
