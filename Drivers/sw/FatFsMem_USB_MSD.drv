%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Erich Styger
%define DriverVersion 01.00
%define DriverDate    25.07.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\FatFsMem_USB_MSDSettings.Inc
%define! Abstract Common\FatFsMem_USB_MSDAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#define %'ModuleName'%.CardPresent() %'ModuleName'%.isDiskPresent()
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"
%include sw\CommonSupport.prg

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
byte %'ModuleName'%.%Init(void *data);
%define! Pardata
%define! RetVal
%include Common\FatFsMem_USB_MSDInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
byte %'ModuleName'%.%Deinit(void *data);
%define! Pardata
%define! RetVal
%include Common\FatFsMem_USB_MSDDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN isDiskPresent
%ifdef isDiskPresent
bool %'ModuleName'%.%isDiskPresent(void);
%define! RetVal
%include Common\FatFsMem_USB_MSDisDiskPresent.Inc

%endif %- isDiskPresent
%-BW_METHOD_END isDiskPresent
%-************************************************************************************************************
%-BW_METHOD_BEGIN isWriteProtected
%ifdef isWriteProtected
bool %'ModuleName'%.%isWriteProtected(void);
%define! RetVal
%include Common\FatFsMem_USB_MSDisWriteProtected.Inc

%endif %- isWriteProtected
%-BW_METHOD_END isWriteProtected
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\FatFsMem_USB_MSDSettings.Inc
%define! Abstract Common\FatFsMem_USB_MSDAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
#include "diskio.h"
#include "usb_host_msd_ufi.h"
#include "khci.h"
#include "hidef.h"
#include "poll.h"
#include "msd_commands.h"
#include "freeRTOS.h" /* FreeRTOS malloc() */
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
extern volatile boolean       bCallBack;
extern volatile USB_STATUS    bStatus;
/* Command object used in SCSI commands */
extern COMMAND_OBJECT_STRUCT  pCmd;
extern volatile DEVICE_STRUCT mass_device;   /* mass storage device struct */

/*FUNCTION*----------------------------------------------------------------
*
* Function Name  : callback_bulk_pipe
* Returned Value : None
* Comments       : Called on completion of a control-pipe transaction.
*
*END*--------------------------------------------------------------------*/
void callback_bulk_pipe
    (
        /* [IN] Status of this command */
        USB_STATUS status,

        /* [IN] pointer to USB_MASS_BULK_ONLY_REQUEST_STRUCT*/
        pointer p1,

        /* [IN] pointer to the command object*/
        pointer  p2,

        /* [IN] Length of data transmitted */
        uint_32 buffer_length
   )
{
    /* Body */

    (void)p1;
    (void)p2;
    (void)buffer_length;

    bCallBack = TRUE;
    bStatus = status;
} /* Endbody */
/*-----------------------------------------------------------------------*/
/* Initialize a Drive                                                    */
DSTATUS disk_initialize (
        uint8_t drv                                              %>40 /* Physical drive number (0..) */
)
{
    CBW_STRUCT_PTR cbw_ptr;
    CSW_STRUCT_PTR csw_ptr;

    static uint_8 first_time_flag = TRUE;

    /* Allocate memory for Command Block Wrapper and Comamnd Status Wrapper */
    if (TRUE == first_time_flag)
    {
        pCmd.CBW_PTR = (CBW_STRUCT_PTR) pvPortMalloc(sizeof(CBW_STRUCT)); /* << EST using FreeRTOS malloc() */
        if (pCmd.CBW_PTR == NULL)
        {
            return RES_NOT_ENOUGH_CORE;
        }

        pCmd.CSW_PTR = (CSW_STRUCT_PTR) pvPortMalloc(sizeof(CSW_STRUCT)); /* << EST using FreeRTOS malloc() */
        if (pCmd.CSW_PTR == NULL)
        {
            USB_mem_free(pCmd.CBW_PTR);
            return RES_NOT_ENOUGH_CORE;
        }

            first_time_flag = FALSE;
    } /* EndIf */

    /* Store the address of CBW and CSW */
    cbw_ptr = pCmd.CBW_PTR;
    csw_ptr = pCmd.CSW_PTR;

    memset(pCmd.CSW_PTR, 0, sizeof(CSW_STRUCT));
    memset(pCmd.CBW_PTR, 0, sizeof(CBW_STRUCT));
    memset(&pCmd, 0, sizeof(COMMAND_OBJECT_STRUCT));

    /* Init SCSI command object */
    pCmd.CBW_PTR  = cbw_ptr;
    pCmd.CSW_PTR  = csw_ptr;
    pCmd.LUN      = drv;
    pCmd.CALL_PTR = (pointer)&mass_device.class_intf;
    pCmd.CALLBACK = callback_bulk_pipe;

    return RES_OK;
}

/*-----------------------------------------------------------------------*/
/* Return Disk Status                                                    */
DSTATUS disk_status (
        uint8_t drv                                              %>40 /* Physical drive number (0..) */
)
{
  if (drv!=0) return STA_NOINIT;                                 %>40 /* Supports only single drive */
  return RES_OK;
}

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
DRESULT disk_read (
        uint8_t drv,                                             %>40 /* Physical drive number (0..) */
        uint8_t *buff,                                           %>40 /* Data buffer to store read data */
        uint32_t sector,                                         %>40 /* Sector address (LBA) */
        uint8_t count                                            %>40 /* Number of sectors to read (1..255) */
)
{
    DRESULT     res = RES_OK;
    USB_STATUS  status = USB_OK;

    (void)drv;

    /* Check sector count */
    if (!count) return RES_PARERR;

    /* Send read_10 SCSI command */
    bCallBack = FALSE;
    status = usb_mass_ufi_read_10(&pCmd, sector, buff, (uint_32)(512*count), count);
    if ((status != USB_OK) && (status != USB_STATUS_TRANSFER_QUEUED))
    {
        res = RES_ERROR;
    }
    else
    {
        while(!bCallBack)   /* Wait till command comes back */
        {
          Poll();
        }
        if (!bStatus)
        {
           res = RES_OK;
        }
        else
        {
         res = RES_NOTRDY;
        }
    } /* EndIf */
    return res;
}

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
#if _READONLY == 0
DRESULT disk_write (
        uint8_t drv,                                             %>40 /* Physical drive number (0..) */
        const uint8_t *buff,                                     %>40 /* Data to be written */
        uint32_t sector,                                         %>40 /* Sector address (LBA) */
        uint8_t count                                            %>40 /* Number of sectors to write (1..255) */
)
{
    DRESULT res = RES_OK;
    USB_STATUS   status = USB_OK;

    (void)drv;

    /* Check sector count */
    if (!count) return RES_PARERR;

    /* Send Write_10 SCSI command */
    bCallBack = FALSE;
    status = usb_mass_ufi_write_10(&pCmd, sector, (uchar_ptr)buff, (uint_32)(512*count), count);
    if ((status != USB_OK) && (status != USB_STATUS_TRANSFER_QUEUED))
    {
        res = RES_ERROR;
    }
    else
    {
        while(!bCallBack)   /* Wait till command comes back */
        {
            Poll();
        }
        if (!bStatus)
        {
             res = RES_OK;
        }
        else
        {
            res = RES_NOTRDY;
        }
    } /* EndIf */
    return res;
}
#endif /* _READONLY */

/*-----------------------------------------------------------------------*/
DRESULT disk_ioctl (
        uint8_t drv,                                             %>40 /* Physical drive number (0..) */
        uint8_t ctrl,                                            %>40 /* Control code */
        void *buff                                               %>40 /* Buffer to send/receive control data */
)
{
    DRESULT      res = RES_OK;
    USB_STATUS   status = USB_OK;
    MASS_STORAGE_READ_CAPACITY_CMD_STRUCT_INFO read_capacity;

    (void)drv;

    if ((GET_SECTOR_COUNT == ctrl)||(GET_SECTOR_SIZE == ctrl))
    {
        /* Send read_capacity SCSI command */
        bCallBack = FALSE;
        status = usb_mass_ufi_read_capacity(&pCmd, (uchar_ptr)&read_capacity,\
            sizeof(MASS_STORAGE_READ_CAPACITY_CMD_STRUCT_INFO));
        if ((status != USB_OK) && (status != USB_STATUS_TRANSFER_QUEUED))
        {
            res = RES_ERROR;
         }
        else
        {
            /* Wait till command comes back */
            while(!bCallBack)
            {
                Poll();
            }
            if (!bStatus)
            {
                res = RES_OK;
            }
            else
            {
                res = RES_NOTRDY;
            }
        } /* EndIf */

        /* Get number of sectors on the disk (DWORD) */
        if (GET_SECTOR_COUNT == ctrl)
        {
            *(uint_32 *)buff = *(uint_32 *)read_capacity.BLLBA +1 ;
        }
        /* Get the sector size in byte */
        else
        {
            *(uint_32 *)buff = *(uint_32 *)read_capacity.BLENGTH;
        }
    }
    else if (GET_BLOCK_SIZE == ctrl)
    {
       *(uint_32*)buff = 1; /* unknown erase block size */
       res = RES_OK;
    }
    else
    {
        res = RES_PARERR;
    } /* EndIf */

    return res;
}

%-BW_CUSTOM_VARIABLE_END

%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%define! Pardata
%define! RetVal
%include Common\FatFsMem_USB_MSDInit.Inc
byte %'ModuleName'%.%Init(void *data)
{
  return ERR_OK;
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%define! Pardata
%define! RetVal
%include Common\FatFsMem_USB_MSDDeinit.Inc
byte %'ModuleName'%.%Deinit(void *data)
{
  return ERR_OK;
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN isDiskPresent
%ifdef isDiskPresent
%define! RetVal
%include Common\FatFsMem_USB_MSDisDiskPresent.Inc
bool %'ModuleName'%.%isDiskPresent(void)
{
  return TRUE; /* NYI */
}

%endif %- isDiskPresent
%-BW_METHOD_END isDiskPresent
%-************************************************************************************************************
%-BW_METHOD_BEGIN isWriteProtected
%ifdef isWriteProtected
%define! RetVal
%include Common\FatFsMem_USB_MSDisWriteProtected.Inc
bool %'ModuleName'%.%isWriteProtected(void)
{
  return FALSE; /* NYI */
}

%endif %- isWriteProtected
%-BW_METHOD_END isWriteProtected
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START

%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
