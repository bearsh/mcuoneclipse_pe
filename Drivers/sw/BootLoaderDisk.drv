%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    16.03.2011
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_GetASCIIValue Converts hex value to ASCII character
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\BootLoaderDiskSettings.Inc
%define! Abstract Common\BootLoaderDiskAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
#define %'ModuleName'%.FATDataSec0     520
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadLBA
%ifdef ReadLBA
void %'ModuleName'%.%ReadLBA(dword FAT_LBA, byte *pu8DataPointer, void *fileStatus);
%define! ParFAT_LBA
%define! Parpu8DataPointer
%define! ParfileStatus
%include Common\BootLoaderDiskReadLBA.Inc

%endif %- ReadLBA
%-BW_METHOD_END ReadLBA
%-************************************************************************************************************
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\BootLoaderDiskSettings.Inc
%define! Abstract Common\BootLoaderDiskAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#define FATFileNameSize  11
#define FATDirSize       47
#define FATBootSize      62
#define FATTableSize      4
#define FATBytesPerSec  512
#define FATBootSec        0
#define FATTable0Sec0     2
#define FATTable1Sec0   245
#define FATRootDirSec0  488

/********************************************************************
*       FAT16 Boot Sector
********************************************************************/
static const byte FAT16_BootSector[FATBootSize]=
{
  0xEB,     //00 - BS_jmpBoot
  0x3C,     //01 - BS_jmpBoot
  0x90,     //02 - BS_jmpBoot
  'M','S','D','O','S','5','.','0', //03-10 - BS_OEMName
  0x00,     //11 - BPB_BytesPerSec = 512
  0x02,     //11 - BPB_BytesPerSec = 512
  32,       //13 - BPB_Sec_PerClus = 32
  2,        //14 - BPB_RsvdSecCnt = 2
  0,        //15 - BPB_RsvdSecCnt = 2
  2,        //16 - BPB_NumFATs = 2
  0x0,      //17 - BPB_RootEntCnt = 512
  0x2,      //18 - BPB_RootEntCnt = 512
  0,        //19 - BPB_TotSec16 = 0
  0,        //20 - BPB_TotSec16 = 0
  0xF8,     //21 - BPB_Media = 0xF8
  243,      //22 - BPBFATSz16 = 243
  0,        //23 - BPBFATSz16 = 243
  63,       //24 - BPB_SecPerTrk = 63
  0,        //25 - BPB_SecPerTrk = 63
  255,      //26 - BPB_NumHeads = 255
  0,        //27 - BPB_NumHeads = 255
  249,      //28 - BPB_HiddSec = 249
  0,        //29 - BPB_HiddSec = 249
  0,        //30 - BPB_HiddSec = 249
  0,        //31 - BPB_HiddSec = 249
  0x07,     //32 - BPB_TotSec32 = 1,983,495
  0x44,     //33 - BPB_TotSec32 = 1,983,495
  0x1E,     //34 - BPB_TotSec32 = 1,983,495
  0x00,     //35 - BPB_TotSec32 = 1,983,495
  0,        //36 - BS_DrvNum = 1
  1,        //37 - BS_Reserved1 = 1
  0x29,     //38 - BS_BootSig = 0x29
  0xBd,     //39 - BS_VolID = 0x02DDA5BD
  0xA5,     //40 - BS_VolID = 0x02DDA5BD
  0xDD,     //41 - BS_VolID = 0x02DDA5BD
  0x02,     //42 - BS_VolID = 0x02DDA5BD
  'N','O',' ','N','A','M','E',' ',' ',' ',' ',  //43-53 - BS_VolLab
  'F','A','T','1','6',' ',' ',' '   //54-61 - BS_FilSysType
};

/********************************************************************
*       First Sector of FAT Table
********************************************************************/
static const byte FAT16_TableSector0[FATTableSize]=
{
  0xF8,0xFF,0xFF,0x7F
};

/********************************************************************
*       FAT Root Directory Sector
********************************************************************/
static const byte FAT16_ReadyFileName[FATFileNameSize]=
{
  'R','E','A','D','Y',' ',' ',' ','T','X','T'    //00-10 - Short File Name
};

static const byte FAT16_SuccessFileName[FATFileNameSize]=
{
 'S','U','C','C','E','S','S',' ','T','X','T'    //00-10 - Short File Name
};

static const byte FAT16_FlashFailFileName[FATFileNameSize]=
{
  'F','F','A','I','L','E','D',' ','T','X','T'    //00-10 - Short File Name
};

static const byte FAT16_StartedFileName[FATFileNameSize]=
{
  'S','T','A','R','T','E','D',' ','T','X','T'    //00-10 - Short File Name
};

static const byte FAT16_RootDirSector[FATDirSize]=
{
  0x20,   //11 - Archive Attribute set
  0x00,   //12 - Reserved
  0x4B,   //13 - Create Time Tenth
  0x9C,   //14 - Create Time
  0x42,   //15 - Create Time
  0x92,   //16 - Create Date
  0x38,   //17 - Create Date
  0x92,   //18 - Last Access Date
  0x38,   //19 - Last Access Date
  0x00,   //20 - Not used in FAT16
  0x00,   //21 - Not used in FAT16
  0x9D,   //22 - Write Time
  0x42,   //23 - Write Time
  0x92,   //24 - Write Date
  0x38,   //25 - Write Date
  0x00,   //26 - First Cluster (none, because file is empty)
  0x00,   //27 - First Cluster (none, because file is empty)
  0x00,   //28 - File Size
  0x00,   //29 - File Size
  0x00,   //30 - File Size
  0x00,   //31 - File Size
  'B','O','O','T','L','O','A','D','E','R',' ',  //32-42 - Volume label
  0x08,   //43 - File attribute = Volume label
  0x00,   //44 - Reserved
  0x00,   //45 - Create Time Tenth
  0x00,   //46 - Create Time
  0x00,   //47 - Create Time
  0x00,   //48 - Create Date
  0x00,   //49 - Create Date
  0x00,   //50 - Last Access Date
  0x00,   //51 - Last Access Date
  0x00,   //52 - Not used in FAT16
  0x00,   //53 - Not used in FAT16
  0x9D,   //54 - Write Time
  0x42,   //55 - Write Time
  0x92,   //56 - Write Date
  0x38,   //57 - Write Date
};

%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG GetASCIIValue
static byte GetASCIIValue(byte value);
%-INTERNAL_LOC_METHOD_END GetASCIIValue
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG GetASCIIValue
%define! Parvalue
%define! RetVal
%include Common\GeneralInternalGlobal.inc (GetASCIIValue)
static byte GetASCIIValue(byte value)
{
  if(value <= 9) {
    return (byte)(value + '0');
  } else if(value <= 0xF) {
    return (byte)(value - 0xA + 'A');
  } else {
    return 'Z';
  }
}

%-INTERNAL_METHOD_END GetASCIIValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadLBA
%ifdef ReadLBA
%define! ParFAT_LBA
%define! Parpu8DataPointer
%define! ParfileStatus
%include Common\BootLoaderDiskReadLBA.Inc
void %'ModuleName'%.%ReadLBA(dword FAT_LBA, byte *pu8DataPointer, void *fileStatus)
{
  word i;

  switch (FAT_LBA) { /* Boot Sector */
    case FATBootSec:
      /* Write Boot Sector info */
      for(i=0;i<FATBootSize;i++) {
        *pu8DataPointer++ = FAT16_BootSector[i];
      }
      /* Rest of sector empty except last two bytes */
      i += 2;
      while (i++ < FATBytesPerSec) {
        *pu8DataPointer++ = 0;
      }
      /* Boot Sector requires these 2 bytes at end */
      *pu8DataPointer++ = 0x55;
      *pu8DataPointer++ = 0xAA;
      break;

    /* FAT Table Sector */
    case FATTable0Sec0:
    case FATTable1Sec0:
      /* Write FAT Table Sector */
      for(i=0;i<FATTableSize;i++) {
        *pu8DataPointer++ = FAT16_TableSector0[i];
      }
      /* Rest of sector empty */
      while (i++ < FATBytesPerSec) {
        *pu8DataPointer++ = 0;
      }
      break;

    /* Root Directory Sector */
    case FATRootDirSec0:
      /* Write file name */
      switch (*(%@S19@'ModuleName'%.FileStatus*)fileStatus) {
        case %@S19@'ModuleName'%.FILE_STATUS_NOT_STARTED:
          for(i=0;i<FATFileNameSize;i++) {
            *pu8DataPointer++ = FAT16_ReadyFileName[i];
          }
          break;
        default:
        case %@S19@'ModuleName'%.FILE_STATUS_ERROR:
          *pu8DataPointer++ = 'S';
          *pu8DataPointer++ = 'F';
          *pu8DataPointer++ = GetASCIIValue((byte)((%@S19@'ModuleName'%.GetCurrentAddress() >> 20) & 0xF));
          *pu8DataPointer++ = GetASCIIValue((byte)((%@S19@'ModuleName'%.GetCurrentAddress() >> 16) & 0xF));
          *pu8DataPointer++ = GetASCIIValue((byte)((%@S19@'ModuleName'%.GetCurrentAddress() >> 12) & 0xF));
          *pu8DataPointer++ = GetASCIIValue((byte)((%@S19@'ModuleName'%.GetCurrentAddress() >>  8) & 0xF));
          *pu8DataPointer++ = GetASCIIValue((byte)((%@S19@'ModuleName'%.GetCurrentAddress() >>  4) & 0xF));
          *pu8DataPointer++ = GetASCIIValue((byte)((%@S19@'ModuleName'%.GetCurrentAddress() >>  0) & 0xF));
          *pu8DataPointer++ = 'T';
          *pu8DataPointer++ = 'X';
          *pu8DataPointer++ = 'T';
          break;
        case %@S19@'ModuleName'%.FILE_FLASH_FAILED:
          for(i=0;i<FATFileNameSize;i++) {
            *pu8DataPointer++ = FAT16_FlashFailFileName[i];
          }
          break;
        case %@S19@'ModuleName'%.FILE_STATUS_FINISHED:
          for(i=0;i<FATFileNameSize;i++) {
            *pu8DataPointer++ = FAT16_SuccessFileName[i];
          }
          break;
        case %@S19@'ModuleName'%.FILE_STATUS_READING:
          for(i=0;i<FATFileNameSize;i++) {
            *pu8DataPointer++ = FAT16_StartedFileName[i];
          }
          break;
      }
      /* Write rest of file FAT structure */
      for(i=0;i<FATDirSize;i++) {
        *pu8DataPointer++ = FAT16_RootDirSector[i];
      }
      /* Rest of sector empty to signify no more files */
      i += FATFileNameSize;
      while (i++ < FATBytesPerSec) {
        *pu8DataPointer++ = 0;
      }
      break;

    /* All other sectors empty */
    default:
      i = 0;
      while (i++ < FATBytesPerSec) {
        *pu8DataPointer++ = 0;
      }
      break;
  } /* switch */}

%endif %- ReadLBA
%-BW_METHOD_END ReadLBA
%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Write code here ... */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
