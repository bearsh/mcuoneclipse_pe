%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.12.2011
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\RingBufferSettings.Inc
%define! Abstract Common\RingBufferAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
#define %'ModuleName'%.BUF_SIZE   %BufferSize  /* number of elements in the buffer */
%if %ElementSize="1"
typedef uint8_t %'ModuleName'_ElementType; /* type of single element */
%elif %ElementSize="2"
typedef uint16_t %'ModuleName'_ElementType; /* type of single element */
%elif %ElementSize="4"
typedef uint32_t %'ModuleName'_ElementType; /* type of single element */
%else
#error "illegal element type size in properties"
%endif
typedef uint8_t %'ModuleName'_ElementSizeType; /* support up to 256 elements */
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Put
%ifdef Put
byte %'ModuleName'%.%Put(%'ModuleName'_ElementType elem);
%define! Parelem
%define! RetVal
%include Common\RingBufferPut.Inc

%endif %- Put
%-BW_METHOD_END Put
%-************************************************************************************************************
%-BW_METHOD_BEGIN Get
%ifdef Get
byte %'ModuleName'%.%Get(%'ModuleName'_ElementType *elemP);
%define! ParelemP
%define! RetVal
%include Common\RingBufferGet.Inc

%endif %- Get
%-BW_METHOD_END Get
%-************************************************************************************************************
%-BW_METHOD_BEGIN NofElements
%ifdef NofElements
%'ModuleName'_ElementSizeType %'ModuleName'%.%NofElements(void);
%define! RetVal
%include Common\RingBufferNofElements.Inc

%endif %- NofElements
%-BW_METHOD_END NofElements
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\RingBufferInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN NofFreeElements
%ifdef NofFreeElements
%'ModuleName'_ElementSizeType %'ModuleName'%.%NofFreeElements(void);
%define! RetVal
%include Common\RingBufferNofFreeElements.Inc

%endif %- NofFreeElements
%-BW_METHOD_END NofFreeElements
%-************************************************************************************************************
%-BW_METHOD_BEGIN Clear
%ifdef Clear
void %'ModuleName'%.%Clear(void);
%include Common\RingBufferClear.Inc

%endif %- Clear
%-BW_METHOD_END Clear
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnBufferFull
%ifdef OnBufferFull
%INTERFACE OnBufferFull
void %OnBufferFull(void);
%include Common\RingBufferOnBufferFull.Inc

%endif %- OnBufferFull
%-BW_METHOD_END OnBufferFull
%-BW_METHOD_BEGIN OnBufferEmpty
%ifdef OnBufferEmpty
%INTERFACE OnBufferEmpty
void %OnBufferEmpty(void);
%include Common\RingBufferOnBufferEmpty.Inc

%endif %- OnBufferEmpty
%-BW_METHOD_END OnBufferEmpty
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\RingBufferSettings.Inc
%define! Abstract Common\RingBufferAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
static %'ModuleName'_ElementType %'ModuleName'%.buffer[%'ModuleName'%.BUF_SIZE]; /* ring buffer */
static %'ModuleName'_ElementSizeType %'ModuleName'%.inIdx;  /* input index */
static %'ModuleName'_ElementSizeType %'ModuleName'%.outIdx; /* output index */
static %'ModuleName'_ElementSizeType %'ModuleName'%.inSize; /* size of input data */
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Put
%ifdef Put
%define! Parelem
%define! RetVal
%include Common\RingBufferPut.Inc
byte %'ModuleName'%.%Put(%'ModuleName'_ElementType elem)
{
  byte res = ERR_OK;

  EnterCritical();
  if (%'ModuleName'%.inSize==%'ModuleName'%.BUF_SIZE) {
    res = ERR_TXFULL;
  } else {
    %'ModuleName'%.buffer[%'ModuleName'%.inIdx] = elem;
    %'ModuleName'%.inSize++;
    %'ModuleName'%.inIdx++;
    if (%'ModuleName'%.inIdx==%'ModuleName'%.BUF_SIZE) {
      %'ModuleName'%.inIdx = 0;
    }
  }
  ExitCritical();
%if defined(OnBufferFull)
  if (res==ERR_TXFULL) {
    %OnBufferFull(); /* call user event */
  }
%endif
  return res;
}

%endif %- Put
%-BW_METHOD_END Put
%-************************************************************************************************************
%-BW_METHOD_BEGIN Get
%ifdef Get
%define! ParelemP
%define! RetVal
%include Common\RingBufferGet.Inc
byte %'ModuleName'%.%Get(%'ModuleName'_ElementType *elemP)
{
  byte res = ERR_OK;

  EnterCritical();
  if (%'ModuleName'%.inSize==0) {
    res = ERR_RXEMPTY;
  } else {
    *elemP = %'ModuleName'%.buffer[%'ModuleName'%.outIdx];
    %'ModuleName'%.inSize--;
    %'ModuleName'%.outIdx++;
    if (%'ModuleName'%.outIdx==%'ModuleName'%.BUF_SIZE) {
      %'ModuleName'%.outIdx = 0;
    }
  }
  ExitCritical();
%if defined(OnBufferEmpty)
  if (res==ERR_RXEMPTY) {
    %OnBufferEmpty(); /* call user event */
  }
%endif
  return res;
}

%endif %- Get
%-BW_METHOD_END Get
%-************************************************************************************************************
%-BW_METHOD_BEGIN NofElements
%ifdef NofElements
%define! RetVal
%include Common\RingBufferNofElements.Inc
%'ModuleName'_ElementSizeType %'ModuleName'%.%NofElements(void)
{
  return %'ModuleName'%.inSize;
}

%endif %- NofElements
%-BW_METHOD_END NofElements
%-************************************************************************************************************
%-BW_METHOD_BEGIN NofFreeElements
%ifdef NofFreeElements
%define! RetVal
%include Common\RingBufferNofFreeElements.Inc
%'ModuleName'_ElementSizeType %'ModuleName'%.%NofFreeElements(void)
{
  return (%'ModuleName'_ElementSizeType)(%'ModuleName'%.BUF_SIZE-%'ModuleName'%.inSize);
}

%endif %- NofFreeElements
%-BW_METHOD_END NofFreeElements
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\RingBufferInit.Inc
void %'ModuleName'%.%Init(void)
{
  %'ModuleName'%.inIdx = 0;
  %'ModuleName'%.outIdx = 0;
  %'ModuleName'%.inSize = 0;
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Clear
%ifdef Clear
%include Common\RingBufferClear.Inc
void %'ModuleName'%.%Clear(void)
{
  EnterCritical();
  %'ModuleName'%.%Init();
  ExitCritical();
}

%endif %- Clear
%-BW_METHOD_END Clear
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnBufferFull
%ifdef OnBufferFull
%IMPLEMENTATION OnBufferFull
%include Common\RingBufferOnBufferFull.Inc
void %OnBufferFull(void)
{
  /* Write your code here ... */
}

%endif %- OnBufferFull
%-BW_METHOD_END OnBufferFull
%-BW_METHOD_BEGIN OnBufferEmpty
%ifdef OnBufferEmpty
%IMPLEMENTATION OnBufferEmpty
%include Common\RingBufferOnBufferEmpty.Inc
void %OnBufferEmpty(void)
{
  /* Write your code here ... */
}

%endif %- OnBufferEmpty
%-BW_METHOD_END OnBufferEmpty
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.%Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
