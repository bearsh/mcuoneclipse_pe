%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.09.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_Paint Paints a header in the window
%define! Description_MsgHandler Callback used for widget events
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UIHeaderSettings.Inc
%define! Abstract Common\UIHeaderAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
typedef %@UI@'ModuleName'%.PixelColor                            %>30 %'ModuleName'%.PixelColor;      %>55/* type large enough to hold the color information */
typedef %@UI@'ModuleName'%.PixelDim                              %>30 %'ModuleName'%.PixelDim;        %>55/* type big enough to hold the x and y coordinates */
typedef %@UI@'ModuleName'%.Element                               %>30 %'ModuleName'%.Element;         %>55/* Alias to UserInterface type */
typedef %@TextWidget@'ModuleName'%.TextWidget                    %>30 %'ModuleName'%.TextWidget;      %>55/* Alias to UserInterface type */
typedef %@Icon@'ModuleName'%.IconWidget                          %>30 %'ModuleName'%.IconWidget;      %>55/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.MsgKind                               %>30 %'ModuleName'%.MsgKind;         %>55/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Pvoid                                 %>30 %'ModuleName'%.Pvoid;           %>55/* Alias to Pvoid data type */
typedef %@UI@'ModuleName'%.FontCallbacks                         %>30 %'ModuleName'%.FontCallbacks;   %>55/* Callback to retrieve font information. */
typedef %@UI@'ModuleName'%.painterCallback                       %>30 %'ModuleName'%.painterCallback; %>55/* Alias to UserInterface type */

typedef struct {
  %'ModuleName'_Element element;                                 %>40/* the base element, always first in structure */
%ifdef SetUserMsgHandler
  %@UI@'ModuleName'%.MsgHandler userMsgHandler;                  %>40/* optional user handler */
%endif %- SetUserMsgHandler
  %'ModuleName'_TextWidget textWidget;                           %>40/* text widget describing the text */
  %'ModuleName'_IconWidget iconWidget;                           %>40/* icon widget  */
} %'ModuleName'_HeaderWidget;

typedef enum {                                                   %>40/* this lists widget specific event kinds */
  %'ModuleName'_MSG_HEADER_CLOSE = %@UI@'ModuleName'%.MSG_LAST_PREFINED%>40/* Close icon in header has been pressed */
} %'ModuleName'_HeaderMsgKind; /* extension of %@UI@'ModuleName'%.MsgKind */

/* default properties */
#define %'ModuleName'_HEADER_DEFAULT_TEXT    "%defaultText"
#define %'ModuleName'_HEADER_BORDER_SIZE     %HeaderBorderSize /* space around header content */
#define %'ModuleName'_HEADER_TEXT_COLOR      %@UI@'ModuleName'%.COLOR_%DefaultHeaderTextForegroundColor /* foreground text color */
#define %'ModuleName'_HEADER_COLOR           %@UI@'ModuleName'%.COLOR_%DefaultHeaderBackgroundColor /* header background color */
%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
byte %'ModuleName'%.%Create(%'ModuleName'_Element *parent, %'ModuleName'_HeaderWidget *header, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height);
%define! Parheader
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parparent
%define! RetVal
%include Common\UIHeaderCreate.Inc

%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetBackgroundColor
%ifdef SetBackgroundColor
#define %'ModuleName'%.%SetBackgroundColor(header, color) \
  %@UI@'ModuleName'%.SetElementColor(&((header)->element), color)

%define! Parcolor
%define! Parheader
%include Common\UIHeaderSetBackgroundColor.Inc

%endif %- SetBackgroundColor
%-BW_METHOD_END SetBackgroundColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
#define %'ModuleName'%.%SetUserMsgHandler(widget, handler) \
  (widget)->userMsgHandler = handler

%define! Parwidget
%define! Parhandler
%include Common\UIHeaderSetUserMsgHandler.Inc

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN Resize
%ifdef Resize
byte %'ModuleName'%.%Resize(%'ModuleName'_HeaderWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UIHeaderResize.Inc

%endif %- Resize
%-BW_METHOD_END Resize
%-************************************************************************************************************
%-BW_METHOD_BEGIN ResizeIcon
%ifdef ResizeIcon
byte %'ModuleName'%.%ResizeIcon(%'ModuleName'_HeaderWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UIHeaderResizeIcon.Inc

%endif %- ResizeIcon
%-BW_METHOD_END ResizeIcon
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UIHeaderSettings.Inc
%define! Abstract Common\UIHeaderAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG Paint
static byte Paint(%'ModuleName'_Element *element);
%-INTERNAL_LOC_METHOD_END Paint
%-INTERNAL_LOC_METHOD_BEG MsgHandler
static void MsgHandler(%'ModuleName'_MsgKind kind, %'ModuleName'_Element *element, %'ModuleName'_Pvoid pData);
%-INTERNAL_LOC_METHOD_END MsgHandler
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Paint
%define! Parelement
%define! RetVal
%include Common\GeneralInternalGlobal.inc (Paint)
static byte Paint(%'ModuleName'_Element *element)
{
  %'ModuleName'%.HeaderWidget* widget = (%'ModuleName'%.HeaderWidget*)element;

  if (widget->element.prop.type != %@UI@'ModuleName'%.WIDGET_HEADER) {
    return ERR_FAILED;
  }
  %@UI@'ModuleName'%.DrawFilledBox(element->parent, 0, 0, widget->element.prop.width, widget->element.prop.height, widget->element.prop.color);
  return ERR_OK;
}

%-INTERNAL_METHOD_END Paint
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG MsgHandler
%define! Parkind
%define! ParpData
%define! Parelement
%include Common\GeneralInternalGlobal.inc (MsgHandler)
static void MsgHandler(%'ModuleName'_MsgKind kind, %'ModuleName'_Element *element, %'ModuleName'_Pvoid pData)
{
  %'ModuleName'_HeaderWidget *widget = (%'ModuleName'_HeaderWidget*)element;

  if (kind==%@UI@'ModuleName'%.MSG_WIDGET_PAINT) {
    (void)Paint(element);
  } else if (kind==%@UI@'ModuleName'%.MSG_WIDGET_RESIZE) {
    (void)%@TextWidget@'ModuleName'%.Resize(&widget->textWidget); /* first resize header text item */
    (void)%'ModuleName'%.Resize(widget); /* resize widget itself */
    (void)%'ModuleName'%.%ResizeIcon(widget); /* resize and position icon */

  } else if (kind==%@UI@'ModuleName'%.MSG_CLICK_RELEASE) {       %>40/* clicked and now released */
    if (%@UI@'ModuleName'%.CoordinateInsideElement((%@UI@'ModuleName'%.Coordinate*)pData, &widget->iconWidget.element)) { /* inside close icon? */
%ifdef SetUserMsgHandler
      if (widget->userMsgHandler != NULL){
        widget->userMsgHandler((%@UI@'ModuleName'%.MsgKind)%'ModuleName'_MSG_HEADER_CLOSE, element, pData);%>40/* call user event for header  */
      }
%endif %- SetUserMsgHandler
    }
  }
%ifdef SetUserMsgHandler
  if (widget->userMsgHandler != NULL){
    widget->userMsgHandler(kind, element, pData);                %>40/* call user event  */
  }
%endif %- SetUserMsgHandler
}

%-INTERNAL_METHOD_END MsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN ResizeIcon
%ifdef ResizeIcon
%define! Parwidget
%define! RetVal
%include Common\UIHeaderResizeIcon.Inc
byte %'ModuleName'%.%ResizeIcon(%'ModuleName'_HeaderWidget *widget)
{
  %'ModuleName'_PixelDim iconSize, iconPosX, iconPosY;

  if (widget==NULL) {
    return ERR_FAILED;
  }
  if (widget->element.prop.height>2*%'ModuleName'_HEADER_BORDER_SIZE) {
    iconSize = widget->element.prop.height-2*%'ModuleName'_HEADER_BORDER_SIZE;
  } else {
    iconSize = 0;
  }
  if (widget->element.prop.width>%'ModuleName'_HEADER_BORDER_SIZE-iconSize) {
    iconPosX = widget->element.prop.width-%'ModuleName'_HEADER_BORDER_SIZE-iconSize;
  } else {
    iconPosX = 0;
  }
  iconPosY = %'ModuleName'_HEADER_BORDER_SIZE;
  widget->iconWidget.element.prop.x = iconPosX;
  widget->iconWidget.element.prop.y = iconPosY;
  widget->iconWidget.element.prop.width = iconSize;
  widget->iconWidget.element.prop.height = iconSize;
  return ERR_OK;
}

%endif %- ResizeIcon
%-BW_METHOD_END ResizeIcon
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
%define! Parheader
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parparent
%define! RetVal
%include Common\UIHeaderCreate.Inc
byte %'ModuleName'%.%Create(%'ModuleName'_Element *parent, %'ModuleName'_HeaderWidget *header, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height)
{
  if (parent==NULL || header==NULL) {
    return ERR_FAILED;
  }
  %@UI@'ModuleName'%.ElementInitCommon(&header->element, %@UI@'ModuleName'%.WIDGET_HEADER,
    x, y, width, height, %'ModuleName'_HEADER_COLOR, MsgHandler);
  /* create a textWidget for header text */
  if (%@TextWidget@'ModuleName'%.Create(&header->element, &header->textWidget, %'ModuleName'_HEADER_BORDER_SIZE, %'ModuleName'_HEADER_BORDER_SIZE, 0, 0)!=ERR_OK) {
    return ERR_FAILED;
  }
  if (%@TextWidget@'ModuleName'%.SetFgColor(&header->textWidget, %'ModuleName'_HEADER_TEXT_COLOR)!=ERR_OK) {
    return ERR_FAILED;
  }
  if (%@TextWidget@'ModuleName'%.SetBgColor(&header->textWidget, %'ModuleName'_HEADER_COLOR)!=ERR_OK) {
    return ERR_FAILED;
  }
  if (%@TextWidget@'ModuleName'%.SetText(&header->textWidget, (unsigned char *)%'ModuleName'_HEADER_DEFAULT_TEXT)!=ERR_OK) {
    return ERR_FAILED;
  }
  if (%@TextWidget@'ModuleName'%.Resize(&header->textWidget)!=ERR_OK) {
    return ERR_FAILED;
  }
  /* add the widget to the list in the parent */
  if (%@UI@'ModuleName'%.AddSubElement(parent, &header->element) != ERR_OK) {
    return ERR_FAILED;
  }
  if (width==0 && height==0) { /* auto size */
    if (%'ModuleName'%.%Resize(header)!=ERR_OK) {
      return ERR_FAILED;
    }
  }
  /* create icon widget with dummy values. The following resize will set them correctly. */
  if (%@Icon@'ModuleName'%.CreateIcon(&header->element, &header->iconWidget,
      5, %'ModuleName'_HEADER_BORDER_SIZE,
      5, 5, %@Icon@'ModuleName'%.ICON_CLOSE
    )!=ERR_OK)
  {
    return ERR_FAILED;
  }
  return %'ModuleName'%.%ResizeIcon(header);
}

%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetBackgroundColor
%ifdef SetBackgroundColor
%define! Parcolor
%define! Parheader
%include Common\UIHeaderSetBackgroundColor.Inc
/*
void %'ModuleName'%.%SetBackgroundColor(%'ModuleName'_HeaderWidget *header, %'ModuleName'_PixelColor color)
 ** This method is implemented as macro
*/

%endif %- SetBackgroundColor
%-BW_METHOD_END SetBackgroundColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
%define! Parwidget
%define! Parhandler
%include Common\UIHeaderSetUserMsgHandler.Inc
/*
void %'ModuleName'%.%SetUserMsgHandler(%'ModuleName'_HeaderWidget *widget, %@UI@'ModuleName'%.MsgHandler handler)
 ** This method is implemented as macro
*/

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN Resize
%ifdef Resize
%define! Parwidget
%define! RetVal
%include Common\UIHeaderResize.Inc
byte %'ModuleName'%.%Resize(%'ModuleName'_HeaderWidget *widget)
{
  if (widget==NULL) {
    return ERR_FAILED;
  }
  widget->element.prop.height = widget->textWidget.element.prop.height+2*%'ModuleName'_HEADER_BORDER_SIZE;
  if (widget->element.parent!=NULL) {
    widget->element.prop.width = widget->element.parent->prop.width;
  }
  return ERR_OK;
}

%endif %- Resize
%-BW_METHOD_END Resize
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
