%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.09.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_PaintSlider Paints a slider widget
%define! Description_EventCallback Callback used for widget events
%define! Description_SetRange Sets the minimum an maximum value of the slider
%define! Description_GetKnobPosition Return the position of the knob
%define! Description_SetKnobPosition Sets the position of the knob
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UISliderSettings.Inc
%define! Abstract Common\UISliderAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

typedef %@UI@'ModuleName'%.PixelColor %'ModuleName'%.PixelColor; %>40/* type large enough to hold the color information */
typedef %@UI@'ModuleName'%.PixelDim %'ModuleName'%.PixelDim;     %>40/* type big enough to hold the x and y coordinates */
typedef %@UI@'ModuleName'%.Screen %'ModuleName'%.Screen;         %>40/* Alias to UserInterface type */
typedef %@Window@'ModuleName'%.WindowWidget %'ModuleName'%.WindowWidget;%>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Element %'ModuleName'%.Element;       %>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.EventCallbackKind %'ModuleName'%.EventCallbackKind;%>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Pvoid %'ModuleName'%.Pvoid;           %>40/* Alias to Pvoid data type */
typedef %@UI@'ModuleName'%.FontCallbacks %'ModuleName'%.FontCallbacks;%>40/* Callback to retrieve font information. */
typedef %@UI@'ModuleName'%.painterCallback %'ModuleName'%.painterCallback;%>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Coordinate %'ModuleName'%.Coordinate; %>40/* Alias to UserInterface type */

typedef enum {                                                   %>40/* this lists all the different event callback argument types supported */
  %'ModuleName'_EVENT_BUTTON_PRESSED,                            %>40/* event for pressing a button */
  %'ModuleName'_EVENT_RELEASE_BUTTON,                            %>40/* event for releasing a button */
  %'ModuleName'_EVENT_ELEMENT_SELECT,                            %>40/* event for selecting an element */
  %'ModuleName'_EVENT_ELEMENT_DESELECT,                          %>40/* event for deselecting an element */
  %'ModuleName'_EVENT_CLICK,                                     %>40/* event for click an element */
  %'ModuleName'_EVENT_PAINT                                      %>40/* event called for painting the element */
} %'ModuleName'_ButtonEventCallbackKind;

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;

struct %'ModuleName'_WindowWidget;                               %>40/* forward declartion */
/* --- Element: Button --- */
typedef struct {
  %'ModuleName'_Element element;                                 %>40/* the base element, always first in structure */
  %if UserdefinedCallback='yes'
  void (*userAppCallback) (                                      %>40/* event called for a window element */
    struct %@UI@'ModuleName'%.Element *screen,                   %>40/* screen where the event happend */
    struct %@UI@'ModuleName'%.Element *window,                   %>40/* window where the event happend */
    struct %@UI@'ModuleName'%.Element *element,                  %>40/* element for the event */
    %'ModuleName'_EventCallbackKind eventKind,                   %>40/* kind of event */
    %'ModuleName'_Pvoid pData                                    %>40/* optional data pointer */
  );
  %endif
  long min;                                                      %>40/* minimal value of slider */
  long max;                                                      %>40/* maximal value of slider */
  word steps;                                                    %>40/* number of desired steps */
  long value;                                                    %>40/* value of the slider between min and max */
} %'ModuleName'_SliderWidget;

%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateSlider
%ifdef CreateSlider
byte %'ModuleName'%.%CreateSlider(%'ModuleName'_WindowWidget *window, %'ModuleName'_SliderWidget *slider, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height, %'ModuleName'_PixelColor Color, long min, long max, word steps);
%define! Parwindow
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parslider
%define! ParColor
%define! Parmin
%define! Parmax
%define! Parsteps
%define! RetVal
%include Common\UISliderCreateSlider.Inc

%endif %- CreateSlider
%-BW_METHOD_END CreateSlider
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserAppCallback
%ifdef SetUserAppCallback
#define %'ModuleName'%.%SetUserAppCallback(button, callback) \
(button->userAppCallback) = callback

%define! Parcallback
%define! Parslider
%include Common\UISliderSetUserAppCallback.Inc

%endif %- SetUserAppCallback
%-BW_METHOD_END SetUserAppCallback
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG SetRange
void %'ModuleName'%.SetRange(%'ModuleName'_SliderWidget *slider, long min, long max);
%define! Parmin
%define! Parmax
%define! Parslider
%include Common\GeneralInternal.inc (SetRange)

%-INTERNAL_METHOD_END SetRange
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetValue
%ifdef SetValue
void %'ModuleName'%.%SetValue(%'ModuleName'_SliderWidget *slider, long value);
%define! Parslider
%define! Parvalue
%include Common\UISliderSetValue.Inc

%endif %- SetValue
%-BW_METHOD_END SetValue
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG GetKnobPosition
%'ModuleName'_PixelDim %'ModuleName'%.GetKnobPosition(%'ModuleName'_SliderWidget *slider);
%define! Parslider
%define! RetVal
%include Common\GeneralInternal.inc (GetKnobPosition)

%-INTERNAL_METHOD_END GetKnobPosition
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG SetKnobPosition
void %'ModuleName'%.SetKnobPosition(%'ModuleName'_SliderWidget *slider, %'ModuleName'_Coordinate *clickPos);
%define! Parslider
%define! ParclickPos
%include Common\GeneralInternal.inc (SetKnobPosition)

%-INTERNAL_METHOD_END SetKnobPosition
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetValue
%ifdef GetValue
long %'ModuleName'%.%GetValue(%'ModuleName'_SliderWidget *slider);
%define! Parslider
%define! RetVal
%include Common\UISliderGetValue.Inc

%endif %- GetValue
%-BW_METHOD_END GetValue
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%INTERFACE OnEvent
void %OnEvent(%'ModuleName'_Screen *screen, %'ModuleName'_Element *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind event, %'ModuleName'_Pvoid pData);
%define! Parscreen
%define! Parwindow
%define! Parelement
%define! Parevent
%define! ParpData
%include Common\UISliderOnEvent.Inc

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UISliderSettings.Inc
%define! Abstract Common\UISliderAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
#include <string.h> /* for memcpy */
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#ifndef NULL
  #define NULL ((void*)0)
#endif

#define %'ModuleName'%.SLIDER_H_BORDER          %SliderBorder    %>40/* border left and right of slider */
#define %'ModuleName'%.TOP_LINE_COLOR           %@UI@'ModuleName'%.COLOR_%SliderTopColor%>40/* top line color of slider */
#define %'ModuleName'%.BOTTOM_LINE_COLOR        %@UI@'ModuleName'%.COLOR_%SliderBottomColor%>40/* bottom line color of slider */
#define %'ModuleName'%.KNOB_COLOR               %@UI@'ModuleName'%.COLOR_%KnobColor%>40/* color of the knob */
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG PaintSlider
static byte PaintSlider(%'ModuleName'_Element *element);
%-INTERNAL_LOC_METHOD_END PaintSlider
%-INTERNAL_LOC_METHOD_BEG EventCallback
static void EventCallback(%'ModuleName'_Screen *screen, %'ModuleName'_Element *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind kind, %'ModuleName'_Pvoid pData);
%-INTERNAL_LOC_METHOD_END EventCallback
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG EventCallback
%define! Parkind
%define! ParpData
%define! Parelement
%define! Parwindow
%define! Parscreen
%include Common\GeneralInternalGlobal.inc (EventCallback)
static void EventCallback(%'ModuleName'_Screen *screen, %'ModuleName'_Element *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind kind, %'ModuleName'_Pvoid pData)
{
  //(void)screen;                                                %>40/* unused argument */
  //(void)window;                                                %>40/* unused argument */
  %if defined(OnEvent)
  %OnEvent(screen, window, element, kind, pData);                %>40/* call user event */
  %endif

  %'ModuleName'_PixelDim knobPosition;
  %'ModuleName'_SliderWidget *slider = (%'ModuleName'_SliderWidget*)element;
  %@UI@'ModuleName'%.Coordinate clickPos = *(%@UI@'ModuleName'%.Coordinate *)pData;%>40/* get coordinates of event */


  knobPosition = %'ModuleName'%.GetKnobPosition(slider);         %>40/* get current position of knob */

  if (kind == %@UI@'ModuleName'%.EVENT_CLICK) {                  %>40/* click down */
    if (clickPos.x < knobPosition){                              %>40/* left of knob */
      %'ModuleName'%.%SetValue(slider, slider->value-((slider->max - slider->min)/slider->steps));%>40/* minus one step */
    }else if (clickPos.x > knobPosition+6){                      %>40/* right of knob */
      %'ModuleName'%.%SetValue(slider, slider->value+((slider->max - slider->min)/slider->steps));%>40/* plus one step */
    }
  }
  else if (kind == %@UI@'ModuleName'%.EVENT_CLICK_MOVE){
    %'ModuleName'%.SetKnobPosition(slider, &clickPos);
  }

}
%-INTERNAL_METHOD_END EventCallback
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG PaintSlider
%define! Parelement
%define! RetVal
%include Common\GeneralInternalGlobal.inc (PaintSlider)
static byte PaintSlider(%'ModuleName'_Element *element)
{
  %'ModuleName'_SliderWidget *slider = (%'ModuleName'_SliderWidget*)element;
  %'ModuleName'_PixelDim w, h, w_knob, h_knob;
  %'ModuleName'_Coordinate knobArea;

  if (slider == NULL) {
    return ERR_FAILED;
  }
  if (element->prop.type != %@UI@'ModuleName'%.WIDGET_SLIDER) {
    return ERR_FAILED;
  }
  w = element->prop.width;
  h = element->prop.height;
  /*draw background */
  %@UI@'ModuleName'%.DrawFilledBox(element, 0, 0, w, h, element->prop.color);
  /* slider horizontal line */
  %@UI@'ModuleName'%.DrawHLine(element, %'ModuleName'_SLIDER_H_BORDER, (h/2) -2, w - (2*%'ModuleName'_SLIDER_H_BORDER), %'ModuleName'_TOP_LINE_COLOR);
  %@UI@'ModuleName'%.DrawVLine(element, %'ModuleName'_SLIDER_H_BORDER, (h/2) -1, 3, %'ModuleName'_TOP_LINE_COLOR);
  %@UI@'ModuleName'%.DrawHLine(element, %'ModuleName'_SLIDER_H_BORDER, (h/2) +2, w - (2*%'ModuleName'_SLIDER_H_BORDER), %'ModuleName'_BOTTOM_LINE_COLOR);
  %@UI@'ModuleName'%.DrawVLine(element, w - %'ModuleName'_SLIDER_H_BORDER, (h/2) -1, 3, %'ModuleName'_BOTTOM_LINE_COLOR);

  /* draw slider knob */

  knobArea.x = %'ModuleName'%.GetKnobPosition(slider);
  w_knob = %knobWidth;
  h_knob = %knobHeight;
  knobArea.y = element->prop.height/2 -h_knob/2;
  %@UI@'ModuleName'%.DrawFilledBox(element, knobArea.x+1, knobArea.y+1, w_knob-2, h_knob-2, %'ModuleName'_KNOB_COLOR);
  %@UI@'ModuleName'%.DrawHLine(element, knobArea.x, knobArea.y, w_knob, %'ModuleName'_TOP_LINE_COLOR);
  %@UI@'ModuleName'%.DrawVLine(element, knobArea.x, knobArea.y+1, h_knob-2, %'ModuleName'_TOP_LINE_COLOR);
  %@UI@'ModuleName'%.DrawHLine(element, knobArea.x, knobArea.y+h_knob-1, w_knob, %'ModuleName'_BOTTOM_LINE_COLOR);
  %@UI@'ModuleName'%.DrawVLine(element, knobArea.x+w_knob-1, knobArea.y+1, h_knob-2, %'ModuleName'_BOTTOM_LINE_COLOR);


  return ERR_OK;
}

%-INTERNAL_METHOD_END PaintSlider
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateSlider
%ifdef CreateSlider
%define! Parwindow
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parslider
%define! ParColor
%define! Parmin
%define! Parmax
%define! Parsteps
%define! RetVal
%include Common\UISliderCreateSlider.Inc
byte %'ModuleName'%.%CreateSlider(%'ModuleName'_WindowWidget *window, %'ModuleName'_SliderWidget *slider, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height, %'ModuleName'_PixelColor Color, long min, long max, word steps)
{
   if (window == NULL || slider == NULL) {
    return ERR_FAILED;
  }

  %@UI@'ModuleName'%.ElementInitCommon((%'ModuleName'_Element*)slider, %@UI@'ModuleName'%.WIDGET_SLIDER,
    x, y, width, height,
    Color, (%'ModuleName'%.painterCallback)PaintSlider);
  slider->element.eventCallback = EventCallback;                 %>40/* add event callback */
  %if UserdefinedCallback='yes'
  slider->userAppCallback = NULL;                                %>40/* needs to be set by user */
  %endif

  slider->min = min;
  slider->max = max;
  slider->value = min;                                           %>40/* init value = min */
  if (steps == 0){
    slider->steps = 1;                                           %>40/* need to have at least one step*/
  } else{
    slider->steps = steps;
  }



  if (%@Window@'ModuleName'%.WindowAddElement(window, (%'ModuleName'%.Element *)slider) != ERR_OK) {
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- CreateSlider
%-BW_METHOD_END CreateSlider
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserAppCallback
%ifdef SetUserAppCallback
%define! Parcallback
#if 0
%define! Parslider
%include Common\UISliderSetUserAppCallback.Inc
void %'ModuleName'%.%SetUserAppCallback(%'ModuleName'_SliderWidget *slider, void (*eventCallback)(%'ModuleName'_Window *window, %'ModuleName'_Element *element, %'ModuleName'_ButtonEventCallbackKind event))
{
  /* method is implemented in the header file as macro */
}
#endif

%endif %- SetUserAppCallback
%-BW_METHOD_END SetUserAppCallback
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG SetRange
%define! Parmin
%define! Parmax
%define! Parslider
%include Common\GeneralInternal.inc (SetRange)
void %'ModuleName'%.SetRange(%'ModuleName'_SliderWidget *slider, long min, long max)
{
  if (min>max){                                                  %>40/* make shure max > min */
    slider->max = min;
    slider->min = max;
  } else{
    slider->max = max;
    slider->min = min;
  }
}

%-INTERNAL_METHOD_END SetRange
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetValue
%ifdef SetValue
%define! Parslider
%define! Parvalue
%include Common\UISliderSetValue.Inc
void %'ModuleName'%.%SetValue(%'ModuleName'_SliderWidget *slider, long value)
{
  /* set value inside allowed range */
  if (value > slider->max){
    value = slider->max;
  } else if (value < slider->min){
    value = slider->min;
  }
  if (slider->value != value){                                   %>40/* value changed so slider needs update */
    slider->value = value;
    %if defined(OnEvent)
    slider->element.eventCallback(NULL, NULL, &slider->element, %@UI@'ModuleName'%.EVENT_SLIDER_VAL_CHANGE, NULL);%>40/* event for user defined actions */
    %endif
    slider->element.prop.flags |= %@UI@'ModuleName'%.FLAGS_NEEDS_REPAINT;%>40 /* mark element as due for update */
    %@UI@'ModuleName'%.UpdateElement(NULL, (%'ModuleName'_Element*)slider);%>40/* element needs update */
  }
}

%endif %- SetValue
%-BW_METHOD_END SetValue
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG GetKnobPosition
%define! Parslider
%define! RetVal
%include Common\GeneralInternal.inc (GetKnobPosition)
%'ModuleName'_PixelDim %'ModuleName'%.GetKnobPosition(%'ModuleName'_SliderWidget *slider)
{
  int i;
  %'ModuleName'_PixelDim x;
  i =(int)(((slider->value - slider->min)*slider->steps)/(slider->max - slider->min));%>40/* i is in range of 0..steps */
  x = (%'ModuleName'_PixelDim)(%'ModuleName'_SLIDER_H_BORDER + ((%@UI@'ModuleName'%.GetElementWidth(slider)-2*%'ModuleName'_SLIDER_H_BORDER-%knobWidth)*i)/slider->steps);
  return x;
}

%-INTERNAL_METHOD_END GetKnobPosition
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG SetKnobPosition
%define! Parslider
%define! ParclickPos
%include Common\GeneralInternal.inc (SetKnobPosition)
void %'ModuleName'%.SetKnobPosition(%'ModuleName'_SliderWidget *slider, %'ModuleName'_Coordinate *clickPos)
{
  long delta;
  %'ModuleName'_PixelDim knobPos;
  knobPos = %'ModuleName'%.GetKnobPosition(slider);
  delta = clickPos->x-knobPos;                                   %>40/* difference in pixels */
  delta = (delta*(slider->max-slider->min))/(slider->element.prop.width-2*%'ModuleName'_SLIDER_H_BORDER);%>40/* scale to value */
  %'ModuleName'%.%SetValue(slider, slider->value+delta);
}

%-INTERNAL_METHOD_END SetKnobPosition
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetValue
%ifdef GetValue
%define! Parslider
%define! RetVal
%include Common\UISliderGetValue.Inc
long %'ModuleName'%.%GetValue(%'ModuleName'_SliderWidget *slider)
{
  return slider->value;
}

%endif %- GetValue
%-BW_METHOD_END GetValue
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%IMPLEMENTATION OnEvent
%define! Parscreen
%define! Parwindow
%define! Parelement
%define! Parevent
%define! ParpData
%include Common\UISliderOnEvent.Inc
void %OnEvent(%'ModuleName'_Screen *screen, %'ModuleName'_Element *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind event, %'ModuleName'_Pvoid pData)
{
  /* Write your code here ... */
}

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
