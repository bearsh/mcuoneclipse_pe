%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    30.05.2013
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\74HC595Settings.Inc
%define! Abstract Common\74HC595Abstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\74HC595Deinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\74HC595Init.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Latch
%ifdef Latch
void %'ModuleName'%.%Latch(void);
%include Common\74HC595Latch.Inc

%endif %- Latch
%-BW_METHOD_END Latch
%-************************************************************************************************************
%-BW_METHOD_BEGIN ShiftByte
%ifdef ShiftByte
void %'ModuleName'%.%ShiftByte(byte val);
%define! Parval
%include Common\74HC595ShiftByte.Inc

%endif %- ShiftByte
%-BW_METHOD_END ShiftByte
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
void %'ModuleName'%.%Enable(void);
%include Common\74HC595Enable.Inc

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
void %'ModuleName'%.%Disable(void);
%include Common\74HC595Disable.Inc

%endif %- Disable
%-BW_METHOD_END Disable
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteByte
%ifdef WriteByte
void %'ModuleName'%.%WriteByte(byte val);
%define! Parval
%include Common\74HC595WriteByte.Inc

%endif %- WriteByte
%-BW_METHOD_END WriteByte
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadByte
%ifdef ReadByte
byte %'ModuleName'%.%ReadByte(void);
%define! RetVal
%include Common\74HC595ReadByte.Inc

%endif %- ReadByte
%-BW_METHOD_END ReadByte
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\74HC595Settings.Inc
%define! Abstract Common\74HC595Abstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#define %'ModuleName'%.STCP_LATCH_DELAY_NS  %ClockLatchDelayNs /* delay in nano seconds */
#define %'ModuleName'%.SHCP_CLOCK_DELAY_NS  %ClockLatchDelayNs /* delay in nano seconds */

static uint8_t %'ModuleName'%.regVal8; /* cached value of the shift register */
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Latch
%ifdef Latch
%include Common\74HC595Latch.Inc
void %'ModuleName'%.%Latch(void)
{
  /* send a latch pulse to show the data on the output pins */
  %@STCP@'ModuleName'%.SetVal(); /* set latch to high */
#if %'ModuleName'%.STCP_LATCH_DELAY_NS != 0
  %@Wait@'ModuleName'%.Waitns(%'ModuleName'%.STCP_LATCH_DELAY_NS); /* wait according to data sheet */
#endif
  %@STCP@'ModuleName'%.ClrVal(); /* set latch to low */
#if %'ModuleName'%.STCP_LATCH_DELAY_NS != 0
  %@Wait@'ModuleName'%.Waitns(%'ModuleName'%.STCP_LATCH_DELAY_NS); /* wait according to data sheet */
#endif
}

%endif %- Latch
%-BW_METHOD_END Latch
%-************************************************************************************************************
%-BW_METHOD_BEGIN ShiftByte
%ifdef ShiftByte
%define! Parval
%include Common\74HC595ShiftByte.Inc
void %'ModuleName'%.%ShiftByte(byte val)
{
  /* see http://www.protostack.com/blog/2010/05/introduction-to-74hc595-shift-register-controlling-16-leds/ */
  int i;

  /* precondition: latch pin, data pin and clock pin are all low */
  %'ModuleName'%.regVal8 = val;
  for(i=0;i<8;i++) {
    /* put data bit */
    if (val&1) { /* LSB bit first */
      %@DS@'ModuleName'%.SetVal();
    } else {
      %@DS@'ModuleName'%.ClrVal();
    }
#if %'ModuleName'%.SHCP_CLOCK_DELAY_NS != 0
    %@Wait@'ModuleName'%.Waitns(%'ModuleName'%.SHCP_CLOCK_DELAY_NS); /* wait according to data sheet */
#endif
    %@SHCP@'ModuleName'%.SetVal(); /* CLK high: data gets transfered into memory */
#if %'ModuleName'%.SHCP_CLOCK_DELAY_NS != 0
    %@Wait@'ModuleName'%.Waitns(%'ModuleName'%.SHCP_CLOCK_DELAY_NS); /* wait according to data sheet */
#endif
    %@DS@'ModuleName'%.ClrVal(); /* data line low */
#if %'ModuleName'%.SHCP_CLOCK_DELAY_NS != 0
    %@Wait@'ModuleName'%.Waitns(%'ModuleName'%.SHCP_CLOCK_DELAY_NS); /* wait according to data sheet */
#endif
    %@SHCP@'ModuleName'%.ClrVal(); /* CLK high: data gets transfered into memory */
    val >>= 1; /* next bit */
  }
}

%endif %- ShiftByte
%-BW_METHOD_END ShiftByte
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
%include Common\74HC595Enable.Inc
void %'ModuleName'%.%Enable(void)
{
%if defined(OE)
  %@OE@'ModuleName'%.ClrVal(); /* device enabled */
%else
  /* no OE pin available */
%endif
}

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
%include Common\74HC595Disable.Inc
void %'ModuleName'%.%Disable(void)
{
%if defined(OE)
  %@OE@'ModuleName'%.SetVal(); /* device disabled */
%else
  /* no OE pin available */
%endif
}

%endif %- Disable
%-BW_METHOD_END Disable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\74HC595Deinit.Inc
void %'ModuleName'%.%Deinit(void)
{
  /* nothing needed here */
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\74HC595Init.Inc
void %'ModuleName'%.%Init(void)
{
  %'ModuleName'%.regVal8 = 0;
  %@STCP@'ModuleName'%.ClrVal(); /* latch */
  %@DS@'ModuleName'%.ClrVal(); /* data */
  %@SHCP@'ModuleName'%.ClrVal(); /* clock */
%if defined(OE)
  %if %EnableOEinInit='yes'
  %'ModuleName'%.Enable(); /* enable device */
  %else
  %'ModuleName'%.Disable(); /* disable device */
  %endif
%endif
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteByte
%ifdef WriteByte
%define! Parval
%include Common\74HC595WriteByte.Inc
void %'ModuleName'%.%WriteByte(byte val)
{
  %'ModuleName'%.ShiftByte(val); /* shift byte to the shift register */
  %'ModuleName'%.Latch(); /* latch it and show it on the output pins */
}

%endif %- WriteByte
%-BW_METHOD_END WriteByte
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadByte
%ifdef ReadByte
%define! RetVal
%include Common\74HC595ReadByte.Inc
byte %'ModuleName'%.%ReadByte(void)
{
  return %'ModuleName'%.regVal8;
}

%endif %- ReadByte
%-BW_METHOD_END ReadByte
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.%Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
