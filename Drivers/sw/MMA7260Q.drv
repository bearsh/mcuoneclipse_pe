%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Erich Styger
%define DriverVersion 01.00
%define DriverDate    27.06.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_Init Initializes the driver.
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\MMA7260QSettings.Inc
%define! Abstract Common\MMA7260QAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"
%include sw\CommonSupport.prg

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-

%ifdef Gselect
/* types for G-Select function */
#define %'ModuleName'%.G_select1_5 0x00  /* 1.5 g sensitivity */
#define %'ModuleName'%.G_Select2_0 0x01  /* 2 g sensitivity */
#define %'ModuleName'%.G_Select4_0 0x02  /* 4 g sensitivity */
#define %'ModuleName'%.G_Select6_0 0x03  /* 6 g sensitivity */

%endif
%ifdef ParseCommand
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  1  /* set to 1 if method ParseCommand() is present, 0 otherwise */
%else
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  0 /* set to 1 if method ParseCommand() is present, 0 otherwise */
%endif %- ParseCommand
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-INTERNAL_METHOD_BEG Init
byte %'ModuleName'%.Init(void);
%define! RetVal
%include Common\GeneralInternal.inc (Init)

%-INTERNAL_METHOD_END Init
%-BW_METHOD_BEGIN GetX
%ifdef GetX
int16_t %'ModuleName'%.%GetX(void);
%define! RetVal
%include Common\MMA7260QGetX.Inc

%endif %- GetX
%-BW_METHOD_END GetX
%-BW_METHOD_BEGIN SensorOn
%ifdef SensorOn
void %'ModuleName'%.%SensorOn(void);
%include Common\MMA7260QSensorOn.Inc

%endif %- SensorOn
%-BW_METHOD_END SensorOn
%-BW_METHOD_BEGIN SensorOff
%ifdef SensorOff
void %'ModuleName'%.%SensorOff(void);
%include Common\MMA7260QSensorOff.Inc

%endif %- SensorOff
%-BW_METHOD_END SensorOff
%-BW_METHOD_BEGIN Gselect
%ifdef Gselect
%define PargSelect
void %'ModuleName'%.%Gselect(byte gSelect);
%include Common\MMA7260QGselect.Inc

%endif %- Gselect
%-BW_METHOD_END Gselect
%-BW_METHOD_BEGIN GetY
%ifdef GetY
int16_t %'ModuleName'%.%GetY(void);
%define! RetVal
%include Common\MMA7260QGetY.Inc

%endif %- GetY
%-BW_METHOD_END GetY
%-BW_METHOD_BEGIN GetZ
%ifdef GetZ
int16_t %'ModuleName'%.%GetZ(void);
%define! RetVal
%include Common\MMA7260QGetZ.Inc

%endif %- GetZ
%-BW_METHOD_END GetZ
%-BW_METHOD_BEGIN CalibrateY1g
%ifdef CalibrateY1g
void %'ModuleName'%.%CalibrateY1g(void);
%include Common\MMA7260QCalibrateY1g.Inc

%endif %- CalibrateY1g
%-BW_METHOD_END CalibrateY1g
%-BW_METHOD_BEGIN GetXmg
%ifdef GetXmg
int16_t %'ModuleName'%.%GetXmg(void);
%define! RetVal
%include Common\MMA7260QGetXmg.Inc

%endif %- GetXmg
%-BW_METHOD_END GetXmg
%-BW_METHOD_BEGIN GetYmg
%ifdef GetYmg
int16_t %'ModuleName'%.%GetYmg(void);
%define! RetVal
%include Common\MMA7260QGetYmg.Inc

%endif %- GetYmg
%-BW_METHOD_END GetYmg
%-BW_METHOD_BEGIN GetZmg
%ifdef GetZmg
int16_t %'ModuleName'%.%GetZmg(void);
%define! RetVal
%include Common\MMA7260QGetZmg.Inc

%endif %- GetZmg
%-BW_METHOD_END GetZmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawX
%ifdef MeasureGetRawX
word %'ModuleName'%.%MeasureGetRawX(void);
%define! RetVal
%include Common\MMA7260QMeasureGetRawX.Inc

%endif %- MeasureGetRawX
%-BW_METHOD_END MeasureGetRawX
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawY
%ifdef MeasureGetRawY
word %'ModuleName'%.%MeasureGetRawY(void);
%define! RetVal
%include Common\MMA7260QMeasureGetRawY.Inc

%endif %- MeasureGetRawY
%-BW_METHOD_END MeasureGetRawY
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawZ
%ifdef MeasureGetRawZ
word %'ModuleName'%.%MeasureGetRawZ(void);
%define! RetVal
%include Common\MMA7260QMeasureGetRawZ.Inc

%endif %- MeasureGetRawZ
%-BW_METHOD_END MeasureGetRawZ
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetXOffset
%ifdef GetXOffset
int16_t %'ModuleName'%.%GetXOffset(void);
%define! RetVal
%include Common\MMA7260QGetXOffset.Inc

%endif %- GetXOffset
%-BW_METHOD_END GetXOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetYOffset
%ifdef GetYOffset
int16_t %'ModuleName'%.%GetYOffset(void);
%define! RetVal
%include Common\MMA7260QGetYOffset.Inc

%endif %- GetYOffset
%-BW_METHOD_END GetYOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZOffset
%ifdef GetZOffset
int16_t %'ModuleName'%.%GetZOffset(void);
%define! RetVal
%include Common\MMA7260QGetZOffset.Inc

%endif %- GetZOffset
%-BW_METHOD_END GetZOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetX1gValue
%ifdef GetX1gValue
int16_t %'ModuleName'%.%GetX1gValue(void);
%define! RetVal
%include Common\MMA7260QGetX1gValue.Inc

%endif %- GetX1gValue
%-BW_METHOD_END GetX1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetY1gValue
%ifdef GetY1gValue
int16_t %'ModuleName'%.%GetY1gValue(void);
%define! RetVal
%include Common\MMA7260QGetY1gValue.Inc

%endif %- GetY1gValue
%-BW_METHOD_END GetY1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZ1gValue
%ifdef GetZ1gValue
int16_t %'ModuleName'%.%GetZ1gValue(void);
%define! RetVal
%include Common\MMA7260QGetZ1gValue.Inc

%endif %- GetZ1gValue
%-BW_METHOD_END GetZ1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateX1g
%ifdef CalibrateX1g
void %'ModuleName'%.%CalibrateX1g(void);
%include Common\MMA7260QCalibrateX1g.Inc

%endif %- CalibrateX1g
%-BW_METHOD_END CalibrateX1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateZ1g
%ifdef CalibrateZ1g
void %'ModuleName'%.%CalibrateZ1g(void);
%include Common\MMA7260QCalibrateZ1g.Inc

%endif %- CalibrateZ1g
%-BW_METHOD_END CalibrateZ1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
byte %'ModuleName'%.%Deinit(void);
%define! RetVal
%include Common\MMA7260QDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
byte %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io);
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\MMA7260QParseCommand.Inc

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnADGet
%ifdef OnADGet
%INTERFACE OnADGet
void %OnADGet(void);
%include Common\MMA7260QOnADGet.Inc

%endif %- OnADGet
%-BW_METHOD_END OnADGet
%-BW_METHOD_BEGIN OnADGive
%ifdef OnADGive
%INTERFACE OnADGive
void %OnADGive(void);
%include Common\MMA7260QOnADGive.Inc

%endif %- OnADGive
%-BW_METHOD_END OnADGive
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\MMA7260QSettings.Inc
%define! Abstract Common\MMA7260QAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-

%if defined(CalibrateX1g) | defined(CalibrateY1g) | defined(CalibrateZ1g)
typedef struct {
  int16_t NxOff; /* offset for X axis */
  int16_t NyOff; /* offset for Y axis */
  int16_t NzOff; /* offset for Z axis */
  int16_t Nx1g;  /* value for 1g for X axis */
  int16_t Ny1g;  /* value for 1g for Y axis */
  int16_t Nz1g;  /* value for 1g for Z axis */
} tAccelCal;

/* default calibration values from component properties */
const tAccelCal InitialCalibration = { /* Initial default calibration values */
  %xCalibrationOffset, /* X offset */
  %yCalibrationOffset, /* Y offset */
  %zCalibrationOffset, /* Z offset */
  %x1gValue, /* X 1g */
  %y1gValue, /* Y 1g */
  %z1gValue  /* Z 1g */
};
static tAccelCal sCalValues; /* calibration values in RAM */

#define CalNxOff   sCalValues.NxOff
#define CalNyOff   sCalValues.NyOff
#define CalNzOff   sCalValues.NzOff
#define CalNx1g    sCalValues.Nx1g /* value for 1g */
#define CalNy1g    sCalValues.Ny1g /* value for 1g */
#define CalNz1g    sCalValues.Nz1g /* value for 1g */
%else
#define CalNxOff %xCalibrationOffset
#define CalNyOff %yCalibrationOffset
#define CalNzOff %zCalibrationOffset
#define CalNx1g  %x1gValue /* value for 1g */
#define CalNy1g  %y1gValue /* value for 1g */
#define CalNz1g  %z1gValue /* value for 1g */
%endif %- CalibrateY1g

#define ZeroGmilliVoltoffset  1650 /* Vdd/2, for 3.3V this is 1.65V */
#define milliVoltPerG         800 /* 800mV/g */
#define zeroGValue           (0xffff/2)   /* this is the value for zero g: midpoint */
%if defined(Shell)

static uint8_t PrintStatus(const %@Shell@'ModuleName'%.StdIOType *io) {
  unsigned char buf[8];
  uint16_t val;

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"%'ModuleName'", (unsigned char*)"\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  raw", (unsigned char*)"0x", io->stdOut);
  val = %'ModuleName'%.MeasureGetRawX();
  buf[0] = '\0';
  %@Utility@'ModuleName'%.strcatNum16Hex(buf, sizeof(buf), (uint16_t)val);
  %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" (", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16u(val, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"), 0x", io->stdOut);

  val = %'ModuleName'%.MeasureGetRawY();
  buf[0] = '\0';
  %@Utility@'ModuleName'%.strcatNum16Hex(buf, sizeof(buf), (uint16_t)val);
  %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" (", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16u(val, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"), 0x", io->stdOut);

  val = %'ModuleName'%.MeasureGetRawZ();
  buf[0] = '\0';
  %@Utility@'ModuleName'%.strcatNum16Hex(buf, sizeof(buf), (uint16_t)val);
  %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" (", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16u(val, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)")\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  milli-g", (unsigned char*)"", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetXmg(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetYmg(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetZmg(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  raw+offset", (unsigned char*)"", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetX(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetY(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetZ(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  calibOffset", (unsigned char*)"", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetXOffset(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetYOffset(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetZOffset(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  calib 1g", (unsigned char*)"", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetX1gValue(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetY1gValue(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetZ1gValue(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);

  return ERR_OK;
}

static uint8_t PrintHelp(const %@Shell@'ModuleName'%.StdIOType *io) {
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"%'ModuleName'", (unsigned char*)"Group of %'ModuleName' commands\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  help|status", (unsigned char*)"Print help or status information\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  calibrate x|y|z", (unsigned char*)"Performs accelerometer calibration\r\n", io->stdOut);
  return ERR_OK;
}

%endif
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-BW_METHOD_BEGIN GetX
%ifdef GetX
%define! RetVal
%include Common\MMA7260QGetX.Inc
int16_t %'ModuleName'%.%GetX(void)
{
  uint16_t value;

  value = %'ModuleName'%.%MeasureGetRawX();
  value -= CalNxOff; /* adjust with calibration offset */
  value -= zeroGValue; /* adjust with midpoint zero g value */
  return (int16_t)value;
}

%endif %- GetX
%-BW_METHOD_END GetX
%-BW_METHOD_BEGIN GetY
%ifdef GetY
%define! RetVal
%include Common\MMA7260QGetY.Inc
int16_t %'ModuleName'%.%GetY(void)
{
  uint16_t value;

  value = %'ModuleName'%.%MeasureGetRawY();
  value -= CalNyOff; /* adjust with calibration offset */
  value -= zeroGValue; /* adjust with midpoint zero g value */
  return (int16_t)value;
}

%endif %- GetY
%-BW_METHOD_END GetY
%-BW_METHOD_BEGIN GetZ
%ifdef GetZ
%define! RetVal
%include Common\MMA7260QGetZ.Inc
int16_t %'ModuleName'%.%GetZ(void)
{
  uint16_t value;

  value = %'ModuleName'%.%MeasureGetRawZ();
  value -= CalNzOff; /* adjust with calibration offset */
  value -= zeroGValue; /* adjust with midpoint zero g value */
  return (int16_t)value;
}

%endif %- GetZ
%-BW_METHOD_END GetZ
%-BW_METHOD_BEGIN SensorOn
%ifdef SensorOn
%include Common\MMA7260QSensorOn.Inc
void %'ModuleName'%.%SensorOn(void)
{
  %if %EnableDisableAD = 'yes'
  %@AccelADC@'ModuleName'%.Enable(); /* enable AD block */
  %endif
  %@SleepPin@'ModuleName'%.SetVal(); /* the sleep pin is low active: setting it to high to enable sensor */
  %@Wait@'ModuleName'%.Waitms(10); /* wait some time to give the sensor some time to wake up */
}

%endif %- SensorOn
%-BW_METHOD_END SensorOn
%-BW_METHOD_BEGIN SensorOff
%ifdef SensorOff
%include Common\MMA7260QSensorOff.Inc
void %'ModuleName'%.%SensorOff(void)
{
  %@SleepPin@'ModuleName'%.ClrVal(); /* the sleep pin is low active: setting it to low to put the sensor in sleep mode. */
  %if %EnableDisableAD = 'yes'
  %@AccelADC@'ModuleName'%.Disable(); /* disable AD block to save power */
  %endif
}

%endif %- SensorOff
%-BW_METHOD_END SensorOff
%-BW_METHOD_BEGIN Gselect
%ifdef Gselect
%include Common\MMA7260QGselect.Inc
void %'ModuleName'%.%Gselect(byte gSelect)
{
/* See following defines which can be used as arguments: g1_5, g2_0, g4_0 and g6_0 */
  if (gSelect&1) {
    %@Gselect1pin@'ModuleName'%.SetVal();
  } else {
    %@Gselect1pin@'ModuleName'%.ClrVal();
  }
  if (gSelect&2) {
    %@Gselect2pin@'ModuleName'%.SetVal();
  } else {
    %@Gselect2pin@'ModuleName'%.ClrVal();
  }
}

%endif %- Gselect
%-BW_METHOD_END Gselect
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateX1g
%ifdef CalibrateX1g
%include Common\MMA7260QCalibrateX1g.Inc
void %'ModuleName'%.%CalibrateX1g(void)
{
  /* assumption is that accelerometer is placed with 1g for X and 0g for Y and Z */
  uint32_t X=0, Y=0, Z=0;
  uint8_t i;

  /* Get the raw data */
  for (i=0; i<8; i++) {
   X += %'ModuleName'%.%MeasureGetRawX();
   Y += %'ModuleName'%.%MeasureGetRawY();
   Z += %'ModuleName'%.%MeasureGetRawZ();
  }
  /* build average of 8 measured values */
  X >>= 3;
  Y >>= 3;
  Z >>= 3;
  /* store the calibration values */
  sCalValues.Nx1g  = (int16_t)(X-zeroGValue); /* we have 1g on X */
  /* offset: both Y and Z shall have zero g (midpoint) */
  sCalValues.NyOff = (int16_t)(Y-zeroGValue);
  sCalValues.NzOff = (int16_t)(Z-zeroGValue);
}

%endif %- CalibrateX1g
%-BW_METHOD_END CalibrateX1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateY1g
%ifdef CalibrateY1g
%include Common\MMA7260QCalibrateY1g.Inc
void %'ModuleName'%.%CalibrateY1g(void)
{
  /* assumption is that accelerometer is placed with 1g for Y and 0g for X and Z */
  uint32_t X=0, Y=0, Z=0;
  uint8_t i;

  /* Get the raw data */
  for (i=0; i<8; i++) {
   X += %'ModuleName'%.%MeasureGetRawX();
   Y += %'ModuleName'%.%MeasureGetRawY();
   Z += %'ModuleName'%.%MeasureGetRawZ();
  }
  /* build average of 8 measured values */
  X >>= 3;
  Y >>= 3;
  Z >>= 3;
  /* store the calibration values */
  sCalValues.Ny1g  = (int16_t)(Y-zeroGValue); /* we have 1g on Y */
  /* offset: both X and Z shall have zero g (midpoint) */
  sCalValues.NxOff = (int16_t)(X-zeroGValue);
  sCalValues.NzOff = (int16_t)(Z-zeroGValue);
}
%endif %- CalibrateY1g
%-BW_METHOD_END CalibrateY1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateZ1g
%ifdef CalibrateZ1g
%include Common\MMA7260QCalibrateZ1g.Inc
void %'ModuleName'%.%CalibrateZ1g(void)
{
  /* assumption is that accelerometer is placed with 1g for Z and 0g for X and Y */
  uint32_t X=0, Y=0, Z=0;
  uint8_t i;

  /* Get the raw data */
  for (i=0; i<8; i++) {
   X += %'ModuleName'%.%MeasureGetRawX();
   Y += %'ModuleName'%.%MeasureGetRawY();
   Z += %'ModuleName'%.%MeasureGetRawZ();
  }
  /* build average of 8 measured values */
  X >>= 3;
  Y >>= 3;
  Z >>= 3;
  /* store the calibration values */
  sCalValues.Nz1g  = (int16_t)(Z-zeroGValue); /* we have 1g on Z */
  /* offset: both X and Y shall have zero g (midpoint) */
  sCalValues.NxOff = (int16_t)(X-zeroGValue);
  sCalValues.NyOff = (int16_t)(Y-zeroGValue);
}

%endif %- CalibrateZ1g
%-BW_METHOD_END CalibrateZ1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetXmg
%ifdef GetXmg
%define! RetVal
%include Common\MMA7260QGetXmg.Inc
int16_t %'ModuleName'%.%GetXmg(void)
{
  int32_t L;

  L = %'ModuleName'%.%MeasureGetRawX();
  L -= CalNxOff; /* apply offset */
  L -= zeroGValue; /* get based to zero g */
  L *= 1000; /* scale to milli g */
  L /= (CalNx1g-CalNxOff); /* apply 1g calibrated value */
  return (int16_t)L;
}

%endif %- GetXmg
%-BW_METHOD_END GetXmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetYmg
%ifdef GetYmg
%define! RetVal
%include Common\MMA7260QGetYmg.Inc
int16_t %'ModuleName'%.%GetYmg(void)
{
  int32_t L;

  L = %'ModuleName'%.%MeasureGetRawY();
  L -= CalNyOff; /* apply offset */
  L -= zeroGValue; /* get based to zero g */
  L *= 1000; /* scale to milli g */
  L /= (CalNy1g-CalNyOff); /* apply 1g calibrated value */
  return (int16_t)L;
}

%endif %- GetYmg
%-BW_METHOD_END GetYmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZmg
%ifdef GetZmg
%define! RetVal
%include Common\MMA7260QGetZmg.Inc
int16_t %'ModuleName'%.%GetZmg(void)
{
  int32_t L;

  L = %'ModuleName'%.%MeasureGetRawZ();
  L -= CalNzOff; /* apply offset */
  L -= zeroGValue; /* get based to zero g */
  L *= 1000; /* scale to milli g */
  L /= (CalNz1g-CalNzOff); /* apply 1g calibrated value */
  return (int16_t)L;
}

%endif %- GetZmg
%-BW_METHOD_END GetZmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawX
%ifdef MeasureGetRawX
%define! RetVal
%include Common\MMA7260QMeasureGetRawX.Inc
word %'ModuleName'%.%MeasureGetRawX(void)
{
  uint16_t val;

%ifdef OnADGet
  %OnADGet(); /* call user event to get mutual exclusive access to A/D channel/device */
%endif
  (void)%@AccelADC@'ModuleName'%.MeasureChan(TRUE, %XChannel);
  (void)%@AccelADC@'ModuleName'%.GetChanValue16(%XChannel,(uint16_t*) &val);
%ifdef OnADGive
  %OnADGive(); /* call user event to get mutual exclusive access to A/D channel/device */
%endif
  return val;
}

%endif %- MeasureGetRawX
%-BW_METHOD_END MeasureGetRawX
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawY
%ifdef MeasureGetRawY
%define! RetVal
%include Common\MMA7260QMeasureGetRawY.Inc
word %'ModuleName'%.%MeasureGetRawY(void)
{
  uint16_t val;

%ifdef OnADGet
  %OnADGet(); /* call user event to get mutual exclusive access to A/D channel/device */
%endif
  (void)%@AccelADC@'ModuleName'%.MeasureChan(TRUE, %YChannel);
  (void)%@AccelADC@'ModuleName'%.GetChanValue16(%YChannel, (uint16_t*)&val);
%ifdef OnADGive
  %OnADGive(); /* call user event to get mutual exclusive access to A/D channel/device */
%endif
  return val;
}

%endif %- MeasureGetRawY
%-BW_METHOD_END MeasureGetRawY
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawZ
%ifdef MeasureGetRawZ
%define! RetVal
%include Common\MMA7260QMeasureGetRawZ.Inc
word %'ModuleName'%.%MeasureGetRawZ(void)
{
  uint16_t val;

%ifdef OnADGet
  %OnADGet(); /* call user event to get mutual exclusive access to A/D channel/device */
%endif
  (void)%@AccelADC@'ModuleName'%.MeasureChan(TRUE, %ZChannel);
  (void)%@AccelADC@'ModuleName'%.GetChanValue16(%ZChannel, (uint16_t*)&val);
%ifdef OnADGive
  %OnADGive(); /* call user event to get mutual exclusive access to A/D channel/device */
%endif
  return val;
}

%endif %- MeasureGetRawZ
%-BW_METHOD_END MeasureGetRawZ
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetXOffset
%ifdef GetXOffset
%define! RetVal
%include Common\MMA7260QGetXOffset.Inc
int16_t %'ModuleName'%.%GetXOffset(void)
{
  return CalNxOff;
}

%endif %- GetXOffset
%-BW_METHOD_END GetXOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetYOffset
%ifdef GetYOffset
%define! RetVal
%include Common\MMA7260QGetYOffset.Inc
int16_t %'ModuleName'%.%GetYOffset(void)
{
  return CalNyOff;
}

%endif %- GetYOffset
%-BW_METHOD_END GetYOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZOffset
%ifdef GetZOffset
%define! RetVal
%include Common\MMA7260QGetZOffset.Inc
int16_t %'ModuleName'%.%GetZOffset(void)
{
  return CalNzOff;
}

%endif %- GetZOffset
%-BW_METHOD_END GetZOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetX1gValue
%ifdef GetX1gValue
%define! RetVal
%include Common\MMA7260QGetX1gValue.Inc
int16_t %'ModuleName'%.%GetX1gValue(void)
{
  return CalNx1g;
}

%endif %- GetX1gValue
%-BW_METHOD_END GetX1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetY1gValue
%ifdef GetY1gValue
%define! RetVal
%include Common\MMA7260QGetY1gValue.Inc
int16_t %'ModuleName'%.%GetY1gValue(void)
{
  return CalNy1g;
}

%endif %- GetY1gValue
%-BW_METHOD_END GetY1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZ1gValue
%ifdef GetZ1gValue
%define! RetVal
%include Common\MMA7260QGetZ1gValue.Inc
int16_t %'ModuleName'%.%GetZ1gValue(void)
{
  return CalNz1g;
}

%endif %- GetZ1gValue
%-BW_METHOD_END GetZ1gValue
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Init
%define! RetVal
%include Common\GeneralInternal.inc (Init)
byte %'ModuleName'%.Init(void)
{
%if defined(CalibrateX1g) | defined(CalibrateY1g) | defined(CalibrateZ1g)
  sCalValues.NxOff = InitialCalibration.NxOff;
  sCalValues.Nx1g  = InitialCalibration.Nx1g;
  sCalValues.NyOff = InitialCalibration.NyOff;
  sCalValues.Ny1g  = InitialCalibration.Ny1g;
  sCalValues.NzOff = InitialCalibration.NzOff;
  sCalValues.Nz1g  = InitialCalibration.Nz1g;
%endif %- CalibrateY1g
%ifdef EnabledInInit
  %if %EnabledInInit='yes'
  %'ModuleName'%.%SensorOn(); /* enable sensor */
  %else
  %'ModuleName'%.%SensorOff(); /* sensor off to save energy */
  %endif
%endif
  return ERR_OK;
}

%-INTERNAL_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%define! RetVal
%include Common\MMA7260QDeinit.Inc
byte %'ModuleName'%.%Deinit(void)
{
  return ERR_OK;
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\MMA7260QParseCommand.Inc
byte %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io)
{
  if (%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_HELP)==0 || %@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' help")==0) {
    *handled = TRUE;
    return PrintHelp(io);
  } else if ((%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_STATUS)==0) || (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' status")==0)) {
    *handled = TRUE;
    return PrintStatus(io);
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' calibrate x")==0) {
    %'ModuleName'%.CalibrateX1g();
    *handled = TRUE;
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' calibrate y")==0) {
    %'ModuleName'%.CalibrateY1g();
    *handled = TRUE;
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' calibrate z")==0) {
    %'ModuleName'%.CalibrateZ1g();
    *handled = TRUE;
  }
  return ERR_OK;
}

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnADGet
%ifdef OnADGet
%IMPLEMENTATION OnADGet
%include Common\MMA7260QOnADGet.Inc
void %OnADGet(void)
{
  /* request mutex here */
}

%endif %- OnADGet
%-BW_METHOD_END OnADGet
%-BW_METHOD_BEGIN OnADGive
%ifdef OnADGive
%IMPLEMENTATION OnADGive
%include Common\MMA7260QOnADGive.Inc
void %OnADGive(void)
{
  /* release mutex here... */
}

%endif %- OnADGive
%-BW_METHOD_END OnADGive
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  (void)%'ModuleName'%.Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
