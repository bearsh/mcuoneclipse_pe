%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    22.07.2012
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\GenericTimeDateSettings.Inc
%define! Abstract Common\GenericTimeDateAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#ifndef __BWUserType_TIMEREC
#define __BWUserType_TIMEREC
  typedef struct {                                               %>40/* It contains actual number of hours, minutes, seconds and hundreth of seconds. */
    byte Hour;                                                   %>40/* hours (0 - 23) */
    byte Min;                                                    %>40/* minutes (0 - 59) */
    byte Sec;                                                    %>40/* seconds (0 - 59) */
    byte Sec100;                                                 %>40/* hundredth of seconds (0 - 99) */
  } TIMEREC;
#endif
#ifndef __BWUserType_DATEREC
#define __BWUserType_DATEREC
  typedef struct {                                               %>40/* It contains actual year, month, and day description. */
    word Year;                                                   %>40/* years (1998 - 2099) */
    byte Month;                                                  %>40/* months (1 - 12) */
    byte Day;                                                    %>40/* days (1 - 31) */
  } DATEREC;
#endif
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetTime
%ifdef SetTime
byte %'ModuleName'%.%SetTime(byte Hour, byte Min, byte Sec, byte Sec100);
%define! ParHour
%define! ParMin
%define! ParSec
%define! ParSec100
%define! RetVal
%include Common\GenericTimeDateSetTime.Inc

%endif %- SetTime
%-BW_METHOD_END SetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTick
%ifdef AddTick
void %'ModuleName'%.%AddTick(void);
%include Common\GenericTimeDateAddTick.Inc

%endif %- AddTick
%-BW_METHOD_END AddTick
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTime
%ifdef GetTime
byte %'ModuleName'%.%GetTime(TIMEREC *Time);
%define! ParTime
%define! RetVal
%include Common\GenericTimeDateGetTime.Inc

%endif %- GetTime
%-BW_METHOD_END GetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDate
%ifdef SetDate
byte %'ModuleName'%.%SetDate(word Year, byte Month, byte Day);
%define! ParYear
%define! ParMonth
%define! ParDay
%define! RetVal
%include Common\GenericTimeDateSetDate.Inc

%endif %- SetDate
%-BW_METHOD_END SetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDate
%ifdef GetDate
byte %'ModuleName'%.%GetDate(DATEREC *Date);
%define! ParDate
%define! RetVal
%include Common\GenericTimeDateGetDate.Inc

%endif %- GetDate
%-BW_METHOD_END GetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\GenericTimeDateInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\GenericTimeDateSettings.Inc
%define! Abstract Common\GenericTimeDateAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#define %'ModuleName'%.TICK_TIME_MS  %TickTimeMs                 %>40/* timer tick time in milliseconds, set in properties */
#define %'ModuleName'%.TICKS_PER_S  (1000/%'ModuleName'%.TICK_TIME_MS)%>40/* number of timer ticks per second */

static byte CntDay;                                              %>40/* Day counter */
static byte CntMonth;                                            %>40/* Month counter */
static word CntYear;                                             %>40/* Year Counter */
static dword TotalHthH;                                          %>40/* Software tick counter (1 tick = %'ModuleName'%.TICK_TIME_MS ms) */

/* Table of month length (in days) */
static const  byte ULY[12] = {31U,28U,31U,30U,31U,30U,31U,31U,30U,31U,30U,31U}; /* Un-leap-year */
static const  byte  LY[12] = {31U,29U,31U,30U,31U,30U,31U,31U,30U,31U,30U,31U}; /* Leap-year */
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetTime
%ifdef SetTime
%define! ParHour
%define! ParMin
%define! ParSec
%define! ParSec100
%define! RetVal
%include Common\GenericTimeDateSetTime.Inc
#ifdef __HIWARE__
  #pragma MESSAGE DISABLE C5905 /* multiplication with one (happens if %'ModuleName'%.TICKS_PER_S is 100) */
#endif
byte %'ModuleName'%.%SetTime(byte Hour, byte Min, byte Sec, byte Sec100)
{
  if ((Sec100 > 99U) || (Sec > 59U) || (Min > 59U) || (Hour > 23U)) {%>40/* Test correctnes of given time */
    return ERR_RANGE;                                            %>40/* If not correct then error */
  }
  EnterCritical();
  TotalHthH =   (3600UL*%'ModuleName'%.TICKS_PER_S*(dword)Hour)
              + (60UL*%'ModuleName'%.TICKS_PER_S*(dword)Min)
              + (%'ModuleName'%.TICKS_PER_S*(dword)Sec)
              + ((%'ModuleName'%.TICKS_PER_S/100)*(dword)Sec100);%>40/* Load given time re-calculated to %'ModuleName'%.TICK_TIME_MS ms ticks into software tick counter */
  ExitCritical();
  return ERR_OK;                                                 %>40/* OK */
}
#ifdef __HIWARE__
  #pragma MESSAGE DEFAULT C5905 /* multiplication with one  */
#endif

%endif %- SetTime
%-BW_METHOD_END SetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTick
%ifdef AddTick
%include Common\GenericTimeDateAddTick.Inc
void %'ModuleName'%.%AddTick(void)
{
  const byte * ptr;                                              %>40/* Pointer to ULY/LY table */

  TotalHthH += 0x01UL;                                           %>40/* Software timer counter increment by timer period */
  if (TotalHthH >= 24*3600UL*%'ModuleName'%.TICKS_PER_S) {       %>40/* Does the counter reach 24 hours? */
    TotalHthH -= 24*3600UL*%'ModuleName'%.TICKS_PER_S;           %>40/* If yes then reset it by subtracting exactly 24 hours */
    CntDay++;                                                    %>40/* Increment day counter */
    if (CntYear & 0x03U) {                                       %>40/* Is this year un-leap-one? */
      ptr = ULY;                                                 %>40/* Set pointer to un-leap-year day table */
    } else {                                                     %>40/* Is this year leap-one? */
      ptr = LY;                                                  %>40/* Set pointer to leap-year day table */
    }
    ptr--;                                                       %>40/* Decrement the pointer */
    if (CntDay > ptr[CntMonth]) {                                %>40/* Day counter overflow? */
      CntDay = 1U;                                               %>40/* Set day counter on 1 */
      CntMonth++;                                                %>40/* Increment month counter */
      if (CntMonth > 12U) {                                      %>40/* Month counter overflow? */
        CntMonth = 1U;                                           %>40/* Set month counter on 1 */
        CntYear++;                                               %>40/* Increment year counter */
      }
    }
  }
}

%endif %- AddTick
%-BW_METHOD_END AddTick
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTime
%ifdef GetTime
%define! ParTime
%define! RetVal
%include Common\GenericTimeDateGetTime.Inc
byte %'ModuleName'%.%GetTime(TIMEREC *Time)
{
  dword Var1;                                                    %>40/* Working temporary copy of software tick counter */
  word Var2;                                                     %>40/* Working temporary variable */

  EnterCritical();                                               %>40/* Save the PS register */
  Var1 = TotalHthH;                                              %>40/* Loading actual number of tens of ms */
  ExitCritical();                                                %>40/* Restore the PS register */
  Time->Sec100 = (byte)(Var1 %% 100U);                           %>40/* Modulo 100 gives appropriate number of hundredths of seconds */
  Var1 = (dword)(Var1 / 100UL);                                  %>40/* Quotient gives total number of seconds then */
  Time->Sec = (byte)(Var1 %% 60U);                               %>40/* Modulo 60 gives appropriate number of seconds */
  Var2 = (word)(Var1 / 60UL);                                    %>40/* Quotient gives total number of minutes then */
  Time->Min = (byte)(Var2 %% 60U);                               %>40/* Modulo 60 gives appropriate number of minutes */
  Time->Hour = (byte)(Var2 / 60U);                               %>40/* Quotient gives total number of hours then */
  return ERR_OK;
}

%endif %- GetTime
%-BW_METHOD_END GetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDate
%ifdef SetDate
%define! ParYear
%define! ParMonth
%define! ParDay
%define! RetVal
%include Common\GenericTimeDateSetDate.Inc
byte %'ModuleName'%.%SetDate(word Year, byte Month, byte Day)
{
  const byte * ptr;                                              %>40/* Pointer to ULY/LY table */

  if ((Year < 1998U) || (Year > 2099U) || (Month > 12U) || (Month == 0U) || (Day > 31U) || (Day == 0U)) {%>40/* Test correctness of given parameters */
    return ERR_RANGE;                                            %>40/* If not correct then error */
  }
  ptr = (((Year & 0x03U) != 0U) ? ULY : LY);                     %>40/* Set pointer to leap-year or un-leap-year day table */
  if (ptr[Month - 1U] < Day) {                                   %>40/* Does the obtained number of days exceed number of days in the appropriate month & year? */
    return ERR_RANGE;                                            %>40/* If yes (incorrect date inserted) then error */
  }
  EnterCritical();                                               %>40/* Save the PS register */
  CntDay = Day;                                                  %>40/* Set day counter to the given value */
  CntMonth = Month;                                              %>40/* Set month counter to the given value */
  CntYear = Year;                                                %>40/* Set year counter to the given value */
  ExitCritical();                                                %>40/* Restore the PS register */
  return ERR_OK;                                                 %>40/* OK */
}

%endif %- SetDate
%-BW_METHOD_END SetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDate
%ifdef GetDate
%define! ParDate
%define! RetVal
%include Common\GenericTimeDateGetDate.Inc
byte %'ModuleName'%.%GetDate(DATEREC *Date)
{
  EnterCritical();                                               %>40/* Save the PS register */
  Date->Year = CntYear;                                          %>40/* Year */
  Date->Month = CntMonth;                                        %>40/* Month */
  Date->Day = CntDay;                                            %>40/* Day */
  ExitCritical();                                                %>40/* Restore the PS register */
  return ERR_OK;                                                 %>40/* OK */
}

%endif %- GetDate
%-BW_METHOD_END GetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\GenericTimeDateInit.Inc
void %'ModuleName'%.%Init(void)
{
%if %InitializationEnabled='yes'
  /* initialize date/time as set in properties */
  (void)%'ModuleName'%.%SetTime(%InitialTimeHour, %InitialTimeMin, %InitialTimeSec, 0);
  (void)%'ModuleName'%.%SetDate(%InitialDateYear, %InitialDateMonth, %InitialDateDay);
%endif
}

%endif %- Init
%-BW_METHOD_END Init
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%if %InitInStartup='yes'
  %'ModuleName'%.%Init();
%endif
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
