%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Erich Styger
%define DriverVersion 01.00
%define DriverDate    10.07.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_EnablePulse Creates a pulse to transfer data and/or commands
%define! Description_WaitForLCDReady Waits until the display is ready
%define! Description_WriteLCDData Writes data to the display
%define! Description_WriteLCDCommand Writes a command to the display
%define! Description_Init Display driver initialization routine.
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\LCDHTASettings.Inc
%define! Abstract Common\LCDHTAAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"
%include sw\CommonSupport.prg

/* ID's for the soft characters which can be used as first argument for %'ModuleName'%.LoadSoftChar().
  Note that ID's can start with zero, but if you want to use a zero byte in %'ModuleName'%.WriteString()
  then this would be the zero delimiter byte, so not very useful. */
#define %'ModuleName'%.SOFTCHAR_UE 1 /*<! ID for 'ü' */
#define %'ModuleName'%.SOFTCHAR_AE 2 /*<! ID for 'ä' */
#define %'ModuleName'%.SOFTCHAR_OE 3 /*<! ID for 'ö' */

/* support for custom soft characters in the display which can be used with %'ModuleName'%.LoadSoftChar() */
extern const byte %'ModuleName'%.SoftCharUE[8]; /* ü */
extern const byte %'ModuleName'%.SoftCharAE[8]; /* ä */
extern const byte %'ModuleName'%.SoftCharOE[8]; /* ö */

#define %'ModuleName'%.MAX_LCD_LINE_CHARS  %CharsPerLine /* number of chars of the LCD on a line */

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-INTERNAL_METHOD_BEG WriteLCDData
void %'ModuleName'%.WriteLCDData(byte ch);
%define! Parch
%include Common\GeneralInternal.inc (WriteLCDData)

%-INTERNAL_METHOD_END WriteLCDData
%-INTERNAL_METHOD_BEG Init
void %'ModuleName'%.Init(void);
%include Common\GeneralInternal.inc (Init)

%-INTERNAL_METHOD_END Init
%-BW_METHOD_BEGIN Clear
%ifdef Clear
void %'ModuleName'%.%Clear(void);
%include Common\LCDHTAClear.Inc

%endif %- Clear
%-BW_METHOD_END Clear
%-BW_METHOD_BEGIN Home
%ifdef Home
void %'ModuleName'%.%Home(void);
%include Common\LCDHTAHome.Inc

%endif %- Home
%-BW_METHOD_END Home
%-BW_METHOD_BEGIN GotoXY
%ifdef GotoXY
void %'ModuleName'%.%GotoXY(byte line, byte column);
%define! Parcolumn
%define! Parline
%include Common\LCDHTAGotoXY.Inc

%endif %- GotoXY
%-BW_METHOD_END GotoXY
%-BW_METHOD_BEGIN ShiftLeft
%ifdef ShiftLeft
void %'ModuleName'%.%ShiftLeft(void);
%include Common\LCDHTAShiftLeft.Inc

%endif %- ShiftLeft
%-BW_METHOD_END ShiftLeft
%-BW_METHOD_BEGIN Write
%define INLINE_ME_WRITE
%ifdef Write
%- void %'ModuleName'%.%Write(char ch);
#define %'ModuleName'%.%Write(ch)   %'ModuleName'%.WriteLCDData((byte)ch)
%define! Parch
%include Common\LCDHTAWrite.Inc

%endif %- Write
%-BW_METHOD_END Write
%-BW_METHOD_BEGIN WriteLn
%ifdef WriteLn
void %'ModuleName'%.%WriteLn(void);
%include Common\LCDHTAWriteLn.Inc

%endif %- WriteLn
%-BW_METHOD_END WriteLn
%-BW_METHOD_BEGIN WriteString
%ifdef WriteString
void %'ModuleName'%.%WriteString(char *str);
%define! Parstr
%include Common\LCDHTAWriteString.Inc

%endif %- WriteString
%-BW_METHOD_END WriteString
%-BW_METHOD_BEGIN WriteLineStr
%ifdef WriteLineStr
void %'ModuleName'%.%WriteLineStr(byte line, char *str);
%define! Parline
%define! Parstr
%include Common\LCDHTAWriteLineStr.Inc

%endif %- WriteLineStr
%-BW_METHOD_END WriteLineStr
%-BW_METHOD_BEGIN LoadSoftChar
%ifdef LoadSoftChar
void %'ModuleName'%.%LoadSoftChar(byte charCode, byte *softChar);
%define! ParcharCode
%define! ParsoftChar
%include Common\LCDHTALoadSoftChar.Inc

%endif %- LoadSoftChar
%-BW_METHOD_END LoadSoftChar
%-BW_METHOD_BEGIN Line
%ifdef Line
void %'ModuleName'%.%Line(byte line);
%define! Parline
%include Common\LCDHTALine.Inc

%endif %- Line
%-BW_METHOD_END Line
%-BW_METHOD_BEGIN ShiftRight
%ifdef ShiftRight
void %'ModuleName'%.%ShiftRight(void);
%include Common\LCDHTAShiftRight.Inc

%endif %- ShiftRight
%-BW_METHOD_END ShiftRight
%-BW_METHOD_BEGIN CursorOn
%ifdef CursorOn
void %'ModuleName'%.%CursorOn(void);
%include Common\LCDHTACursorOn.Inc

%endif %- CursorOn
%-BW_METHOD_END CursorOn
%-BW_METHOD_BEGIN CursorOff
%ifdef CursorOff
void %'ModuleName'%.%CursorOff(void);
%include Common\LCDHTACursorOff.Inc

%endif %- CursorOff
%-BW_METHOD_END CursorOff
%-BW_METHOD_BEGIN DisplayOn
%ifdef DisplayOn
void %'ModuleName'%.%DisplayOn(void);
%include Common\LCDHTADisplayOn.Inc

%endif %- DisplayOn
%-BW_METHOD_END DisplayOn
%-BW_METHOD_BEGIN DisplayOff
%ifdef DisplayOff
void %'ModuleName'%.%DisplayOff(void);
%include Common\LCDHTADisplayOff.Inc

%endif %- DisplayOff
%-BW_METHOD_END DisplayOff
%-BW_METHOD_BEGIN BlinkingOn
%ifdef BlinkingOn
void %'ModuleName'%.%BlinkingOn(void);
%include Common\LCDHTABlinkingOn.Inc

%endif %- BlinkingOn
%-BW_METHOD_END BlinkingOn
%-BW_METHOD_BEGIN BlinkingOff
%ifdef BlinkingOff
void %'ModuleName'%.%BlinkingOff(void);
%include Common\LCDHTABlinkingOff.Inc

%endif %- BlinkingOff
%-BW_METHOD_END BlinkingOff
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetEntryMode
%ifdef SetEntryMode
void %'ModuleName'%.%SetEntryMode(bool increment, bool shiftLeft);
%define! Parincrement
%define! ParshiftLeft
%include Common\LCDHTASetEntryMode.Inc

%endif %- SetEntryMode
%-BW_METHOD_END SetEntryMode
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\LCDHTASettings.Inc
%define! Abstract Common\LCDHTAAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-

/* DEFINES for display commands.
   See
   - www.freescale.com/files/microcontrollers/doc/app_note/AN1745.pdf
   - http://www.mikrocontroller.net/articles/HD44780
   for additional details.
*/
#define ClearDisplayCmd                 0x01 /* clears the display */

#define ReturnHomeCmd                   0x02 /* moves the cursor to the beginning of the first line */

#define EntryModeSetCmd                 0x04
  #define EntryModeSet_ShiftOn             1 /* S flag: shift display */
  #define EntryModeSet_IncrementOn         2 /* I/D flag: increment cursor */

#define DisplayOnOffControlCmd          0x08 /* Display on/off control command. There are 3 bits D, C and B as well */
  #define DisplayOnOffControl_BlinkOn      1 /* B flag: blinking cursor on/off; B=1 blinking, B=0 not blinking */
  #define DisplayOnOffControl_CursorOn     2 /* C flag: cursor on/off, C=1 cursor on, C=0 cursor off */
  #define DisplayOnOffControl_DisplayOn    4 /* D flag: display on/off, D=1 display on, D=0 display off */

#define FunctionSetCmd                  0x20
  #define FunctionSet_8bit              0x10 /* DL flag: DL=1: 8bit, DL=0: 4bit */
  #define FunctionSet_4bit                 0 /* DL flag: DL=1: 8bit, DL=0: 4bit */
  #define FunctionSet_2Lines            0x08 /* N flag: number of display lines: N=1 2 or 4 lines, N=0 1 line */
  #define FunctionSet_1Line                0 /* N flag: number of display lines: N=1 2 or 4 lines, N=0 1 line */
  #define FunctionSet_Font5x10          0x04 /* F flag: character font, F=1 5x10 dots, F=0 5x8 dots */
  #define FunctionSet_Font5x8              0 /* F flag: character font, F=1 5x10 dots, F=0 5x8 dots */

#define CursorOnCmd    (DisplayOnOffControlCmd|DisplayOnOffControl_DisplayOn|DisplayOnOffControl_CursorOn)
#define CursorOffCmd   (DisplayOnOffControlCmd|DisplayOnOffControl_DisplayOn)
#define GotoXYCmd      0x80  /* 0x80 | Display RAM address */
#define Line1Offset    0x00  /* Display RAM address of first line */
#define Line2Offset    0x40  /* Display RAM address of second line */
#define Line3Offset    0x10  /* Display RAM address of third line */
#define Line4Offset    0x50  /* Display RAM address of fourth line */
#define FirstLineCmd   (GotoXYCmd|Line1Offset)
#define SecondLineCmd  (GotoXYCmd|Line2Offset)
#define ThirdLineCmd   (GotoXYCmd|Line3Offset)
#define FourthLineCmd  (GotoXYCmd|Line4Offset)

#define RightShiftCmd   0x1C
#define LeftShiftCmd    0x18

%if defined(CursorOn) | defined(CursorOff) | defined(BlinkingOn) | defined(BlinkingOff) | defined(DisplayOn) | defined(CursorOff)
  %define NeedDisplayStatusVariable

%endif
%ifdef NeedDisplayStatusVariable
static byte DisplayOnOffControlStatus;

%endif
#define BusyFlag       0x80 /* BF Flag */

/* support for custom soft characters in the display which can be used with %'ModuleName'%.LoadSoftChar() */
const byte %'ModuleName'%.SoftCharUE[8] = { /* ü */
  0x11, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d, 0
/* X...X
   .....
   X...X
   X...X
   X...X
   X..XX
   .XX.X */
};

const byte %'ModuleName'%.SoftCharAE[8] = { /* ä */
  0x11, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0
/* X...X
   .....
   .XXX.
   ....X
   .XXXX
   X...X
   .XXXX */
};

const byte %'ModuleName'%.SoftCharOE[8] = { /* ö */
  0x11, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0
/* X...X
   .....
   .XXX.
   X...X
   X...X
   X...X
   .XXX. */
};

%if defined(RW)
/* macros for the RW pin */
#define ClrRW() \
        %@RW@'ModuleName'%.ClrVal()                              %>40 /* RW=0: write mode */
#define SetRW() \
        %@RW@'ModuleName'%.SetVal()                              %>40 /* RW=1: read mode */

%endif
/* macros for the RS pin */
#define ClrRS() \
        %@RS@'ModuleName'%.ClrVal()                              %>40 /* RS=0: command mode */
#define SetRS() \
        %@RS@'ModuleName'%.SetVal()                              %>40 /* RS=1: data mode */

/* macros for the EN pin */
#define ClrEN() \
        %@EN@'ModuleName'%.ClrVal()                              %>40 /* EN=0 */
#define SetEN() \
        %@EN@'ModuleName'%.SetVal()                              %>40 /* EN=1 */

/* macros for the data bus */
#define DataAsOutput() \
%if defined(DataBus)
        %@DataBus@'ModuleName'%.SetOutput()                      %>40 /* set data port as output */
%else
  %if %DataBusWidth='8bit'
        %@DB0@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */ \
        %@DB1@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */ \
        %@DB2@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */ \
        %@DB3@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */ \
  %endif
        %@DB4@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */ \
        %@DB5@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */ \
        %@DB6@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */ \
        %@DB7@'ModuleName'%.SetOutput()                          %>40 /* set data port as output */
%endif
#define DataAsInput() \
%if defined(DataBus)
        %@DataBus@'ModuleName'%.SetInput()                       %>40 /* set data port as input */
%else
  %if %DataBusWidth='8bit'
        %@DB0@'ModuleName'%.SetInput();                          %>40 /* set data port as input */ \
        %@DB1@'ModuleName'%.SetInput();                          %>40 /* set data port as input */ \
        %@DB2@'ModuleName'%.SetInput();                          %>40 /* set data port as input */ \
        %@DB3@'ModuleName'%.SetInput();                          %>40 /* set data port as input */ \
  %endif
        %@DB4@'ModuleName'%.SetInput();                          %>40 /* set data port as input */ \
        %@DB5@'ModuleName'%.SetInput();                          %>40 /* set data port as input */ \
        %@DB6@'ModuleName'%.SetInput();                          %>40 /* set data port as input */ \
        %@DB7@'ModuleName'%.SetInput()                           %>40 /* set data port as input */
%endif
%if defined(DataBus)
#define DataGet() \
        %@DataBus@'ModuleName'%.GetVal()                         %>40 /* read data */
%endif
%if defined(DataBus)
#define DataPut(x) \
        %@DataBus@'ModuleName'%.PutVal(x)                        %>40 /* write data */
%endif

/* waiting macros */
#define Waitns(x) \
        %@Wait@'ModuleName'%.Waitns(x)                           %>40 /* Wait x ns */
#define Waitus(x) \
        %@Wait@'ModuleName'%.Waitus(x)                           %>40 /* Wait x us */
#define Waitms(x) \
        %@Wait@'ModuleName'%.Waitms(x)                           %>40 /* Wait x ms */

/* timings from Hitachi HD44708.pdf */
#define Timing_PWeh_ns   230 /* PWeh: Enable Pulse width (high level) */
#define Timing_tAS_ns     40 /* tAB: Address set-up time (RS, RW to E ) */
#define Timing_tDDR_ns   160 /* tDDR: Data delay time */
#define Timing_tCYCLE_ns 500 /* tCYLE: Enable Cycle time */

%if ndefined(DataBus)
static uint8_t DataGet(void) {
  uint8_t val;

%if %DataBusWidth='4bit'
  val =  (%@DB7@'ModuleName'%.GetVal()<<3)
        |(%@DB6@'ModuleName'%.GetVal()<<2)
        |(%@DB5@'ModuleName'%.GetVal()<<1)
        |(%@DB4@'ModuleName'%.GetVal()<<0);
%else /* 8bit */
  val =  (%@DB7@'ModuleName'%.GetVal()<<7)
        |(%@DB6@'ModuleName'%.GetVal()<<6)
        |(%@DB5@'ModuleName'%.GetVal()<<5)
        |(%@DB4@'ModuleName'%.GetVal()<<4)
        |(%@DB3@'ModuleName'%.GetVal()<<3)
        |(%@DB2@'ModuleName'%.GetVal()<<2)
        |(%@DB1@'ModuleName'%.GetVal()<<1)
        |(%@DB0@'ModuleName'%.GetVal()<<0);
%endif
  return val;
}

static void DataPut(uint8_t val) {
%if %DataBusWidth='4bit'
  %@DB7@'ModuleName'%.PutVal((val&(1<<3))!=0);
  %@DB6@'ModuleName'%.PutVal((val&(1<<2))!=0);
  %@DB5@'ModuleName'%.PutVal((val&(1<<1))!=0);
  %@DB4@'ModuleName'%.PutVal((val&(1<<0))!=0);
%else /* 8bit */
  %@DB7@'ModuleName'%.PutVal((val&(1<<7))!=0);
  %@DB6@'ModuleName'%.PutVal((val&(1<<6))!=0);
  %@DB5@'ModuleName'%.PutVal((val&(1<<5))!=0);
  %@DB4@'ModuleName'%.PutVal((val&(1<<4))!=0);
  %@DB3@'ModuleName'%.PutVal((val&(1<<3))!=0);
  %@DB2@'ModuleName'%.PutVal((val&(1<<2))!=0);
  %@DB1@'ModuleName'%.PutVal((val&(1<<1))!=0);
  %@DB0@'ModuleName'%.PutVal((val&(1<<0))!=0);
%endif
}

%endif
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG EnablePulse
static void EnablePulse(void);
%-INTERNAL_LOC_METHOD_END EnablePulse
%-INTERNAL_LOC_METHOD_BEG WaitForLCDReady
%if %ReadFromDisplay='yes' & %CheckBusyFlag = "yes"
static void WaitForLCDReady(void);
%endif
%-INTERNAL_LOC_METHOD_END WaitForLCDReady
%-INTERNAL_LOC_METHOD_BEG WriteLCDCommand
static void WriteLCDCommand(byte cmd);
%-INTERNAL_LOC_METHOD_END WriteLCDCommand
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-INTERNAL_METHOD_BEG EnablePulse
%include Common\GeneralInternalGlobal.inc (EnablePulse)
static void EnablePulse(void)
{
  SetEN();                                                       %>40 /* set EN to 1 to create pulse */
%if %LCDType = "1" %- Diplaytech 162c: not clear why this is not according to the 500ns spec?
  Waitms(2);
%else
  Waitns(Timing_PWeh_ns);
%endif
  ClrEN();                                                       %>40 /* set to 0 to finish pulse */
}

%-INTERNAL_METHOD_END EnablePulse
%-INTERNAL_METHOD_BEG WaitForLCDReady
%if %ReadFromDisplay='yes' & %CheckBusyFlag = "yes"
%include Common\GeneralInternalGlobal.inc (WaitForLCDReady)
static void WaitForLCDReady(void)
{
  byte ch;

  /* Wait until the display is ready for new data.
     This means that we wait until the busy flag (MSB) in the status register is cleared */
  DataAsInput();                                                 %>40 /* set data port as input */
  SetRW();                                                       %>40 /* RW = 1: read mode */
  Waitns(Timing_tAS_ns);
  for(;;) {                                                      %>40 /* loop breaks as soon the busy flag is cleared */
    SetEN();                                                     %>40 /* EN = 1; EN to high for getting the busy flag  */
    Waitns(Timing_tDDR_ns);                                      %>40 /* Read mode timing tDDR: time until we can read data */
  %if %DataBusWidth='4bit'
    /* for 4bit data bus: need to do read twice */
    ch = (byte)(DataGet()<<4);                                   %>40 /* read high byte */
    Waitns(Timing_PWeh_ns-Timing_tDDR_ns);                       %>40 /* for accurate lenght of EN pulse */
    ClrEN();
    Waitns(Timing_tCYCLE_ns-Timing_PWeh_ns);                     %>40 /* need to wait a cycle time until we can enable EN again */
    SetEN();
    Waitns(Timing_tDDR_ns);                                      %>40 /* Read mode timing tDDR: time until we can read data */
    ch |= DataGet();                                             %>40 /* read low byte */
  %else
    ch = DataGet();                                              %>40 /* read status */
  %endif
    Waitns(Timing_PWeh_ns-Timing_tDDR_ns);                       %>40 /* for accurate length of EN pulse */
    ClrEN();                                                     %>40 /* EN = 0 */
    if (!(ch&BusyFlag)) {
      break;
    }
    Waitns(Timing_tCYCLE_ns-Timing_PWeh_ns);                     %>40 /* need to wait a cycle time until we can enable EN again */
  } /* for */
%if defined(RW)
  ClrRW();                                                       %>40 /* RW = 0: back to write mode */
%endif
  DataAsOutput();                                                %>40 /* set data port as output */
}
%endif /* %CheckBusyFlag = "yes" */
%-INTERNAL_METHOD_END WaitForLCDReady

%-INTERNAL_METHOD_BEG WriteLCDCommand
%define! Parcmd
%include Common\GeneralInternalGlobal.inc (WriteLCDCommand)
static void WriteLCDCommand(byte cmd)
{
%if %WaitDisplayUs >. '0'
  %@Wait@'ModuleName'%.Waitus(%WaitDisplayUs);                   %>40 /* wait for some time not to write to the display while he may be busy with previous command */
%endif
%if %ReadFromDisplay='yes' & %CheckBusyFlag = "yes"
  WaitForLCDReady();                                             %>40 /* Wait until LCD is ready */
%endif
%if %DataBusWidth='4bit'
  /* 2 4bit transfer */
  DataPut((byte)((cmd&0xF0)>>4));                                %>40 /* Write the data (cycle #1) */
  EnablePulse();                                                 %>40 /* transfer data */
  Waitus(15);
  DataPut((byte)(cmd&0x0F) );                                    %>40 /* Write the data (cycle #2) */
  EnablePulse();                                                 %>40 /* do the command transfer */
  Waitus(60);
%else
  /* 8bit transfer */
  DataPut(cmd);                                                  %>40 /* put data on bus */
  EnablePulse();                                                 %>40 /* do the command transfer */
%endif
}

%-INTERNAL_METHOD_END WriteLCDCommand
%-BW_METHOD_BEGIN Clear
%ifdef Clear
%include Common\LCDHTAClear.Inc
void %'ModuleName'%.%Clear(void)
{
  WriteLCDCommand(ClearDisplayCmd);                              %>40 /* send the clear command to the LCD */
}

%endif %- Clear
%-BW_METHOD_END Clear
%-BW_METHOD_BEGIN Home
%ifdef Home
%include Common\LCDHTAHome.Inc
void %'ModuleName'%.%Home(void)
{
  WriteLCDCommand(ReturnHomeCmd);                                %>40 /* moves the cursor to the beginning of the first line */
}

%endif %- Home
%-BW_METHOD_END Home
%-INTERNAL_METHOD_BEG WriteLCDData
%define! Parch
%include Common\GeneralInternal.inc (WriteLCDData)
void %'ModuleName'%.WriteLCDData(byte ch)
{
%if %WaitDisplayUs >. '0'
   %@Wait@'ModuleName'%.Waitus(%WaitDisplayUs);                  %>40 /* wait for some time not to write to the display while he may be busy with previous command */
%endif
%if %ReadFromDisplay='yes' & %CheckBusyFlag = "yes"
   WaitForLCDReady();                                            %>40 /* Wait until LCD is ready */
%endif
   SetRS();                                                      %>40 /* RS = 1: data mode */
%if %DataBusWidth='4bit'
   /* 2 4bit transfer */
   DataPut((byte)((ch&0xF0)>>4));                                %>40 /* Write the data (cycle #1) */
   EnablePulse();                                                %>40 /* transfer data */
   Waitus(15);
   DataPut((byte)(ch&0x0F));                                     %>40 /* Write the data (cycle #2) */
   EnablePulse();                                                %>40 /* do the command transfer */
   Waitus(60);
%else
   /* 8bit data transfer */
   DataPut(ch);                                                  %>40 /* put data on bus */
   EnablePulse();                                                %>40 /* do the command transfer */
%endif
   ClrRS();                                                      %>40 /* RS = 0: back to command mode */
}

%-INTERNAL_METHOD_END WriteLCDData
%-BW_METHOD_BEGIN GotoXY
%ifdef GotoXY
%define! Parcolumn
%define! Parline
%include Common\LCDHTAGotoXY.Inc
void %'ModuleName'%.%GotoXY(byte line, byte column)
{
/* row is in the range 1..LCD_Nof_Lines and column in the range 1..LCD_Nof_Columns */
%if %LCD_Nof_Lines = "1"
  /* only one line in LCD: ignore line argument */
  (void)line;                                                    %>40 /* to avoid compiler warning about unused variable */
  WriteLCDCommand((byte)(GotoXYCmd + (column-1)));
%elif %LCD_Nof_Lines = "2"
  WriteLCDCommand((byte)(GotoXYCmd + (column-1) + (line==1 ? 0x00:Line2Offset)));
%elif %LCD_Nof_Lines = "3"
  byte offset;

  if (line==1) {
    offset = 0x00;
  } else if (line==2) {
    offset = Line2Offset;
  } else { /* line 3 */
    offset = Line3Offset;
  }
  WriteLCDCommand((byte)(GotoXYCmd + (column-1) + offset));
%elif %LCD_Nof_Lines = "4"
  byte offset;

  if (line==1) {
    offset = 0x00;
  } else if (line==2) {
    offset = Line2Offset;
  } else if (line==3) {
    offset = Line3Offset;
  } else { /* line 4 */
    offset = Line4Offset;
  }
  WriteLCDCommand((byte)(GotoXYCmd + (column-1) + offset));
%else
  %error "only up to 4 LCD lines are supported!"
%endif
}

%endif %- GotoXY
%-BW_METHOD_END GotoXY
%-BW_METHOD_BEGIN ShiftLeft
%ifdef ShiftLeft
%include Common\LCDHTAShiftLeft.Inc
void %'ModuleName'%.%ShiftLeft(void)
{
  WriteLCDCommand(LeftShiftCmd);
}

%endif %- ShiftLeft
%-BW_METHOD_END ShiftLeft
%-BW_METHOD_BEGIN Write
%ifdef Write
%define! Parch
%include Common\LCDHTAWrite.Inc
/* The method is implemented as a macro, see %'ModuleName'.h */
%endif %- Write
%-BW_METHOD_END Write
%-BW_METHOD_BEGIN WriteLn
%ifdef WriteLn
%include Common\LCDHTAWriteLn.Inc
void %'ModuleName'%.%WriteLn(void)
{
%if %LCD_Nof_Lines = "1"
  /* only one line in LCD: move to beginning of first line */
  WriteLCDCommand(FirstLineCmd);
%elif %LCD_Nof_Lines = "2"
  WriteLCDCommand(SecondLineCmd);
%else
  /* more than 2 lines, cannot use WriteLn() */
%endif
}

%endif %- WriteLn
%-BW_METHOD_END WriteLn
%-BW_METHOD_BEGIN WriteString
%ifdef WriteString
%define! Parstr
%include Common\LCDHTAWriteString.Inc
void %'ModuleName'%.%WriteString(char *str)
{
  while (*str != '\0'){
    %'ModuleName'%.Write(*str);
    str++;
  }
}

%endif %- WriteString
%-BW_METHOD_END WriteString
%-BW_METHOD_BEGIN WriteLineStr
%ifdef WriteLineStr
%define! Parline
%define! Parstr
%include Common\LCDHTAWriteLineStr.Inc
void %'ModuleName'%.%WriteLineStr(byte line, char *str)
{
  byte i;

  %'ModuleName'%.%Line(line);                                    %>40 /* select line */
  for(i = 0; i < %'ModuleName'%.MAX_LCD_LINE_CHARS && *str!='\0'; i++, str++) {
    %'ModuleName'%.Write(*str);
  }
  /* Clear the rest of the line */
  for (; i < %'ModuleName'%.MAX_LCD_LINE_CHARS; i++) {
    %'ModuleName'%.Write(' ');
  }
}

%endif %- WriteLineStr
%-BW_METHOD_END WriteLineStr
%-BW_METHOD_BEGIN Line
%ifdef Line
%define! Parline
%include Common\LCDHTALine.Inc
void %'ModuleName'%.%Line(byte line)
{
%if %LCD_Nof_Lines = "1"
  /* we only have one line, so moving to the first line */
  (void)line;                                                    %>40 /* to avoid compiler warning about unused variable */
  WriteLCDCommand(FirstLineCmd);
%elif %LCD_Nof_Lines = "2"
  WriteLCDCommand((byte)(line==1?FirstLineCmd:SecondLineCmd));
%elif %LCD_Nof_Lines = "3"
  if (line==1) {
    WriteLCDCommand((byte)(FirstLineCmd));
  } else if (line==2) {
    WriteLCDCommand((byte)(SecondLineCmd));
  } else { /* line == 3 */
    WriteLCDCommand((byte)(ThirdLineCmd));
  }
%elif %LCD_Nof_Lines = "4"
  if (line==1) {
    WriteLCDCommand((byte)(FirstLineCmd));
  } else if (line==2) {
    WriteLCDCommand((byte)(SecondLineCmd));
  } else if (line==3) {
    WriteLCDCommand((byte)(ThirdLineCmd));
  } else { /* line == 4 */
    WriteLCDCommand((byte)(FourthLineCmd));
  }
%else
  %error "only up to 4 LCD lines are supported!"
%endif
}

%endif %- Line
%-BW_METHOD_END Line
%-INTERNAL_METHOD_BEG Init
%include Common\GeneralInternal.inc (Init)
void %'ModuleName'%.Init(void)
{
  /* This function initializes the driver.
     The low level init already shall have set our data port to input/output, currently set to output,
     plus all control pins are set as outputs with low values. To be sure, we do it here again. */
  ClrEN();                                                       %>40 /* EN Pin low */
%if defined(RW)
  ClrRW();                                                       %>40 /* RW Pin low */
%endif
  ClrRS();                                                       %>40 /* RS Pin low: command mode */
  DataPut(0);

  /* make pins output */
  DataAsOutput();

  /* send the reset sequence according to the data sheet */
  Waitms(80);                                                    %>40 /* wait for more than 15ms after Vcc rises to 4.5V, wait for more than 40ms after Vcc rises to 2.7V. In case of POR (Power On Reset) we need some additional time. */
%if %DataBusWidth='4bit'
  DataPut(0x3);                                                  %>40 /* BF cannot be checked before this function, function set (interface is 8bits long) */
  EnablePulse();                                                 %>40 /* transfer data */
  Waitms(5);                                                     %>40 /* wait for more than 4.1 ms */
  /* 0x3 is already on the bus from previous DataPut(), do not need to put it again here */
  EnablePulse();                                                 %>40 /* transfer data */
  Waitus(100);                                                   %>40 /* wait for more than 100us */
  /* 0x3 is already on the bus from previous DataPut(), do not need to put it again here */
  EnablePulse();                                                 %>40 /* transfer data */
  Waitus(100);                                                   %>40 /* wait for more than 100us */

  DataPut(0x2);                                                  %>40 /* Function set */
  EnablePulse();                                                 %>40 /* transfer data */
  Waitus(100);
%else
  DataPut(FunctionSetCmd|FunctionSet_8bit);                      %>40 /* Function set (interface is 8bit) */
  EnablePulse();                                                 %>40 /* transfer data */
  Waitms(5);                                                     %>40 /* wait at least 4.1ms */
  /* transmit again the same data (which is already on the bus */
  EnablePulse();                                                 %>40 /* send pulse */
  Waitus(100);                                                   %>40 /* wait at least 100us */
  /* transmit again the same data (which is already on the bus */
  EnablePulse();                                                 %>40 /* send pulse */
  Waitus(100);
%endif

  WriteLCDCommand(FunctionSetCmd|FunctionSet_Font5x8
%if %DataBusWidth='4bit'
                 |FunctionSet_4bit                               %>40 /* we are using 4bit data bus */ \
%else
                 |FunctionSet_8bit                               %>40 /* we are using 8bit data bus */ \
%endif
%if %LCD_Nof_Lines = "1"
                 |FunctionSet_1Lines                             %>40 /* we are using only one line */
%else
                 |FunctionSet_2Lines                             %>40 /* we are using two or more lines */
%endif
                 );
%ifdef NeedDisplayStatusVariable
  DisplayOnOffControlStatus = DisplayOnOffControlCmd|DisplayOnOffControl_DisplayOn;%>40 /* Display on, cursor on, do not blink */
  WriteLCDCommand(DisplayOnOffControlStatus);
%else
  WriteLCDCommand(DisplayOnOffControlCmd|DisplayOnOffControl_DisplayOn);
%endif
  WriteLCDCommand(ClearDisplayCmd); /* Clear display */
  WriteLCDCommand(EntryModeSetCmd|EntryModeSet_IncrementOn);     %>40 /* Entry mode set: Increment mode, display shift off */
}

%-INTERNAL_METHOD_END Init
%-BW_METHOD_BEGIN LoadSoftChar
%ifdef LoadSoftChar
%define! ParcharCode
%define! ParsoftChar
%include Common\LCDHTALoadSoftChar.Inc
void %'ModuleName'%.%LoadSoftChar(byte charCode, byte *softChar)
{
  /* Loads a user defined character (soft character, 5x8 dots) into the CG-RAM
     in the display. The character can be used afterwards like a normal character code */
  #define CGAddress 0x40                                         %>40 /* Base address for softchars */
  #define DDAddress 0x80                                         %>40 /* To finish the download mode */
  byte i;

  WriteLCDCommand((byte)(CGAddress + (charCode * 0x08)));        %>40 /* Set CG Ram: Character code * 0x08 [size] */
  for (i=0; i<=7; i++){
    %'ModuleName'%.Write(softChar[i]);
  }
  WriteLCDCommand(DDAddress);                                    %>40 /* finish the download */
}

%endif %- LoadSoftChar
%-BW_METHOD_END LoadSoftChar
%-BW_METHOD_BEGIN ShiftRight
%ifdef ShiftRight
%include Common\LCDHTAShiftRight.Inc
void %'ModuleName'%.%ShiftRight(void)
{
  WriteLCDCommand(RightShiftCmd);
}

%endif %- ShiftRight
%-BW_METHOD_END ShiftRight
%-BW_METHOD_BEGIN CursorOn
%ifdef CursorOn
%include Common\LCDHTACursorOn.Inc
void %'ModuleName'%.%CursorOn(void)
{
  DisplayOnOffControlStatus |= DisplayOnOffControl_CursorOn;
  WriteLCDCommand(DisplayOnOffControlStatus);
}

%endif %- CursorOn
%-BW_METHOD_END CursorOn
%-BW_METHOD_BEGIN CursorOff
%ifdef CursorOff
%include Common\LCDHTACursorOff.Inc
void %'ModuleName'%.%CursorOff(void)
{
  DisplayOnOffControlStatus &= ~DisplayOnOffControl_CursorOn;
  WriteLCDCommand(DisplayOnOffControlStatus);
}

%endif %- CursorOff
%-BW_METHOD_END CursorOff
%-BW_METHOD_BEGIN DisplayOn
%ifdef DisplayOn
%include Common\LCDHTADisplayOn.Inc
void %'ModuleName'%.%DisplayOn(void)
{
  DisplayOnOffControlStatus |= DisplayOnOffControl_DisplayOn;
  WriteLCDCommand(DisplayOnOffControlStatus);
}

%endif %- DisplayOn
%-BW_METHOD_END DisplayOn
%-BW_METHOD_BEGIN DisplayOff
%ifdef DisplayOff
%include Common\LCDHTADisplayOff.Inc
void %'ModuleName'%.%DisplayOff(void)
{
  DisplayOnOffControlStatus &= ~DisplayOnOffControl_DisplayOn;
  WriteLCDCommand(DisplayOnOffControlStatus);
}

%endif %- DisplayOff
%-BW_METHOD_END DisplayOff
%-BW_METHOD_BEGIN BlinkingOn
%ifdef BlinkingOn
%include Common\LCDHTABlinkingOn.Inc
void %'ModuleName'%.%BlinkingOn(void)
{
  DisplayOnOffControlStatus |= DisplayOnOffControl_BlinkOn;
  WriteLCDCommand(DisplayOnOffControlStatus);
}

%endif %- BlinkingOn
%-BW_METHOD_END BlinkingOn
%-BW_METHOD_BEGIN BlinkingOff
%ifdef BlinkingOff
%include Common\LCDHTABlinkingOff.Inc
void %'ModuleName'%.%BlinkingOff(void)
{
  DisplayOnOffControlStatus &= ~DisplayOnOffControl_BlinkOn;
  WriteLCDCommand(DisplayOnOffControlStatus);
}

%endif %- BlinkingOff
%-BW_METHOD_END BlinkingOff
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetEntryMode
%ifdef SetEntryMode
%define! Parincrement
%define! ParshiftLeft
%include Common\LCDHTASetEntryMode.Inc
void %'ModuleName'%.%SetEntryMode(bool increment, bool shiftLeft)
{
  byte flags = 0;

  if (increment) {
    flags |= EntryModeSet_IncrementOn;
  }
  if (shiftLeft) {
    flags |= EntryModeSet_ShiftOn;
  }
  WriteLCDCommand((byte)(EntryModeSetCmd|flags));                %>40 /* Entry mode set: Increment mode, display shift mode */
}

%endif %- SetEntryMode
%-BW_METHOD_END SetEntryMode
%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.Init(); /* initializes the display driver */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
