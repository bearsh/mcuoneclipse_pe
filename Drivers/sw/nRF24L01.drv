%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    15.07.2013
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_SpiWriteRead Write a byte to the SPI and reads the shifted value
%ifdef IRQ
  %ifdef @IRQ@OnInterrupt
    %define! Description_%@IRQ@OnInterrupt This event is called when an active signal edge/level has occurred. The event services the event of the inherited component and eventually invokes other events.
  %endif %- @IRQ@OnInterrupt
%endif %- IRQ
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\nRF24L01Settings.Inc
%define! Abstract Common\nRF24L01Abstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\nRF24L01Init.Inc

%endif %- Init
%-BW_METHOD_END Init
%-INHERITED_EVENT_BEGIN IRQ OnInterrupt
%ifdef @IRQ@OnInterrupt
void %@IRQ@OnInterrupt(void);

%endif %- @IRQ@OnInterrupt
%-INHERITED_EVENT_END IRQ OnInterrupt
%-************************************************************************************************************
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\nRF24L01Settings.Inc
%define! Abstract Common\nRF24L01Abstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
/* Macros to hide low level functionality */
#define %'ModuleName'%.WAIT_US(x)  %@Wait@'ModuleName'%.Waitus(x)%>50/* wait for the given number of micro-seconds */
#define %'ModuleName'%.WAIT_MS(x)  %@Wait@'ModuleName'%.Waitms(x)%>50/* wait for the given number of milli-seconds */
#define %'ModuleName'%.CE_LOW()    %@CE@'ModuleName'%.ClrVal()   %>50/* put CE LOW */
#define %'ModuleName'%.CE_HIGH()   %@CE@'ModuleName'%.SetVal()   %>50/* put CE HIGH */
#define %'ModuleName'%.CSN_LOW()   %@CSN@'ModuleName'%.ClrVal()  %>50/* put CSN LOW */
#define %'ModuleName'%.CSN_HIGH()  %@CSN@'ModuleName'%.SetVal()  %>50/* put CSN HIGH */
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG SpiWriteRead
static byte SpiWriteRead(byte val);
%-INTERNAL_LOC_METHOD_END SpiWriteRead
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\nRF24L01Init.Inc
void %'ModuleName'%.%Init(void)
{
  %'ModuleName'%.CE_LOW();   /* CE high: do not send or receive data */
  %'ModuleName'%.CSN_HIGH(); /* CSN low: not sending commands to the device */
}

%endif %- Init
%-BW_METHOD_END Init
%-INHERITED_EVENT_BEGIN IRQ OnInterrupt
%ifdef @IRQ@OnInterrupt
%include Common\GeneralInternal.inc (OnInterrupt)
void %@IRQ@OnInterrupt(void)
{
  /* Write your code here ... */
}

%endif %- @IRQ@OnInterrupt
%-INHERITED_EVENT_END IRQ OnInterrupt
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG SpiWriteRead
%define! Parval
%define! RetVal
%include Common\GeneralInternalGlobal.inc (SpiWriteRead)
static byte SpiWriteRead(byte val)
{
  uint8_t ch;

  while (%@SPI@'ModuleName'%.GetCharsInTxBuf()!=0) {} /* wait until tx is empty */
  while (%@SPI@'ModuleName'%.SendChar(val)!=ERR_OK) {} /* send character */
  while (%@SPI@'ModuleName'%.GetCharsInTxBuf()!=0) {} /* wait until data has been sent */
  while (%@SPI@'ModuleName'%.GetCharsInRxBuf()==0) {} /* wait until we receive data */
  while (%@SPI@'ModuleName'%.RecvChar(&ch)!=ERR_OK) {} /* get data */
  return ch;
}

%-INTERNAL_METHOD_END SpiWriteRead
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Write code here ... */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
#if 0
  RF_WriteRegister(RF24_EN_AA, 0x01); /* enable auto acknowledge. RX_ADDR_P0 needs to be equal to TX_ADDR! */
  RF_WriteRegister(RF24_EN_RXADDR, 0x01); /* enable data pipe 0 */
  RF_WriteRegister(RF24_SETUP_AW, 0x03); /* RF_Adddress with, 0x3 means 5 bytes RF Address */
  RF_WriteRegisterData(RF24_TX_ADDR, buf, sizeof(buf)); /* write RF address */
#if IS_SENDER
  /* mask retry interrupt, enable CRC, 2-byte CRC, power up, Tx (bit cleared) */
  RF_WriteRegister(RF24_CONFIG, RF24_MASK_MAX_RT|RF24_EN_CRC|RF24_CRCO|RF24_PWR_UP|RF24_PRIM_TX); /* 0b0001 1110: b0=0: transmitter, b1=1 power up, b4=1 mask MAX RT, IRQ is not triggered */
#else
  /* mask retry interrupt, enable CRC, 2-byte CRC, power up, Rx (bit set) */
  RF_WriteRegister(RF24_CONFIG, RF24_MASK_MAX_RT|RF24_EN_CRC|RF24_CRCO|RF24_PWR_UP|RF24_PRIM_RX);
#endif
  RF_WriteRegister(RF24_SETUP_RETR, 0x2F); /* 750 us delay between every retry */
#endif


#if 0
//sets the RX address in the RX_ADDR register that is offset by rxpipenum
//unsigned char * address is the actual address to be used.  It should be sized
//  according to the rx_addr length that is being filled.
//unsigned int len is the length of the address.  Its value should be specified
//  according to the rx_addr length specified to the nrf24l01.
//unsigned char rxpipenum is the pipe number (zero to five) whose address is being
//  specified.  If an invalid address (greater than five) is supplied, the function
//  does nothing.
void wl_module_set_rx_addr(uint8_t * address, uint8_t len, uint8_t rxpipenum)
{
  if (rxpipenum > 5) {
    return;
  }
  RF_WriteRegisterData(RF24_RX_ADDR_P0 + rxpipenum, address, len);
}

static void wl_module_rx_config(void)
// Sets the important registers in the wl-module and powers the module
// in receiving mode
{
  uint8_t data[5];
    // Set RF channel
  RF_WriteRegister(RF24_RF_CH, CHANNEL_NO);
  // Set data speed & Output Power configured in wl_module.h
  RF_WriteRegister(RF24_RF_SETUP, wl_module_RF_SETUP);
  //Enable all RX Data-Pipes
  RF_WriteRegister(RF24_EN_RXADDR, RF24_EN_RXADDR_ERX_ALL);
  //Set RX_Address Pipe 0
  data[0]= data[1]= data[2]= data[3]= data[4]= RF24_RX_ADDR_P0_B0_DEFAULT_VAL;
  wl_module_set_rx_addr(data, 5, 0);
  //Set RX_Address Pipe 1
  data[0]= data[1]= data[2]= data[3]= data[4]= RF24_RX_ADDR_P1_B0_DEFAULT_VAL;
  wl_module_set_rx_addr(data, 5, 1);
  //Set RX_Address Pipe 2-5
  data[0]=RF24_RX_ADDR_P2_DEFAULT_VAL;
  wl_module_set_rx_addr(data, 1, 2);
  data[0]=RF24_RX_ADDR_P3_DEFAULT_VAL;
  wl_module_set_rx_addr(data, 1, 3);
  data[0]=RF24_RX_ADDR_P4_DEFAULT_VAL;
  wl_module_set_rx_addr(data, 1, 4);
  data[0]=RF24_RX_ADDR_P5_DEFAULT_VAL;
  wl_module_set_rx_addr(data, 1, 5);
    // Set length of incoming payload
  RF_WriteRegister(RF24_RX_PW_P0, PAYLOAD_SIZE);
  RF_WriteRegister(RF24_RX_PW_P1, PAYLOAD_SIZE);
  RF_WriteRegister(RF24_RX_PW_P2, PAYLOAD_SIZE);
  RF_WriteRegister(RF24_RX_PW_P3, PAYLOAD_SIZE);
  RF_WriteRegister(RF24_RX_PW_P4, PAYLOAD_SIZE);
  RF_WriteRegister(RF24_RX_PW_P5, PAYLOAD_SIZE);

  // Start receiver
  RX_POWERUP();     // Power up in receiving mode
  CE_SetVal();     // Listening for packets
}

void wl_module_set_RADDR(uint8_t * adr)
// Sets the receiving address
{
    CE_ClrVal();
    RF_WriteRegisterData(RF24_RX_ADDR_P0,adr,5);
    CE_SetVal();
}

void wl_module_set_TADDR(uint8_t * adr)
// Sets the transmitting address
{
  RF_WriteRegisterData(RF24_TX_ADDR, adr,5);
}


// Sets the wl-module as one of the six sender. Define for every sender a unique Number (wl_module_TX_NR_x)
// when you call this Function.
//  Each TX will get a TX-Address corresponding to the RX-Device.
// RX_Address_Pipe_0 must be the same as the TX-Address
void wl_module_tx_config(uint8_t tx_nr)
{
  uint8_t tx_addr[5];

    // Set RF channel
  RF_WriteRegister(RF24_RF_CH, CHANNEL_NO);
  // Set data speed & Output Power configured in wl_module.h
  RF_WriteRegister(RF24_RF_SETUP, wl_module_RF_SETUP);
  //Config the CONFIG Register (Mask IRQ, CRC, etc)
  RF_WriteRegister(RF24_CONFIG, wl_module_CONFIG);
    // Set length of incoming payload
    //wl_module_config_register(RX_PW_P0, wl_module_PAYLOAD);

  RF_WriteRegister(RF24_SETUP_RETR,(RF24_SETUP_RETR_ARD_750 | RF24_SETUP_RETR_ARC_15));

  //set the TX address for the pipe with the same number as the iteration
  switch(tx_nr)
  {
    case 0: //setup TX address as default RX address for pipe 0 (E7:E7:E7:E7:E7)
      tx_addr[0] = tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RF24_RX_ADDR_P0_B0_DEFAULT_VAL;
      wl_module_set_TADDR(tx_addr);
      wl_module_set_RADDR(tx_addr);
      break;
    case 1: //setup TX address as default RX address for pipe 1 (C2:C2:C2:C2:C2)
      tx_addr[0] = tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RF24_RX_ADDR_P1_B0_DEFAULT_VAL;
      wl_module_set_TADDR(tx_addr);
      wl_module_set_RADDR(tx_addr);
      break;
    case 2: //setup TX address as default RX address for pipe 2 (C2:C2:C2:C2:C3)
      tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RF24_RX_ADDR_P1_B0_DEFAULT_VAL;
      tx_addr[0] = RF24_RX_ADDR_P2_DEFAULT_VAL;
      wl_module_set_TADDR(tx_addr);
      wl_module_set_RADDR(tx_addr);
      break;
    case 3: //setup TX address as default RX address for pipe 3 (C2:C2:C2:C2:C4)
      tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RF24_RX_ADDR_P1_B0_DEFAULT_VAL;
      tx_addr[0] = RF24_RX_ADDR_P3_DEFAULT_VAL;
      wl_module_set_TADDR(tx_addr);
      wl_module_set_RADDR(tx_addr);
      break;
    case 4: //setup TX address as default RX address for pipe 4 (C2:C2:C2:C2:C5)
      tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RF24_RX_ADDR_P1_B0_DEFAULT_VAL;
      tx_addr[0] = RF24_RX_ADDR_P4_DEFAULT_VAL;
      wl_module_set_TADDR(tx_addr);
      wl_module_set_RADDR(tx_addr);
      break;
    case 5: //setup TX address as default RX address for pipe 5 (C2:C2:C2:C2:C6)
      tx_addr[1] = tx_addr[2] = tx_addr[3] = tx_addr[4] = RF24_RX_ADDR_P1_B0_DEFAULT_VAL;
      tx_addr[0] = RF24_RX_ADDR_P5_DEFAULT_VAL;
      wl_module_set_TADDR(tx_addr);
      wl_module_set_RADDR(tx_addr);
      break;
  }
  TX_POWERUP();
  /*
    // Start receiver
    PTX = 0;        // Start in receiving mode
    RX_POWERUP;     // Power up in receiving mode
    wl_module_CE_hi;     // Listening for pakets
  */
}
#endif
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
