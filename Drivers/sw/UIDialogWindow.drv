%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.09.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_EventCallback Callback used for widget events
%define! Description_PaintDialogWindow Paints a window with all widgets
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UIDialogWindowSettings.Inc
%define! Abstract Common\UIDialogWindowAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

typedef %@UI@'ModuleName'%.PixelColor %'ModuleName'%.PixelColor; %>40/* type large enough to hold the color information */
typedef %@UI@'ModuleName'%.PixelDim %'ModuleName'%.PixelDim;     %>40/* type big enough to hold the x and y coordinates */
typedef %@UI@'ModuleName'%.Screen %'ModuleName'%.Screen;         %>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Element %'ModuleName'%.Element;       %>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Coordinate %'ModuleName'%.Coordinate; %>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.EventCallbackKind %'ModuleName'%.EventCallbackKind;%>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Pvoid %'ModuleName'%.Pvoid;           %>40/* Alias to Pvoid data type */
typedef %@UI@'ModuleName'%.painterCallback %'ModuleName'%.painterCallback;%>40/* Alias to UserInterface type */
typedef %@Window@'ModuleName'%.WindowWidget %'ModuleName'_WindowWidget;%>40/* Alias to window widget type*/

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateDialogWindow
%ifdef CreateDialogWindow
byte %'ModuleName'%.%CreateDialogWindow(%'ModuleName'_Screen *screen, %'ModuleName'_WindowWidget *window, %'ModuleName'_PixelColor bgColor, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height);
%define! Parwindow
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parscreen
%define! ParbgColor
%define! RetVal
%include Common\UIDialogWindowCreateDialogWindow.Inc

%endif %- CreateDialogWindow
%-BW_METHOD_END CreateDialogWindow
%-************************************************************************************************************
%-BW_METHOD_BEGIN CloseDialogWindow
%ifdef CloseDialogWindow
void %'ModuleName'%.%CloseDialogWindow(%'ModuleName'_Screen *screen, %'ModuleName'_WindowWidget *window);
%define! Parscreen
%define! Parwindow
%include Common\UIDialogWindowCloseDialogWindow.Inc

%endif %- CloseDialogWindow
%-BW_METHOD_END CloseDialogWindow
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%INTERFACE OnEvent
void %OnEvent(%'ModuleName'_Screen *screen, %'ModuleName'_Window *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind event);
%define! Parscreen
%define! Parwindow
%define! Parelement
%define! Parevent
%include Common\UIDialogWindowOnEvent.Inc

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UIDialogWindowSettings.Inc
%define! Abstract Common\UIDialogWindowAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
#include <string.h> /* for memcpy */
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#ifndef NULL
  #define NULL ((void*)0)
#endif

%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG EventCallback
static void EventCallback(%'ModuleName'_Screen *screen, %'ModuleName'_Element *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind kind, %'ModuleName'_Pvoid pData);
%-INTERNAL_LOC_METHOD_END EventCallback
%-INTERNAL_LOC_METHOD_BEG PaintDialogWindow
static byte PaintDialogWindow(%'ModuleName'_Element *element);
%-INTERNAL_LOC_METHOD_END PaintDialogWindow
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG EventCallback
%define! Parkind
%define! ParpData
%define! Parelement
%define! Parwindow
%define! Parscreen
%include Common\GeneralInternalGlobal.inc (EventCallback)
static void EventCallback(%'ModuleName'_Screen *screen, %'ModuleName'_Element *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind kind, %'ModuleName'_Pvoid pData)
{
  %if defined(OnEvent)
  %OnEvent(screen, window, element, kind);                       %>40/* call user event */
  %endif
  (void)element;                                                 %>40/* unused argument */
  (void)window;                                                  %>40/* unused argument */
  (void)pData;                                                   %>40/* unused argument */
  (void)screen;                                                  %>40/* unused argument */
  (void)kind;                                                    %>40/* unused argument */
}
%-INTERNAL_METHOD_END EventCallback
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateDialogWindow
%ifdef CreateDialogWindow
%define! Parwindow
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parscreen
%define! ParbgColor
%define! RetVal
%include Common\UIDialogWindowCreateDialogWindow.Inc
byte %'ModuleName'%.%CreateDialogWindow(%'ModuleName'_Screen *screen, %'ModuleName'_WindowWidget *window, %'ModuleName'_PixelColor bgColor, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height)
{
  if (%@Window@'ModuleName'%.Create(screen, window, bgColor, x, y, width, height)!= ERR_OK){
    return ERR_FAILED;
  }
  window->element.eventCallback = EventCallback;                 %>40/* change event callback to dialog */
  window->element.prop.flags |= %@UI@'ModuleName'%.FLAGS_WINDOW_IS_MODAL;%>40/* mark window as modal */
  %@UI@'ModuleName'%.DeselectElement(screen, (%'ModuleName'_Element*)window, screen->selectedE);%>40/* deselect any selcted element */
  screen->selectedE = (%'ModuleName'_Element*)window;            %>40/* select the dialog window */
}

%endif %- CreateDialogWindow
%-BW_METHOD_END CreateDialogWindow
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG PaintDialogWindow
%define! Parelement
%define! RetVal
%include Common\GeneralInternalGlobal.inc (PaintDialogWindow)
static byte PaintDialogWindow(%'ModuleName'_Element *element)
{
  %'ModuleName'_WindowWidget *window= (%'ModuleName'_WindowWidget*)element;
  %@Window@'ModuleName'%.UpdateWindow(window);
  return ERR_OK;
}

%-INTERNAL_METHOD_END PaintDialogWindow
%-************************************************************************************************************
%-BW_METHOD_BEGIN CloseDialogWindow
%ifdef CloseDialogWindow
%define! Parscreen
%define! Parwindow
%include Common\UIDialogWindowCloseDialogWindow.Inc
void %'ModuleName'%.%CloseDialogWindow(%'ModuleName'_Screen *screen, %'ModuleName'_WindowWidget *window)
{
  (void)%@UI@'ModuleName'%.RemoveElement((%'ModuleName'_Element*)window);
  screen->selectedE = NULL;
  //screen->element.prop.flags|=%@UI@'ModuleName'%.FLAGS_NEEDS_REPAINT;%>40/* force complete repaint */
  %@UI@'ModuleName'%.UpdateScreen(screen, TRUE);
}

%endif %- CloseDialogWindow
%-BW_METHOD_END CloseDialogWindow
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%IMPLEMENTATION OnEvent
%define! Parscreen
%define! Parwindow
%define! Parelement
%define! Parevent
%include Common\UIDialogWindowOnEvent.Inc
void %OnEvent(%'ModuleName'_Screen *screen, %'ModuleName'_Window *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind event)
{
  /* Write your code here ... */
}

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
