%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    03.07.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\SPIHCS08Settings.Inc
%define! Abstract Common\SPIHCS08Abstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"
%include sw\CommonSupport.prg
%-
%define INLINE_ME
#define %'ModuleName'%.WaitRxFull()   while(!(%SPIReadBufferFullFlag))   /* Wait until RX buffer is full */
#define %'ModuleName'%.WaitTxEmpty()  while(!(%SPIWriteBufferEmptyFlag)) /* Wait until TX buffer is empty */
#define %'ModuleName'%.DummyRxRead()  ((void)%SPIDataReg)                /* dummy read to clear the data/status register */

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN RecvChar
%ifdef RecvChar
%if defined(INLINE_ME)
#define %'ModuleName'%.%RecvChar() %SPIDataReg
%else
byte %'ModuleName'%.%RecvChar(void);
%endif
%define! RetVal
%include Common\SPIHCS08RecvChar.Inc

%endif %- RecvChar
%-BW_METHOD_END RecvChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendChar
%ifdef SendChar
%if defined(INLINE_ME)
#define %'ModuleName'%.%SendChar(val) (%SPIDataReg=val)
%else
void %'ModuleName'%.%SendChar(byte val);
%endif
%define! Parval
%include Common\SPIHCS08SendChar.Inc

%endif %- SendChar
%-BW_METHOD_END SendChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearReceiveStatReg
%ifdef ClearReceiveStatReg
%if defined(INLINE_ME)
#define %'ModuleName'%.%ClearReceiveStatReg() ((void)%SPIStatusReg) /* dummy read to clear the status register */
%else
void %'ModuleName'%.%ClearReceiveStatReg(void);
%endif %- INLINE_ME
%include Common\SPIHCS08ClearReceiveStatReg.Inc

%endif %- ClearReceiveStatReg
%-BW_METHOD_END ClearReceiveStatReg
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearReceiveDataReg
%ifdef ClearReceiveDataReg
%if defined(INLINE_ME)
#define %'ModuleName'%.%ClearReceiveDataReg() {(void)%SPIDataReg; /*asm("nop"); asm("nop"); asm("nop"); asm("nop");*/ } /* dummy read to clear the data/status register */
%else
void %'ModuleName'%.%ClearReceiveDataReg(void);
%endif %- INLINE_ME
%include Common\SPIHCS08ClearReceiveDataReg.Inc

%endif %- ClearReceiveDataReg
%-BW_METHOD_END ClearReceiveDataReg
%-************************************************************************************************************
%-BW_METHOD_BEGIN WaitTransferDone
%ifdef WaitTransferDone
%if defined(INLINE_ME)
#define %'ModuleName'%.%WaitTransferDone()  while(!(%SPIReadBufferFullFlag)) /* until flag indicates transfer done */
%else
void %'ModuleName'%.%WaitTransferDone(void);
%endif %- INLINE_ME
%include Common\SPIHCS08WaitTransferDone.Inc

%endif %- WaitTransferDone
%-BW_METHOD_END WaitTransferDone
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteDummy_Read
%ifdef WriteDummy_Read
byte %'ModuleName'%.%WriteDummy_Read(void);
%define! RetVal
%include Common\SPIHCS08WriteDummy_Read.Inc

%endif %- WriteDummy_Read
%-BW_METHOD_END WriteDummy_Read
%-************************************************************************************************************
%-BW_METHOD_BEGIN Write_ReadDummy
%ifdef Write_ReadDummy
void %'ModuleName'%.%Write_ReadDummy(byte val);
%define! Parval
%include Common\SPIHCS08Write_ReadDummy.Inc

%endif %- Write_ReadDummy
%-BW_METHOD_END Write_ReadDummy
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\SPIHCS08Settings.Inc
%define! Abstract Common\SPIHCS08Abstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN RecvChar
%ifdef RecvChar
%define! RetVal
%include Common\SPIHCS08RecvChar.Inc
%if defined(INLINE_ME)
/* function is implemented as macro in the header file */
%else
byte %'ModuleName'%.%RecvChar(void)
{
  return %SPIDataReg; /* read from the SPI data register */
}
%endif %- INLINE_ME

%endif %- RecvChar
%-BW_METHOD_END RecvChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendChar
%ifdef SendChar
%define! Parval
%include Common\SPIHCS08SendChar.Inc
%if defined(INLINE_ME)
/* function is implemented as macro in the header file */
%else
void %'ModuleName'%.%SendChar(byte val)
{
  %SPIDataReg = val; /* write data to the SPI data register */
}
%endif %- INLINE_ME

%endif %- SendChar
%-BW_METHOD_END SendChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearReceiveStatReg
%ifdef ClearReceiveStatReg
%include Common\SPIHCS08ClearReceiveStatReg.Inc
%if defined(INLINE_ME)
/* function is implemented as macro in the header file */
%else
void %'ModuleName'%.%ClearReceiveStatReg(void)
{
  (void)%SPIStatusReg; /* dummy read to clear the status register */
}
%endif %- INLINE_ME

%endif %- ClearReceiveStatReg
%-BW_METHOD_END ClearReceiveStatReg
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearReceiveDataReg
%ifdef ClearReceiveDataReg
%include Common\SPIHCS08ClearReceiveDataReg.Inc
%if defined(INLINE_ME)
/* function is implemented as macro in the header file */
%else
void %'ModuleName'%.%ClearReceiveDataReg(void)
{
  (void)%SPIDataReg; /* dummy read to clear the receive data register */
}
%endif %- INLINE_ME

%endif %- ClearReceiveDataReg
%-BW_METHOD_END ClearReceiveDataReg
%-************************************************************************************************************
%-BW_METHOD_BEGIN WaitTransferDone
%ifdef WaitTransferDone
%include Common\SPIHCS08WaitTransferDone.Inc
%if defined(INLINE_ME)
/* function is implemented as macro in the header file */
%else
void %'ModuleName'%.%WaitTransferDone(void)
{
  while(!(%SPIReadBufferEmptyFlag)); /* until flag indicates transfer done */
}
%endif %- INLINE_ME

%endif %- WaitTransferDone
%-BW_METHOD_END WaitTransferDone
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteDummy_Read
%ifdef WriteDummy_Read
%define! RetVal
%include Common\SPIHCS08WriteDummy_Read.Inc
byte %'ModuleName'%.%WriteDummy_Read(void)
{
  %'ModuleName'%.WaitTxEmpty(); /* wait until we can store new value into shift register */
  %'ModuleName'%.SendChar(0); /* shift in dummy value */
  %'ModuleName'%.WaitTxEmpty(); /* wait until value has been shifted out */
  %'ModuleName'%.WaitRxFull(); /* wait until we are ready to read the new value from the bus from the register */
  return %'ModuleName'%.RecvChar(); /* return value from bus */
}

%endif %- WriteDummy_Read
%-BW_METHOD_END WriteDummy_Read
%-************************************************************************************************************
%-BW_METHOD_BEGIN Write_ReadDummy
%ifdef Write_ReadDummy
%define! Parval
%include Common\SPIHCS08Write_ReadDummy.Inc
void %'ModuleName'%.%Write_ReadDummy(byte val)
{
  %'ModuleName'%.WaitTxEmpty(); /* wait until transmit buffer is empty */
  %'ModuleName'%.SendChar(val); /* send the value to the bus */
  %'ModuleName'%.WaitRxFull();  /* wait until the value has been shifted out */
  %'ModuleName'%.DummyRxRead(); /* ignore the new value from the bus */
}

%endif %- Write_ReadDummy
%-BW_METHOD_END Write_ReadDummy
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%-  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
