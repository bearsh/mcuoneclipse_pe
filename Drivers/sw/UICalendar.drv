%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.09.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_CalendarDayWindowCallback Private window callback for CalendarDay element. It handles all the internal UI elements.
%define! Description_CreateCalDayClicks Populates the CalendarDay with the clickable appointment elements
%define! Description_CreateCalDayElems Creates a new calendar day element
%define! Description_PaintCalendarDay Paints the calendar day item
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UICalendarSettings.Inc
%define! Abstract Common\UICalendarAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

typedef %@UI@'ModuleName'%.PixelColor %'ModuleName'%.PixelColor; %>40/* type large enough to hold the color information */
typedef %@UI@'ModuleName'%.PixelDim %'ModuleName'%.PixelDim;     %>40/* type big enough to hold the x and y coordinates */
typedef %@UI@'ModuleName'%.Screen %'ModuleName'%.Screen;         %>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Window %'ModuleName'%.Window;         %>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Element %'ModuleName'%.Element;       %>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.EventCallbackKind %'ModuleName'%.EventCallbackKind;%>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Pvoid %'ModuleName'%.Pvoid;           %>40/* Alias to Pvoid data type */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;

/* --- Element: CalendarDay --- */
typedef struct {
  byte day;                                                      %>40/* 1..31 */
  byte month;                                                    %>40/* 1..12 */
  word year;                                                     %>40/* 1..9999 */
  byte hour;                                                     %>40/* 0..59 */
  byte minute;                                                   %>40/* 0..59 */
} %'ModuleName'_CalendarDateTime;

typedef struct {
  %@UI@'ModuleName'%.Element element;                            %>40/* the base element, always first in structure */
  %@UI@'ModuleName'%.TextInfo textInfo;                          %>40/* Information describing the text. Must be right after element */
  bool isFreeAppointment;                                        %>40/* if the element is a free appointment or not: TRUE for this one */
  byte hour, minute;                                             %>40/* start minute and hour of free slot */
  word durationMinutes;                                          %>40/* duration of slot in minutes */
} %'ModuleName'_CalendarFreeApointmentSelection;

typedef struct {
  %@UI@'ModuleName'%.Element element;                            %>40/* the base element, always first in structure */
  %@UI@'ModuleName'%.TextInfo textInfo;                          %>40/* Information describing the text. Must be right after element */
  bool isFreeAppointment;                                        %>40/* if the element is a free appointment or not. FALSE for this one */
  struct %'ModuleName'_CalendarAppointment *appoint;             %>40/* the appointment itself */
  %'ModuleName'_CalendarFreeApointmentSelection prevFree;        %>40/* a free free appointment slot befor this appointment */
} %'ModuleName'_CalendarAppointmentSelection;

typedef struct %'ModuleName'_CalendarAppointment {
  %'ModuleName'_CalendarDateTime start;                          %>40/* start date/time of appointment */
  word durationMinutes;                                          %>40/* duration in minutes */
  unsigned char *text;                                           %>40/* appointment description */
  struct %'ModuleName'_CalendarAppointment *next;                %>40/* next item in list (ordered by start date/time */
  %'ModuleName'_CalendarAppointmentSelection *selection;         %>40/* memory used for the selection */
} %'ModuleName'_CalendarAppointment;

typedef %'ModuleName'_CalendarAppointment* %'ModuleName'_PCalendarAppointment ; /* Pointer to a calendar appointment */

typedef struct {/* beginning must be as %'ModuleName'_SubWindow! */
  %@UI@'ModuleName'%.Element element;                            %>40/* the base element, always first in structure */
  %@UI@'ModuleName'%.Window subWindow;                           %>40/* the (sub) window itself, must be right after element */
  %@UI@'ModuleName'%.Window *parentWindow;                       %>40/* need pointer to parent window, so we could call the parent event handler */
  %'ModuleName'_CalendarDateTime start;                          %>40/* start date/time to show */
  %@UI@'ModuleName'%.Text prevDay;                               %>40/* item in header to move to previous day */
  %@UI@'ModuleName'%.Text nextDay;                               %>40/* item in header to move to next day */
  %@UI@'ModuleName'%.Icon upStart;                               %>40/* icon to move the start time up */
  %@UI@'ModuleName'%.Icon downStart;                             %>40/* icon to move the start time down */
  %'ModuleName'_CalendarFreeApointmentSelection lastFree;        %>40/* there shall be at least one free slot */
} %'ModuleName'_CalendarDay;

%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateCalendarDay
%ifdef CreateCalendarDay
byte %'ModuleName'%.%CreateCalendarDay(%'ModuleName'_Window *window, %'ModuleName'_CalendarDay *calendarDay, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height, %'ModuleName'_CalendarDateTime *start);
%define! Parwindow
%define! ParcalendarDay
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parstart
%define! RetVal
%include Common\UICalendarCreateCalendarDay.Inc

%endif %- CreateCalendarDay
%-BW_METHOD_END CreateCalendarDay
%-************************************************************************************************************
%-BW_METHOD_BEGIN ChangeCalendarDay
%ifdef ChangeCalendarDay
void %'ModuleName'%.%ChangeCalendarDay(%'ModuleName'_Window *window, %'ModuleName'_CalendarDay *calendarDay, signed char changeDays, int changeMinutes);
%define! Parwindow
%define! ParchangeDays
%define! ParchangeMinutes
%define! ParcalendarDay
%include Common\UICalendarChangeCalendarDay.Inc

%endif %- ChangeCalendarDay
%-BW_METHOD_END ChangeCalendarDay
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCalendarDayResolution
%ifdef GetCalendarDayResolution
#define %'ModuleName'%.%GetCalendarDayResolution() \
  %CalendarDayResolution                                         %>40/* resolution of calendar items in minutes */
%define! RetVal
%include Common\UICalendarGetCalendarDayResolution.Inc

%endif %- GetCalendarDayResolution
%-BW_METHOD_END GetCalendarDayResolution
%-************************************************************************************************************
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnCalendarGetAppointments
%ifdef OnCalendarGetAppointments
%INTERFACE OnCalendarGetAppointments
void %OnCalendarGetAppointments(%'ModuleName'_CalendarDateTime *startHint, %'ModuleName'_CalendarAppointment **appointmentList);
%define! ParstartHint
%define! ParappointmentList
%include Common\UICalendarOnCalendarGetAppointments.Inc

%endif %- OnCalendarGetAppointments
%-BW_METHOD_END OnCalendarGetAppointments
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%INTERFACE OnEvent
void %OnEvent(%'ModuleName'_Screen *screen, %'ModuleName'_Window *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind event);
%define! Parscreen
%define! Parwindow
%define! Parelement
%define! Parevent
%include Common\UICalendarOnEvent.Inc

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UICalendarSettings.Inc
%define! Abstract Common\UICalendarAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
#include <string.h> /* for memcpy */
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#ifndef NULL
  #define NULL ((void*)0)
#endif

/* constants for calendar day properties */
#define %'ModuleName'%.CALENDAR_LEFT_DAY_STR               "<< "
#define %'ModuleName'%.CALENDAR_RIGHT_DAY_STR              " >>"
#define %'ModuleName'%.CALENDAR_DAY_LINE_WIDTH             1     %>40/* width of lines in calendar view */
#define %'ModuleName'%.CALENDAR_PREV_NEXT_BORDER           1     %>40/* have << and >> one pixel away from the border, otherwise on ChLCD there might be a 'copy to border' effect */
#define %'ModuleName'%.CALENDAR_TIME_BORDER                1     %>40/* have calendar time away from the border, otherwise on ChLCD there might be a 'copy to border' effect */
#define %'ModuleName'%.CALENDAR_TIME_FORMAT_STR            "0900"%>40/* format of time */
#define %'ModuleName'%.CALENDAR_DAY_COLOR_FREE_APPOINTMENT %@UI@'ModuleName'%.COLOR_%CalendarDayFreeAppointmentColor%>40/* color appointment boxes */
#define %'ModuleName'%.CALENDAR_DAY_COLOR_APPOINTMENT      %@UI@'ModuleName'%.COLOR_%CalendarDayAppointmentColor%>40/* color appointment boxes */
#define %'ModuleName'%.CALENDAR_DAY_COLOR_APPOINTMENT_TEXT %@UI@'ModuleName'%.COLOR_%CalendarDayAppointmentTextColor%>40/* color for appointment text */
#define %'ModuleName'%.CALENDAR_DAY_COLOR_HEADER           %@UI@'ModuleName'%.COLOR_%CalendarDayHeaderColor%>40/* color for header line */
#define %'ModuleName'%.CALENDAR_DAY_COLOR_LINES            %@UI@'ModuleName'%.COLOR_%CalendarDayLineColor%>40/* color for lines in calendar */
#define %'ModuleName'%.CALENDAR_DAY_BUSY_BAR_WIDTH         %AppointmentBusyBarWidth%>40/* width of the side busy bar */
#define %'ModuleName'%.CALENDAR_DAY_BUSY_BAR_COLOR         %@UI@'ModuleName'%.COLOR_%BusyBarBackgroundColor%>40/* color for lines in calendar */

%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG CalendarDayWindowCallback
static void CalendarDayWindowCallback(%'ModuleName'_Window *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind kind, %'ModuleName'_Pvoid data);
%-INTERNAL_LOC_METHOD_END CalendarDayWindowCallback
%-INTERNAL_LOC_METHOD_BEG CreateCalDayClicks
static void CreateCalDayClicks(%'ModuleName'_Window *window, %'ModuleName'_CalendarDay *calendarDay, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height);
%-INTERNAL_LOC_METHOD_END CreateCalDayClicks
%-INTERNAL_LOC_METHOD_BEG CreateCalDayElems
static byte CreateCalDayElems(%'ModuleName'_Window *window, %'ModuleName'_CalendarDay *calendarDay, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height);
%-INTERNAL_LOC_METHOD_END CreateCalDayElems
%-INTERNAL_LOC_METHOD_BEG PaintCalendarDay
static byte PaintCalendarDay(%'ModuleName'_Window *window, %'ModuleName'_Element *element);
%-INTERNAL_LOC_METHOD_END PaintCalendarDay
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG PaintCalendarDay
%define! Parwindow
%define! Parelement
%define! RetVal
%include Common\GeneralInternalGlobal.inc (PaintCalendarDay)
static byte PaintCalendarDay(%'ModuleName'_Window *window, %'ModuleName'_Element *element)
{
  %'ModuleName'_PixelDim x, y, w, h, hLine, wTime;
  byte res, i, hour, minute, nofLines;
  short tmp;
  struct {
    %@UI@'ModuleName'%.Element element;                          %>40/* must be first! */
    %@UI@'ModuleName'%.TextInfo textInfo;
  } info;                                                        %>40/* temporary information for text items */
  unsigned char buf[sizeof("01.10.2009")];
  %'ModuleName'_CalendarDay *calendarDay;
  %@UI@'ModuleName'%.FontCallbacks *font;

  if (element == NULL) {
    return ERR_FAILED;
  }
  if (element->prop.type != %@UI@'ModuleName'%.CALENDARDAY) {
    return ERR_FAILED;
  }
  calendarDay = (%'ModuleName'_CalendarDay*)element;
  window = &calendarDay->subWindow;                              %>40/* our own window is the base */
  /* header area */
  x = 0;
  y = 0;
  w = %@UI@'ModuleName'%.GetElementWidth(window);
  h = %@UI@'ModuleName'%.GetElementHeight(window);
  /* draw top line  */
  %@UI@'ModuleName'%.DrawHLine(window, x, y, w, %'ModuleName'%.CALENDAR_DAY_COLOR_LINES);
  y += %'ModuleName'%.CALENDAR_DAY_LINE_WIDTH;
  h -= %'ModuleName'%.CALENDAR_DAY_LINE_WIDTH;                   %>40/* reflect reduction of area beause of the divider line */

  buf[0] = '\0';
  %@Utility@'ModuleName'%.strcatNum16u(buf, sizeof(buf), calendarDay->start.day);
  %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)".");
  %@Utility@'ModuleName'%.strcatNum16u(buf, sizeof(buf), calendarDay->start.month);
  %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)".");
  %@Utility@'ModuleName'%.strcatNum16u(buf, sizeof(buf), calendarDay->start.year);
  font = %@Font@'ModuleName'%.GetFont();
#if !%@UI@'ModuleName'%.USE_FIXED_FONT
  info.textInfo.font = font;
#endif
  info.textInfo.text = buf;
#if !%@UI@'ModuleName'%.USE_FIXED_TXT_COLOR
  info.textInfo.txtColor = %@UI@'ModuleName'%.COLOR_%CalendarDayHeaderTextColor;
#endif

  /* center text */
  (void)memcpy(&info.element, element, sizeof(%@UI@'ModuleName'%.Element));%>40/* get background properties */
  info.element.prop.x = (%@UI@'ModuleName'%.PixelDim)(%@UI@'ModuleName'%.GetElementPosX(&calendarDay->upStart)+%@UI@'ModuleName'%.GetElementWidth(&calendarDay->upStart));
  info.element.prop.y = y;
  info.element.prop.width -= %@UI@'ModuleName'%.GetElementPosX(&info); /* subtract left border with icons */
  info.element.prop.width -= (w-%@UI@'ModuleName'%.GetElementPosX(&calendarDay->downStart)); /* subtract right border with icons */
  info.element.prop.height = (%@UI@'ModuleName'%.PixelDim)(%@FontDisplay@'ModuleName'%.GetStringHeight(info.textInfo.text, font, NULL));%>40/* adapt to text height */
  /* center text */
  info.textInfo.deltaX = (%@UI@'ModuleName'%.PixelDim)((%@UI@'ModuleName'%.GetElementWidth(&info)-%@FontDisplay@'ModuleName'%.GetStringWidth(info.textInfo.text, font, NULL))/2);
  info.textInfo.deltaY = 0;
  info.element.prop.color = %'ModuleName'%.CALENDAR_DAY_COLOR_HEADER;
  res = %@UI@'ModuleName'%.PaintText(window, (%@UI@'ModuleName'%.Element*)&info);
  if (res != ERR_OK) {
    return res;
  }

  /* main area, background: this is below the header: reduce by header size */
  y += %@UI@'ModuleName'%.GetElementHeight(&info);
  h -= %@UI@'ModuleName'%.GetElementHeight(&info);

  /* draw divider line between header and appointment area */
  %@UI@'ModuleName'%.DrawHLine(window, x, y, w, %'ModuleName'%.CALENDAR_DAY_COLOR_LINES);
  y += %'ModuleName'%.CALENDAR_DAY_LINE_WIDTH;
  h -= %'ModuleName'%.CALENDAR_DAY_LINE_WIDTH;                   %>40/* reflect reduction of area beause of the divider line */
  /* postcondition: h is the height of the drawing area we have available, and w is the width */

  /* draw time items */
  hLine = (%@UI@'ModuleName'%.PixelDim)(%@FontDisplay@'ModuleName'%.GetStringHeight((unsigned char*)%'ModuleName'%.CALENDAR_TIME_FORMAT_STR, font, NULL)+%'ModuleName'%.CALENDAR_DAY_LINE_WIDTH);
  wTime = (%@UI@'ModuleName'%.PixelDim)(%@FontDisplay@'ModuleName'%.GetStringWidth((unsigned char*)%'ModuleName'%.CALENDAR_TIME_FORMAT_STR, font, NULL)+2*%'ModuleName'%.CALENDAR_TIME_BORDER);
  %@UI@'ModuleName'%.DrawVLine(window, (%@UI@'ModuleName'%.PixelDim)(x+wTime), y, h, %'ModuleName'%.CALENDAR_DAY_COLOR_LINES);%>40/* vertical divider line between time and items */

  /* prepare text element for the hour text on the left side */
  (void)memcpy(&info.element, element, sizeof(%@UI@'ModuleName'%.Element));%>40/* get background properties */
  info.element.prop.x = 0;
  info.element.prop.y = (%@UI@'ModuleName'%.PixelDim)(hLine+%'ModuleName'%.CALENDAR_DAY_LINE_WIDTH);%>40/* top line plus height of header line */
  info.element.prop.width = wTime;
  info.element.prop.height = hLine;
  info.textInfo.deltaX = %'ModuleName'%.CALENDAR_TIME_BORDER;    %>40/* 1 pixel border to avoid 'cross-over' to border on ChLCD */
  info.textInfo.deltaY = 0;
  info.textInfo.text = buf;
#if !%@UI@'ModuleName'%.USE_FIXED_TXT_COLOR
  info.textInfo.txtColor = %@UI@'ModuleName'%.COLOR_%CalendarDayTimeTextColor;
#endif

  tmp = (short)(calendarDay->start.hour*60 + calendarDay->start.minute);
  nofLines = (byte)(h/hLine);
  for(i=1; i<=nofLines; i++) {
    if (tmp < 24*60) {                                           %>40/* only paint for one day, do not cross date time line */
      hour = (byte)(tmp/60);
      minute = (byte)(tmp%%60);
      buf[0] = '\0';
      %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, sizeof(buf), hour, '0', 2);
      %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, sizeof(buf), minute, '0', 2);
      res = %@UI@'ModuleName'%.PaintText(window, (%@UI@'ModuleName'%.Element*)&info);
      if (res != ERR_OK) {
        return res;
      }
      info.element.prop.y += hLine;
      %@UI@'ModuleName'%.DrawHLine(window, x, (%@UI@'ModuleName'%.PixelDim)(y+(i*hLine)-1), wTime, %'ModuleName'%.CALENDAR_DAY_COLOR_LINES);
      tmp += %CalendarDayResolution;
    } /* if */
  } /* for */

%if defined(OnCalendarGetAppointments)
  /* paint the appointment busy bars */
  {
    %'ModuleName'_CalendarAppointment *list = NULL;
    word viewStartMinute, viewEndMinute;                         %>40/* start and end minutes of current view */
    word appStartMinute, appEndMinute;                           %>40/* start and end minutes of current appointment */
    bool drawAppointment;

    x = (%@UI@'ModuleName'%.PixelDim)(wTime+%'ModuleName'%.CALENDAR_DAY_LINE_WIDTH);%>40/* x pointing to the beginning of the appointment area */
    y = (%@UI@'ModuleName'%.PixelDim)(hLine+%'ModuleName'%.CALENDAR_DAY_LINE_WIDTH);%>40/* y pointing to the beginning of the appointment area */
    /* h is the height of the appointment area */
    viewStartMinute = (word)(calendarDay->start.hour*60 + calendarDay->start.minute);
    viewEndMinute = (word)(viewStartMinute + (h*%CalendarDayResolution)/hLine - 1);%>40/* -1 because we only show up to the next boundary */
    if (viewEndMinute >= 60*24) {                                %>40/* do not show across the date line */
      viewEndMinute = (60*24)-1;
    }
    %OnCalendarGetAppointments(&calendarDay->start, &list);
    while(list != NULL) {
      if (   list->start.day == calendarDay->start.day
          && list->start.month == calendarDay->start.month
          && list->start.year == calendarDay->start.year
          ) /* same date & year */
      {
        appStartMinute = (word)(list->start.hour*60 + list->start.minute);
        appEndMinute = (word)(appStartMinute + list->durationMinutes-1);
        drawAppointment = FALSE;
        if (appStartMinute >= viewStartMinute && appEndMinute <= viewEndMinute) {
          /* appointment fully visible */
          drawAppointment = TRUE;
        } else if (appStartMinute < viewStartMinute && appEndMinute >= viewStartMinute && appEndMinute <= viewEndMinute) {
          /* appointment partially visible on the top of the view */
          appStartMinute = viewStartMinute; /* cut not visible part */
          drawAppointment = TRUE;
        } else if (appStartMinute >= viewStartMinute && appStartMinute <= viewEndMinute && appEndMinute > viewEndMinute) {
          /* appointment partially visible at the of the view */
          appEndMinute = viewEndMinute; /* cut not visible part */
          drawAppointment = TRUE;
        } else if (appStartMinute < viewStartMinute && appEndMinute > viewEndMinute) {
          /* appointment is larger than the whole view area */
          appStartMinute = viewStartMinute; /* cut not visible part */
          appEndMinute = viewEndMinute; /* cut not visible part */
          drawAppointment = TRUE;
        }
        /* calendar appointment busy bar */
        if (drawAppointment) {
          %@UI@'ModuleName'%.PixelDim y1, h1;

          y1 = (%@UI@'ModuleName'%.PixelDim)(y+(h*(appStartMinute-viewStartMinute)/(viewEndMinute-viewStartMinute)));
          h1 = (%@UI@'ModuleName'%.PixelDim)(h*(appEndMinute-appStartMinute)/(viewEndMinute-viewStartMinute));
          %@UI@'ModuleName'%.DrawFilledBox(window, x, y1,
            %'ModuleName'%.CALENDAR_DAY_BUSY_BAR_WIDTH,
            h1,
            %'ModuleName'%.CALENDAR_DAY_BUSY_BAR_COLOR);
        }
      }
      list = list->next;
    }
  }
%endif
  return ERR_OK;
}

%-INTERNAL_METHOD_END PaintCalendarDay
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG CreateCalDayClicks
%define! Parwindow
%define! ParcalendarDay
%define! Parx
%define! Pary
%define! Parheight
%define! Parwidth
%include Common\GeneralInternalGlobal.inc (CreateCalDayClicks)
static void CreateCalDayClicks(%'ModuleName'_Window *window, %'ModuleName'_CalendarDay *calendarDay, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height)
{
  %@UI@'ModuleName'%.PixelDim hLine, wTime, h;
  %@UI@'ModuleName'%.FontCallbacks *font;
  %'ModuleName'_CalendarAppointment *list = NULL;
  word viewStartMinute, viewEndMinute;                           %>40/* start and end minutes of current view */
  word freeStartMinute, freeEndMinute;                           %>40/* current start and end minute of free slot */
  word appStartMinute, appEndMinute;                             %>40/* start and end minutes of current appointment */
  bool drawAppointment;
  %@UI@'ModuleName'%.PixelDim w;
  %@UI@'ModuleName'%.PixelDim y1, h1, th;

  (void)width;
  font = %@Font@'ModuleName'%.GetFont();
  hLine = (%@UI@'ModuleName'%.PixelDim)(%@FontDisplay@'ModuleName'%.GetStringHeight((unsigned char *)%'ModuleName'%.CALENDAR_TIME_FORMAT_STR, font, NULL)+%'ModuleName'%.CALENDAR_DAY_LINE_WIDTH);%>40
  wTime = (%@UI@'ModuleName'%.PixelDim)(%@FontDisplay@'ModuleName'%.GetStringWidth((unsigned char *)%'ModuleName'%.CALENDAR_TIME_FORMAT_STR, font, NULL)+2*%'ModuleName'%.CALENDAR_TIME_BORDER);
  h = (%@UI@'ModuleName'%.PixelDim)(
     height                                                      %>40/* total (sub)window height) */
     - %'ModuleName'%.CALENDAR_DAY_LINE_WIDTH                    %>40/* top line (above header) */
     - hLine                                                     %>40/* height of header text */
     - %'ModuleName'%.CALENDAR_DAY_LINE_WIDTH                    %>40/* height of line between header and appointment area */
     );
  /* paint appointments in appointment area */
  x = (%@UI@'ModuleName'%.PixelDim)(wTime+%'ModuleName'%.CALENDAR_DAY_LINE_WIDTH+%'ModuleName'%.CALENDAR_DAY_BUSY_BAR_WIDTH);%>40/* x pointing to the beginning of the appointement area */
  y = (%@UI@'ModuleName'%.PixelDim)(hLine+%'ModuleName'%.CALENDAR_DAY_LINE_WIDTH);%>40/* y pointing to the beginning of the appointement area */
  w = (%@UI@'ModuleName'%.PixelDim)(%@UI@'ModuleName'%.GetElementWidth(window)-wTime-%'ModuleName'%.CALENDAR_DAY_LINE_WIDTH-%'ModuleName'%.CALENDAR_DAY_BUSY_BAR_WIDTH);%>40/* w is the width of the appointment area */
  /* h is the height of the appointment area */
  viewStartMinute = (word)(calendarDay->start.hour*60 + calendarDay->start.minute);
  viewEndMinute = (word)(viewStartMinute + (h*%CalendarDayResolution)/hLine - 1);%>40/* -1 because we only show up to the next boundary */
  if (viewEndMinute >= 60*24) {                                  %>40/* do not show across the date line */
    viewEndMinute = (60*24)-1;
  }
  freeStartMinute = viewStartMinute;                             %>40/* default first free slot */
  freeEndMinute = viewEndMinute;

%if defined(OnCalendarGetAppointments)
  %OnCalendarGetAppointments(&calendarDay->start, &list);
%endif
  while(list != NULL) {
    if (   list->start.day == calendarDay->start.day
        && list->start.month == calendarDay->start.month
        && list->start.year == calendarDay->start.year
        ) /* same date & year */
    {
      appStartMinute = (word)(list->start.hour*60 + list->start.minute);
      appEndMinute = (word)(appStartMinute + list->durationMinutes-1);
      drawAppointment = FALSE;
      if (appStartMinute >= viewStartMinute && appEndMinute <= viewEndMinute) {
        /* appointment fully visible */
        drawAppointment = TRUE;
      } else if (appStartMinute < viewStartMinute && appEndMinute >= viewStartMinute && appEndMinute <= viewEndMinute) {
        /* appointment partially visible on the top of the view */
        appStartMinute = viewStartMinute; /* cut not visible part */
        drawAppointment = TRUE;
      } else if (appStartMinute >= viewStartMinute && appStartMinute <= viewEndMinute && appEndMinute > viewEndMinute) {
        /* appointment partially visible at the of the view */
        appEndMinute = viewEndMinute; /* cut not visible part */
        drawAppointment = TRUE;
      } else if (appStartMinute < viewStartMinute && appEndMinute > viewEndMinute) {
        /* appointment is larger than the whole view area */
        appStartMinute = viewStartMinute; /* cut not visible part */
        appEndMinute = viewEndMinute; /* cut not visible part */
        drawAppointment = TRUE;
      }
      /* calendar appointment selection */
      if (drawAppointment) {
        freeEndMinute = (word)(appStartMinute-1);
        /* create text item for open appointment */
        if (freeEndMinute >= freeStartMinute) {
          y1 = (%@UI@'ModuleName'%.PixelDim)(y+(h*(freeStartMinute-viewStartMinute)/(viewEndMinute-viewStartMinute))
               + %'ModuleName'%.CALENDAR_DAY_LINE_WIDTH);
          h1 = (%@UI@'ModuleName'%.PixelDim)(h*(freeEndMinute-freeStartMinute)/(viewEndMinute-viewStartMinute));
          if (h1 > 2) {
            h1 -= 2*%'ModuleName'%.CALENDAR_DAY_LINE_WIDTH;
          } else {
            h1 = 1; /* minimal height */
          }
          (void)%@UI@'ModuleName'%.CreateText(window, (%@UI@'ModuleName'%.Text*)(&list->selection->prevFree), x, y1, w, h1, (unsigned char*)"", font);
          %@UI@'ModuleName'%.ChangeTextBgColor(&list->selection->prevFree.element, %'ModuleName'%.CALENDAR_DAY_COLOR_FREE_APPOINTMENT);
          %@UI@'ModuleName'%.EnableElementSelection(&list->selection->prevFree);
          list->selection->prevFree.isFreeAppointment = TRUE;
          list->selection->prevFree.hour = (byte)(freeStartMinute/60);
          list->selection->prevFree.minute = (byte)(freeStartMinute-60*list->selection->prevFree.hour);
          list->selection->prevFree.durationMinutes = (word)(freeEndMinute-freeStartMinute);
        }
        freeStartMinute = (word)(appEndMinute+1);                %>40/* define for next iteration */
        freeEndMinute = viewEndMinute;
        /* create text item for booked appointment */
        y1 = (%@UI@'ModuleName'%.PixelDim)(y+(h*(appStartMinute-viewStartMinute)/(viewEndMinute-viewStartMinute)));
        h1 = (%@UI@'ModuleName'%.PixelDim)(h*(appEndMinute-appStartMinute)/(viewEndMinute-viewStartMinute));
        th = %@FontDisplay@'ModuleName'%.GetStringHeight(list->text, font, NULL);
        list->selection->appoint = list;
        list->selection->isFreeAppointment = FALSE;
        if (th>h1) {                                             %>40/* not enough space for writing text */
          (void)%@UI@'ModuleName'%.CreateText(window, (%@UI@'ModuleName'%.Text*)list->selection, x, y1, w, h1, (unsigned char*)"", font);
        } else {
          (void)%@UI@'ModuleName'%.CreateText(window, (%@UI@'ModuleName'%.Text*)list->selection, x, y1, w, h1, list->text, font);
        }
        %@UI@'ModuleName'%.ChangeTextBgColor(&list->selection->element, %'ModuleName'%.CALENDAR_DAY_COLOR_APPOINTMENT);
        %ifndef FixedTextForegroundColor
        %@UI@'ModuleName'%.ChangeTextFgColor(&list->selection->element, %@UI@'ModuleName'%.COLOR_%CalendarDayAppointmentTextColor);
        %endif
        %@UI@'ModuleName'%.EnableElementSelection(list->selection);
      }
    }
    list = list->next;
  }
  /* create text item for open appointment */
  y1 =   (%@UI@'ModuleName'%.PixelDim)(y+(h*(freeStartMinute-viewStartMinute)/(viewEndMinute-viewStartMinute))+
       + %'ModuleName'%.CALENDAR_DAY_LINE_WIDTH);
  h1 = (%@UI@'ModuleName'%.PixelDim)(h*(freeEndMinute-freeStartMinute)/(viewEndMinute-viewStartMinute));
  if (h1 > 2) {
    h1 -= 2*%'ModuleName'%.CALENDAR_DAY_LINE_WIDTH;
  } else {
    h1 = 1; /* minimal height */
  }
  if (freeEndMinute >= freeStartMinute) {
    (void)%@UI@'ModuleName'%.CreateText(window, (%@UI@'ModuleName'%.Text*)(&calendarDay->lastFree), x, y1, w, h1, (unsigned char*)"", font);
    %@UI@'ModuleName'%.ChangeTextBgColor(&calendarDay->lastFree.element, %'ModuleName'%.CALENDAR_DAY_COLOR_FREE_APPOINTMENT);
    %@UI@'ModuleName'%.EnableElementSelection(&calendarDay->lastFree);
    calendarDay->lastFree.isFreeAppointment = TRUE;
    calendarDay->lastFree.hour = (byte)(freeStartMinute/60);
    calendarDay->lastFree.minute = (byte)(freeStartMinute-60*calendarDay->lastFree.hour);
    calendarDay->lastFree.durationMinutes = (word)(freeEndMinute-freeStartMinute);
  }
}

%-INTERNAL_METHOD_END CreateCalDayClicks
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG CalendarDayWindowCallback
%define! Parwindow
%define! Parelement
%define! Parkind
%define! Pardata
%include Common\GeneralInternalGlobal.inc (CalendarDayWindowCallback)
static void CalendarDayWindowCallback(%'ModuleName'_Window *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind kind, %'ModuleName'_Pvoid data)
{
  %'ModuleName'_CalendarDay *calendarDay = (%'ModuleName'_CalendarDay*)window->parentE;
  bool longClick = FALSE;

  (void)data;                                                    %>40/* unused argument */
  if (calendarDay == NULL) {
    return;                                                      %>40/* something wrong */
  }
  if (kind==%@UI@'ModuleName'%.EVENT_CLICK || kind==%@UI@'ModuleName'%.EVENT_CLICK_LONG) {%>40/* have both click and release events: act on release */
    longClick = (bool)(kind==%@UI@'ModuleName'%.EVENT_CLICK_LONG);
    if (element==&(calendarDay->prevDay.element)) {
      if (longClick) {
        %'ModuleName'%.%ChangeCalendarDay(window, calendarDay, -7, 0);
      } else {
        %'ModuleName'%.%ChangeCalendarDay(window, calendarDay, -1, 0);
      }
    } else if (element==&(calendarDay->nextDay.element)) {
      if (longClick) {
        %'ModuleName'%.%ChangeCalendarDay(window, calendarDay, 7, 0);
      } else {
        %'ModuleName'%.%ChangeCalendarDay(window, calendarDay, 1, 0);
      }
    } else if (element==&(calendarDay->upStart.element)) {
      if (longClick) {
        %'ModuleName'%.%ChangeCalendarDay(window, calendarDay, 0, 4*%'ModuleName'%.%GetCalendarDayResolution());
      } else {
        %'ModuleName'%.%ChangeCalendarDay(window, calendarDay, 0, %'ModuleName'%.%GetCalendarDayResolution());
      }
    } else if (element==&(calendarDay->downStart.element)) {
      if (longClick) {
        %'ModuleName'%.%ChangeCalendarDay(window, calendarDay, 0, -4*%'ModuleName'%.%GetCalendarDayResolution());
      } else {
        %'ModuleName'%.%ChangeCalendarDay(window, calendarDay, 0, -%'ModuleName'%.%GetCalendarDayResolution());
      }
    } else { /* must be one of the appointments? Call user event handler */
      if (calendarDay->parentWindow != NULL && calendarDay->parentWindow->eventCallback != NULL) {
        calendarDay->parentWindow->eventCallback(window, element, %@UI@'ModuleName'%.EVENT_CALENDARDAY_APPOINTMENT_CLICK, NULL);
      }
    } /* if */
  } /* if */
}

%-INTERNAL_METHOD_END CalendarDayWindowCallback
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG CreateCalDayElems
%define! Parwindow
%define! Parx
%define! Pary
%define! Parwidth
%define! ParcalendarDay
%define! Parheight
%define! RetVal
%include Common\GeneralInternalGlobal.inc (CreateCalDayElems)
static byte CreateCalDayElems(%'ModuleName'_Window *window, %'ModuleName'_CalendarDay *calendarDay, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height)
{
  %@UI@'ModuleName'%.FontCallbacks *font;
  %@UI@'ModuleName'%.PixelColor color;
  %@UI@'ModuleName'%.PixelDim iconSize;
  %@UI@'ModuleName'%.PixelDim leftDayWidth, rightDayWidth;

  if (window == NULL || calendarDay == NULL) {
    return ERR_FAILED;
  }
  /* create << and >> text */
  font = %@Font@'ModuleName'%.GetFont();
  color = %@UI@'ModuleName'%.COLOR_%CalendarDayHeaderColor;
  iconSize = %@FontDisplay@'ModuleName'%.GetStringHeight((unsigned char*)%'ModuleName'%.CALENDAR_LEFT_DAY_STR, font, NULL);%>40/* determine header line height */
  leftDayWidth = (%@UI@'ModuleName'%.PixelDim)(%@FontDisplay@'ModuleName'%.GetStringWidth((unsigned char*)%'ModuleName'%.CALENDAR_LEFT_DAY_STR, font, NULL)+%'ModuleName'%.CALENDAR_PREV_NEXT_BORDER);
  rightDayWidth = (%@UI@'ModuleName'%.PixelDim)(%@FontDisplay@'ModuleName'%.GetStringWidth((unsigned char*)%'ModuleName'%.CALENDAR_RIGHT_DAY_STR, font, NULL)+%'ModuleName'%.CALENDAR_PREV_NEXT_BORDER);

  y += %'ModuleName'%.CALENDAR_DAY_LINE_WIDTH;                   %>40/* reserve space for top line */
  /* previous day */
  if (%@UI@'ModuleName'%.CreateText(window, &calendarDay->prevDay,
    (%@UI@'ModuleName'%.PixelDim)(x+%'ModuleName'%.CALENDAR_PREV_NEXT_BORDER), y, 0, iconSize, (unsigned char*)%'ModuleName'%.CALENDAR_LEFT_DAY_STR, font) != ERR_OK) {
    return ERR_FAILED;
  }
  %@UI@'ModuleName'%.ChangeTextBgColor(&calendarDay->prevDay.element, color);
  %@UI@'ModuleName'%.ChangeTextFgColor(&calendarDay->prevDay.element, %@UI@'ModuleName'%.COLOR_%CalendarDayHeaderTextColor);
  %@UI@'ModuleName'%.EnableElementSelection(&calendarDay->prevDay);
  /* time up */
  if (%@UI@'ModuleName'%.CreateIcon(window, &calendarDay->upStart,
       (%@UI@'ModuleName'%.PixelDim)(x+leftDayWidth),
       y, iconSize, iconSize, %@UI@'ModuleName'%.ICON_ARROW_DOWN
      ) != ERR_OK)
  {
    return ERR_FAILED;
  }
  calendarDay->upStart.fgColor = %@UI@'ModuleName'%.COLOR_%CalendarDayHeaderTextColor;
  calendarDay->upStart.element.prop.color = %'ModuleName'%.CALENDAR_DAY_COLOR_HEADER;%>40/* set background color */
  %@UI@'ModuleName'%.EnableElementSelection(&calendarDay->upStart);
  /* time down */
  if (%@UI@'ModuleName'%.CreateIcon(window, &calendarDay->downStart,
       (%@UI@'ModuleName'%.PixelDim)(x+width-iconSize-rightDayWidth),
       y, iconSize, iconSize, %@UI@'ModuleName'%.ICON_ARROW_UP
      ) != ERR_OK)
  {
    return ERR_FAILED;
  }
  calendarDay->downStart.fgColor = %@UI@'ModuleName'%.COLOR_%CalendarDayHeaderTextColor;
  calendarDay->downStart.element.prop.color = %'ModuleName'%.CALENDAR_DAY_COLOR_HEADER;%>40/* set background color */
  %@UI@'ModuleName'%.EnableElementSelection(&calendarDay->downStart);
  /* next day */
  if (%@UI@'ModuleName'%.CreateText(window, &calendarDay->nextDay,
       (%@UI@'ModuleName'%.PixelDim)(x+width-rightDayWidth),
       y, 0, iconSize, (unsigned char*)%'ModuleName'%.CALENDAR_RIGHT_DAY_STR, font
      ) != ERR_OK)
  {
    return ERR_FAILED;
  }
  %@UI@'ModuleName'%.ChangeTextBgColor(&calendarDay->nextDay.element, color);
  %@UI@'ModuleName'%.ChangeTextFgColor(&calendarDay->nextDay.element, %@UI@'ModuleName'%.COLOR_%CalendarDayHeaderTextColor);
  %@UI@'ModuleName'%.EnableElementSelection(&calendarDay->nextDay);
  CreateCalDayClicks(window, calendarDay, x, y, width, height);
  return ERR_OK;
}

%-INTERNAL_METHOD_END CreateCalDayElems
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateCalendarDay
%ifdef CreateCalendarDay
%define! Parwindow
%define! ParcalendarDay
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parstart
%define! RetVal
%include Common\UICalendarCreateCalendarDay.Inc
byte %'ModuleName'%.%CreateCalendarDay(%'ModuleName'_Window *window, %'ModuleName'_CalendarDay *calendarDay, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height, %'ModuleName'_CalendarDateTime *start)
{
  %@UI@'ModuleName'%.PixelColor bgColor = %@UI@'ModuleName'%.COLOR_%CalendarDayBackgroundColor;

  if (window == NULL || calendarDay == NULL) {
    return ERR_FAILED;
  }
  %@UI@'ModuleName'%.ElementInitCommon((%@UI@'ModuleName'%.Element*)calendarDay, %@UI@'ModuleName'%.CALENDARDAY,
    x, y, width, height,
    bgColor, (%@UI@'ModuleName'%.painterCallback)PaintCalendarDay);
  calendarDay->element.prop.flags |= %@UI@'ModuleName'%.FLAGS_IS_SUBWINDOW;
  calendarDay->start = *start;
  if (%@UI@'ModuleName'%.WindowAddElement(window, (%@UI@'ModuleName'%.Element*)calendarDay) != ERR_OK) {
    return ERR_FAILED;
  }
  calendarDay->parentWindow = window;
  /* create a window for the calendar day item */
  calendarDay->subWindow.next = NULL;
  calendarDay->subWindow.prop.x = x;
  calendarDay->subWindow.prop.y = y;
  calendarDay->subWindow.prop.width = width;
  calendarDay->subWindow.prop.height = height;
  calendarDay->subWindow.prop.color = bgColor;
  calendarDay->subWindow.first = NULL;
  calendarDay->subWindow.flags = %@UI@'ModuleName'%.FLAGS_WINDOW_INIT;
  calendarDay->subWindow.selectedE = NULL;
  calendarDay->subWindow.eventCallback = NULL;
  %@UI@'ModuleName'%.SetWindowEventCallback(&calendarDay->subWindow, CalendarDayWindowCallback);
  calendarDay->subWindow.parentE = (%@UI@'ModuleName'%.Element*)calendarDay;
  calendarDay->subWindow.updateAll = TRUE;
  return CreateCalDayElems(&calendarDay->subWindow, calendarDay, 0, 0, width, height);
}

%endif %- CreateCalendarDay
%-BW_METHOD_END CreateCalendarDay
%-************************************************************************************************************
%-BW_METHOD_BEGIN ChangeCalendarDay
%ifdef ChangeCalendarDay
%define! Parwindow
%define! ParchangeDays
%define! ParchangeMinutes
%define! ParcalendarDay
%include Common\UICalendarChangeCalendarDay.Inc
void %'ModuleName'%.%ChangeCalendarDay(%'ModuleName'_Window *window, %'ModuleName'_CalendarDay *calendarDay, signed char changeDays, int changeMinutes)
{
  %'ModuleName'%.CalendarDateTime *start = &calendarDay->start;
  static const byte monthDays[12] = {
    31, /* January has 31 days */
    28, /* special case with leap years (then it has 29 days) */
    31, /* March */
    30, /* April */
    31, /* May */
    30, /* June */
    31, /* July */
    31, /* August */
    30, /* Sept */
    31, /* Oct */
    30, /* Nov */
    31  /* Dec */
  }; /* table of all months of a year with the max day for a month */
  #define IS_LEAP_YEAR(year) (((((year)%%4)==0) && ((year)%%100)!=0) || ((year)%%400)==0)
  short dayMinutes;

  while (changeDays != 0 || changeMinutes != 0) {                %>40/* change the date/time */
    if(changeMinutes != 0) {
      dayMinutes = (short)(start->hour*60 + start->minute + changeMinutes);
      if (dayMinutes < 0) { /* move to previous day */
        changeDays--;
        dayMinutes += 24*60;
      } else if (dayMinutes>=24*60) {
        changeDays++;
        dayMinutes -= 24*60;
      }
      start->hour = (byte)(dayMinutes/60);
      start->minute = (byte)(dayMinutes%%60);
      changeMinutes = 0;                                         %>40/* done for the minutes! */
    }
    if (changeDays > 0) {
      if (start->day < monthDays[start->month-1]) {              %>40/* no month change */
        start->day++;
      } else {
        if (start->month==2 && start->day==28 && IS_LEAP_YEAR(start->year)) {%>40/* special case of leap month */
          start->day = 29; /* advance to 29 which is a leap day */
        } else {
          start->day = 1;
          start->month++;
          if (start->month > 12) {                               %>40/* need to handle change of year */
            start->month = 1;
            start->year++;
          }
          if (start->year > 3099) {                              %>40/* we do not go too much into the future */
            start->year = 3099;
          }
        }
      }
      changeDays--;
    } else if (changeDays < 0) { /* negative, move back */
      if (start->day > 1) {                                      %>40/* no month change */
        start->day--;
      } else {
        if (start->month > 1) {                                  %>40/* no change of year */
          start->month--;
        } else {                                                 %>40/* change of year */
          start->month = 12;
          if (start->year > 1900) {                              %>40/* we do not go below the year 1900 */
            start->year--;
          } else {
            start->year = 1900;
          }
        }
        start->day = monthDays[start->month-1];
        if (start->month==2 && start->day==28 && IS_LEAP_YEAR(start->year)) {%>40/* special case of leap month */
          start->day = 29; /* leap day */
        }
      }
      changeDays++;
    } /* move back or forward days */
  } /* while */
  calendarDay->nextDay.element.next = NULL;                      %>40/* this is our last item before all the calendarClickAppointments */
  calendarDay->subWindow.updateAll = TRUE;                       %>40/* force window refresh */
%ifdef OnCalendarGetAppointments
  CreateCalDayClicks(&calendarDay->subWindow, calendarDay, 0, 0, %@UI@'ModuleName'%.GetElementWidth(&calendarDay->subWindow), %@UI@'ModuleName'%.GetElementHeight(&calendarDay->subWindow));
%endif
  %@UI@'ModuleName'%.UpdateElement(window, (UI1_Element*)calendarDay);
}

%endif %- ChangeCalendarDay
%-BW_METHOD_END ChangeCalendarDay
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCalendarDayResolution
%ifdef GetCalendarDayResolution
%define! RetVal
%include Common\UICalendarGetCalendarDayResolution.Inc
#if 0
byte %'ModuleName'%.%GetCalendarDayResolution(void)
{
  /* method is implemented as macro in the header file */
}
#endif

%endif %- GetCalendarDayResolution
%-BW_METHOD_END GetCalendarDayResolution
%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnCalendarGetAppointments
%ifdef OnCalendarGetAppointments
%IMPLEMENTATION OnCalendarGetAppointments
%define! ParstartHint
%define! ParappointmentList
%include Common\UICalendarOnCalendarGetAppointments.Inc
void %OnCalendarGetAppointments(%'ModuleName'_CalendarDateTime *startHint, %'ModuleName'_CalendarAppointment **appointmentList)
{
  /* Write your code here ... */
}

%endif %- OnCalendarGetAppointments
%-BW_METHOD_END OnCalendarGetAppointments
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%IMPLEMENTATION OnEvent
%define! Parscreen
%define! Parwindow
%define! Parelement
%define! Parevent
%include Common\UICalendarOnEvent.Inc
void %OnEvent(%'ModuleName'_Screen *screen, %'ModuleName'_Window *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind event)
{
  /* Write your code here ... */
}

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
