%-Driver pre-generated by the Component Development Environment
%-      Copyright: 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Development Environment will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Erich Styger
%define DriverVersion 01.00
%define DriverDate    03/31/2013
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%define CDEversion Standard
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
  %-
%-
%INTERFACE
%define! Settings Common\MMA8451QSettings.Inc
%define! Abstract Common\MMA8451QAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%ifdef ParseCommand
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  1  /* set to 1 if method ParseCommand() is present, 0 otherwise */
%else
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  0 /* set to 1 if method ParseCommand() is present, 0 otherwise */
%endif %- ParseCommand
%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetRaw8XYZ
%ifdef GetRaw8XYZ
uint8_t %'ModuleName'%.%GetRaw8XYZ(uint8_t *xyz);
%define! Parxyz
%define!  RetVal
%include Common\MMA8451QGetRaw8XYZ.inc
%endif  %-GetRaw8XYZ
%-BW_METHOD_END GetRaw8XYZ

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
uint8_t %'ModuleName'%.%Deinit(void);
%define!  RetVal
%include Common\MMA8451QDeinit.inc
%endif  %-Deinit
%-BW_METHOD_END Deinit

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
uint8_t %'ModuleName'%.%Init(void);
%define!  RetVal
%include Common\MMA8451QInit.inc
%endif  %-Init
%-BW_METHOD_END Init

%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateX1g
%ifdef CalibrateX1g
void %'ModuleName'%.%CalibrateX1g(void);
%include Common\MMA8451QCalibrateX1g.Inc

%endif %- CalibrateX1g
%-BW_METHOD_END CalibrateX1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateY1g
%ifdef CalibrateY1g
void %'ModuleName'%.%CalibrateY1g(void);
%include Common\MMA8451QCalibrateY1g.Inc

%endif %- CalibrateY1g
%-BW_METHOD_END CalibrateY1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateZ1g
%ifdef CalibrateZ1g
void %'ModuleName'%.%CalibrateZ1g(void);
%include Common\MMA8451QCalibrateZ1g.Inc

%endif %- CalibrateZ1g
%-BW_METHOD_END CalibrateZ1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetXmg
%ifdef GetXmg
int16_t %'ModuleName'%.%GetXmg(void);
%define! RetVal
%include Common\MMA8451QGetXmg.Inc

%endif %- GetXmg
%-BW_METHOD_END GetXmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetYmg
%ifdef GetYmg
int16_t %'ModuleName'%.%GetYmg(void);
%define! RetVal
%include Common\MMA8451QGetYmg.Inc

%endif %- GetYmg
%-BW_METHOD_END GetYmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZmg
%ifdef GetZmg
int16_t %'ModuleName'%.%GetZmg(void);
%define! RetVal
%include Common\MMA8451QGetZmg.Inc

%endif %- GetZmg
%-BW_METHOD_END GetZmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawX
%ifdef MeasureGetRawX
word %'ModuleName'%.%MeasureGetRawX(void);
%define! RetVal
%include Common\MMA8451QMeasureGetRawX.Inc

%endif %- MeasureGetRawX
%-BW_METHOD_END MeasureGetRawX
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawY
%ifdef MeasureGetRawY
word %'ModuleName'%.%MeasureGetRawY(void);
%define! RetVal
%include Common\MMA8451QMeasureGetRawY.Inc

%endif %- MeasureGetRawY
%-BW_METHOD_END MeasureGetRawY
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawZ
%ifdef MeasureGetRawZ
word %'ModuleName'%.%MeasureGetRawZ(void);
%define! RetVal
%include Common\MMA8451QMeasureGetRawZ.Inc

%endif %- MeasureGetRawZ
%-BW_METHOD_END MeasureGetRawZ
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetXOffset
%ifdef GetXOffset
int16_t %'ModuleName'%.%GetXOffset(void);
%define! RetVal
%include Common\MMA8451QGetXOffset.Inc

%endif %- GetXOffset
%-BW_METHOD_END GetXOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetYOffset
%ifdef GetYOffset
int16_t %'ModuleName'%.%GetYOffset(void);
%define! RetVal
%include Common\MMA8451QGetYOffset.Inc

%endif %- GetYOffset
%-BW_METHOD_END GetYOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZOffset
%ifdef GetZOffset
int16_t %'ModuleName'%.%GetZOffset(void);
%define! RetVal
%include Common\MMA8451QGetZOffset.Inc

%endif %- GetZOffset
%-BW_METHOD_END GetZOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetX1gValue
%ifdef GetX1gValue
int16_t %'ModuleName'%.%GetX1gValue(void);
%define! RetVal
%include Common\MMA8451QGetX1gValue.Inc

%endif %- GetX1gValue
%-BW_METHOD_END GetX1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetY1gValue
%ifdef GetY1gValue
int16_t %'ModuleName'%.%GetY1gValue(void);
%define! RetVal
%include Common\MMA8451QGetY1gValue.Inc

%endif %- GetY1gValue
%-BW_METHOD_END GetY1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZ1gValue
%ifdef GetZ1gValue
int16_t %'ModuleName'%.%GetZ1gValue(void);
%define! RetVal
%include Common\MMA8451QGetZ1gValue.Inc

%endif %- GetZ1gValue
%-BW_METHOD_END GetZ1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetX
%ifdef GetX
int16_t %'ModuleName'%.%GetX(void);
%define! RetVal
%include Common\MMA8451QGetX.Inc

%endif %- GetX
%-BW_METHOD_END GetX
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetY
%ifdef GetY
int16_t %'ModuleName'%.%GetY(void);
%define! RetVal
%include Common\MMA8451QGetY.Inc

%endif %- GetY
%-BW_METHOD_END GetY
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZ
%ifdef GetZ
int16_t %'ModuleName'%.%GetZ(void);
%define! RetVal
%include Common\MMA8451QGetZ.Inc

%endif %- GetZ
%-BW_METHOD_END GetZ
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
byte %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io);
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\MMA8451QParseCommand.Inc

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\MMA8451QSettings.Inc
%define! Abstract Common\MMA8451QAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
/* External 3-axis accelerometer control register addresses */
#define MMA8451_CTRL_REG_1 0x2A
/* MMA8451 3-axis accelerometer control register bit masks */
#define MMA8451_ACTIVE_BIT_MASK 0x01
#define MMA8451_F_READ_BIT_MASK 0x02

/* External 3-axis accelerometer data register addresses */
#define MMA8451_OUT_X_MSB 0x01
#define MMA8451_OUT_X_LSB 0x02
#define MMA8451_OUT_Y_MSB 0x03
#define MMA8451_OUT_Y_LSB 0x04
#define MMA8451_OUT_Z_MSB 0x05
#define MMA8451_OUT_Z_LSB 0x06

#define MMA8451_I2C_ADDR   (%I2CSlaveAddress) /* I2C slave device address as set in the properties */

%if defined(CalibrateX1g) | defined(CalibrateY1g) | defined(CalibrateZ1g)
typedef struct {
  int16_t NxOff; /* offset for X axis */
  int16_t NyOff; /* offset for Y axis */
  int16_t NzOff; /* offset for Z axis */
  int16_t Nx1g;  /* value for 1g for X axis */
  int16_t Ny1g;  /* value for 1g for Y axis */
  int16_t Nz1g;  /* value for 1g for Z axis */
} tAccelCal;

/* default calibration values from component properties */
const tAccelCal InitialCalibration = { /* Initial default calibration values */
  %xCalibrationOffset, /* X offset */
  %yCalibrationOffset, /* Y offset */
  %zCalibrationOffset, /* Z offset */
  %x1gValue, /* X 1g */
  %y1gValue, /* Y 1g */
  %z1gValue  /* Z 1g */
};
static tAccelCal sCalValues; /* calibration values in RAM */

#define CalNxOff   sCalValues.NxOff
#define CalNyOff   sCalValues.NyOff
#define CalNzOff   sCalValues.NzOff
#define CalNx1g    sCalValues.Nx1g /* value for 1g */
#define CalNy1g    sCalValues.Ny1g /* value for 1g */
#define CalNz1g    sCalValues.Nz1g /* value for 1g */
%else
#define CalNxOff %xCalibrationOffset
#define CalNyOff %yCalibrationOffset
#define CalNzOff %zCalibrationOffset
#define CalNx1g  %x1gValue /* value for 1g */
#define CalNy1g  %y1gValue /* value for 1g */
#define CalNz1g  %z1gValue /* value for 1g */
%endif %- CalibrateY1g

#define zeroGValue           (0xffff/2)   /* this is the value for zero g: midpoint */
%if defined(Shell)

static uint8_t PrintStatus(const %@Shell@'ModuleName'%.StdIOType *io) {
  unsigned char buf[8];
  uint16_t val;

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"%'ModuleName'", (unsigned char*)"\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  raw", (unsigned char*)"0x", io->stdOut);
  val = %'ModuleName'%.MeasureGetRawX();
  buf[0] = '\0';
  %@Utility@'ModuleName'%.strcatNum16Hex(buf, sizeof(buf), (uint16_t)val);
  %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" (", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16u(val, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"), 0x", io->stdOut);

  val = %'ModuleName'%.MeasureGetRawY();
  buf[0] = '\0';
  %@Utility@'ModuleName'%.strcatNum16Hex(buf, sizeof(buf), (uint16_t)val);
  %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" (", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16u(val, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"), 0x", io->stdOut);

  val = %'ModuleName'%.MeasureGetRawZ();
  buf[0] = '\0';
  %@Utility@'ModuleName'%.strcatNum16Hex(buf, sizeof(buf), (uint16_t)val);
  %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" (", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16u(val, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)")\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  milli-g", (unsigned char*)"", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetXmg(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetYmg(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetZmg(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  raw+offset", (unsigned char*)"", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetX(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetY(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetZ(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  calibOffset", (unsigned char*)"", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetXOffset(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetYOffset(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetZOffset(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  calib 1g", (unsigned char*)"", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetX1gValue(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetY1gValue(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetZ1gValue(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);

  return ERR_OK;
}

static uint8_t PrintHelp(const %@Shell@'ModuleName'%.StdIOType *io) {
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"%'ModuleName'", (unsigned char*)"Group of %'ModuleName' commands\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  help|status", (unsigned char*)"Print help or status information\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  calibrate x|y|z", (unsigned char*)"Performs accelerometer calibration\r\n", io->stdOut);
  return ERR_OK;
}

%endif
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetRaw8XYZ
%ifdef GetRaw8XYZ
%define! Parxyz
%define! RetVal
%include Common\MMA8451QGetRaw8XYZ.inc
uint8_t %'ModuleName'%.%GetRaw8XYZ(uint8_t *xyz)
{
%CODE_BEGIN
  static const uint8_t addr = MMA8451_OUT_X_MSB;

  return %@I2C@'ModuleName'%.ReadAddress(MMA8451_I2C_ADDR, (uint8_t*)&addr, sizeof(addr), &xyz[0], sizeof(xyz));
%CODE_END
}
%endif %-GetRaw8XYZ
%-BW_METHOD_END GetRaw8XYZ

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%define! RetVal
%include Common\MMA8451QDeinit.inc
uint8_t %'ModuleName'%.%Deinit(void)
{
%CODE_BEGIN
  return ERR_OK; /* nothing to do */
%CODE_END
}
%endif %-Deinit
%-BW_METHOD_END Deinit

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%define! RetVal
%include Common\MMA8451QInit.inc
uint8_t %'ModuleName'%.%Init(void)
{
%CODE_BEGIN
  static const uint8_t addr = MMA8451_CTRL_REG_1;
  static const uint8_t data = MMA8451_F_READ_BIT_MASK|MMA8451_ACTIVE_BIT_MASK;
  /* F_READ: Fast read mode, data format limited to single byte (auto increment counter will skip LSB)
   * ACTIVE: Full scale selection
   */
%if defined(CalibrateX1g) | defined(CalibrateY1g) | defined(CalibrateZ1g)
  sCalValues.NxOff = InitialCalibration.NxOff;
  sCalValues.Nx1g  = InitialCalibration.Nx1g;
  sCalValues.NyOff = InitialCalibration.NyOff;
  sCalValues.Ny1g  = InitialCalibration.Ny1g;
  sCalValues.NzOff = InitialCalibration.NzOff;
  sCalValues.Nz1g  = InitialCalibration.Nz1g;
%endif %- CalibrateY1g
  return %@I2C@'ModuleName'%.WriteAddress(MMA8451_I2C_ADDR, (uint8_t*)&addr, sizeof(addr), (uint8_t*)&data, sizeof(data));
%CODE_END
}
%endif %-Init
%-BW_METHOD_END Init

%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateX1g
%ifdef CalibrateX1g
%include Common\MMA8451QCalibrateX1g.Inc
void %'ModuleName'%.%CalibrateX1g(void)
{
  /* assumption is that accelerometer is placed with 1g for X and 0g for Y and Z */
  uint32_t X=0, Y=0, Z=0;
  uint8_t i;

  /* Get the raw data */
  for (i=0; i<8; i++) {
   X += %'ModuleName'%.%MeasureGetRawX();
   Y += %'ModuleName'%.%MeasureGetRawY();
   Z += %'ModuleName'%.%MeasureGetRawZ();
  }
  /* build average of 8 measured values */
  X >>= 3;
  Y >>= 3;
  Z >>= 3;
  /* store the calibration values */
  sCalValues.Nx1g  = (int16_t)(X-zeroGValue); /* we have 1g on X */
  /* offset: both Y and Z shall have zero g (midpoint) */
  sCalValues.NyOff = (int16_t)(Y-zeroGValue);
  sCalValues.NzOff = (int16_t)(Z-zeroGValue);
}

%endif %- CalibrateX1g
%-BW_METHOD_END CalibrateX1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateY1g
%ifdef CalibrateY1g
%include Common\MMA8451QCalibrateY1g.Inc
void %'ModuleName'%.%CalibrateY1g(void)
{
  /* assumption is that accelerometer is placed with 1g for Y and 0g for X and Z */
  uint32_t X=0, Y=0, Z=0;
  uint8_t i;

  /* Get the raw data */
  for (i=0; i<8; i++) {
   X += %'ModuleName'%.%MeasureGetRawX();
   Y += %'ModuleName'%.%MeasureGetRawY();
   Z += %'ModuleName'%.%MeasureGetRawZ();
  }
  /* build average of 8 measured values */
  X >>= 3;
  Y >>= 3;
  Z >>= 3;
  /* store the calibration values */
  sCalValues.Ny1g  = (int16_t)(Y-zeroGValue); /* we have 1g on Y */
  /* offset: both X and Z shall have zero g (midpoint) */
  sCalValues.NxOff = (int16_t)(X-zeroGValue);
  sCalValues.NzOff = (int16_t)(Z-zeroGValue);
}

%endif %- CalibrateY1g
%-BW_METHOD_END CalibrateY1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateZ1g
%ifdef CalibrateZ1g
%include Common\MMA8451QCalibrateZ1g.Inc
void %'ModuleName'%.%CalibrateZ1g(void)
{
  /* assumption is that accelerometer is placed with 1g for Z and 0g for X and Y */
  uint32_t X=0, Y=0, Z=0;
  uint8_t i;

  /* Get the raw data */
  for (i=0; i<8; i++) {
   X += %'ModuleName'%.%MeasureGetRawX();
   Y += %'ModuleName'%.%MeasureGetRawY();
   Z += %'ModuleName'%.%MeasureGetRawZ();
  }
  /* build average of 8 measured values */
  X >>= 3;
  Y >>= 3;
  Z >>= 3;
  /* store the calibration values */
  sCalValues.Nz1g  = (int16_t)(Z-zeroGValue); /* we have 1g on Z */
  /* offset: both X and Y shall have zero g (midpoint) */
  sCalValues.NxOff = (int16_t)(X-zeroGValue);
  sCalValues.NyOff = (int16_t)(Y-zeroGValue);
}

%endif %- CalibrateZ1g
%-BW_METHOD_END CalibrateZ1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetXmg
%ifdef GetXmg
%define! RetVal
%include Common\MMA8451QGetXmg.Inc
int16_t %'ModuleName'%.%GetXmg(void)
{
  int32_t L;

  L = %'ModuleName'%.%MeasureGetRawX();
  L -= CalNxOff; /* apply offset */
  L -= zeroGValue; /* get based to zero g */
  L *= 1000; /* scale to milli g */
  L /= (CalNx1g-CalNxOff); /* apply 1g calibrated value */
  return (int16_t)L;
}

%endif %- GetXmg
%-BW_METHOD_END GetXmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetYmg
%ifdef GetYmg
%define! RetVal
%include Common\MMA8451QGetYmg.Inc
int16_t %'ModuleName'%.%GetYmg(void)
{
  int32_t L;

  L = %'ModuleName'%.%MeasureGetRawY();
  L -= CalNyOff; /* apply offset */
  L -= zeroGValue; /* get based to zero g */
  L *= 1000; /* scale to milli g */
  L /= (CalNy1g-CalNyOff); /* apply 1g calibrated value */
  return (int16_t)L;
}

%endif %- GetYmg
%-BW_METHOD_END GetYmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZmg
%ifdef GetZmg
%define! RetVal
%include Common\MMA8451QGetZmg.Inc
int16_t %'ModuleName'%.%GetZmg(void)
{
  int32_t L;

  L = %'ModuleName'%.%MeasureGetRawZ();
  L -= CalNzOff; /* apply offset */
  L -= zeroGValue; /* get based to zero g */
  L *= 1000; /* scale to milli g */
  L /= (CalNz1g-CalNzOff); /* apply 1g calibrated value */
  return (int16_t)L;
}

%endif %- GetZmg
%-BW_METHOD_END GetZmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawX
%ifdef MeasureGetRawX
%define! RetVal
%include Common\MMA8451QMeasureGetRawX.Inc
word %'ModuleName'%.%MeasureGetRawX(void)
{
  uint16_t val;
  uint8_t xyz[3];

  %'ModuleName'%.%GetRaw8XYZ(&xyz[0]);
  val = xyz[0]; /*! \todo NYI */
  return val;
}

%endif %- MeasureGetRawX
%-BW_METHOD_END MeasureGetRawX
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawY
%ifdef MeasureGetRawY
%define! RetVal
%include Common\MMA8451QMeasureGetRawY.Inc
word %'ModuleName'%.%MeasureGetRawY(void)
{
  uint16_t val;
  uint8_t xyz[3];

  %'ModuleName'%.%GetRaw8XYZ(&xyz[0]);
  val = xyz[1]; /*! \todo NYI */
  return val;
}

%endif %- MeasureGetRawY
%-BW_METHOD_END MeasureGetRawY
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawZ
%ifdef MeasureGetRawZ
%define! RetVal
%include Common\MMA8451QMeasureGetRawZ.Inc
word %'ModuleName'%.%MeasureGetRawZ(void)
{
  uint16_t val;
  uint8_t xyz[3];

  %'ModuleName'%.%GetRaw8XYZ(&xyz[0]);
  val = xyz[2]; /*! \todo NYI */
  return val;
}

%endif %- MeasureGetRawZ
%-BW_METHOD_END MeasureGetRawZ
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetXOffset
%ifdef GetXOffset
%define! RetVal
%include Common\MMA8451QGetXOffset.Inc
int16_t %'ModuleName'%.%GetXOffset(void)
{
  return CalNxOff;
}

%endif %- GetXOffset
%-BW_METHOD_END GetXOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetYOffset
%ifdef GetYOffset
%define! RetVal
%include Common\MMA8451QGetYOffset.Inc
int16_t %'ModuleName'%.%GetYOffset(void)
{
  return CalNyOff;
}

%endif %- GetYOffset
%-BW_METHOD_END GetYOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZOffset
%ifdef GetZOffset
%define! RetVal
%include Common\MMA8451QGetZOffset.Inc
int16_t %'ModuleName'%.%GetZOffset(void)
{
  return CalNzOff;
}

%endif %- GetZOffset
%-BW_METHOD_END GetZOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetX1gValue
%ifdef GetX1gValue
%define! RetVal
%include Common\MMA8451QGetX1gValue.Inc
int16_t %'ModuleName'%.%GetX1gValue(void)
{
  return CalNx1g;
}

%endif %- GetX1gValue
%-BW_METHOD_END GetX1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetY1gValue
%ifdef GetY1gValue
%define! RetVal
%include Common\MMA8451QGetY1gValue.Inc
int16_t %'ModuleName'%.%GetY1gValue(void)
{
  return CalNy1g;
}

%endif %- GetY1gValue
%-BW_METHOD_END GetY1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZ1gValue
%ifdef GetZ1gValue
%define! RetVal
%include Common\MMA8451QGetZ1gValue.Inc
int16_t %'ModuleName'%.%GetZ1gValue(void)
{
  return CalNz1g;
}

%endif %- GetZ1gValue
%-BW_METHOD_END GetZ1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetX
%ifdef GetX
%define! RetVal
%include Common\MMA8451QGetX.Inc
int16_t %'ModuleName'%.%GetX(void)
{
  uint16_t value;

  value = %'ModuleName'%.%MeasureGetRawX();
  value -= CalNxOff; /* adjust with calibration offset */
  value -= zeroGValue; /* adjust with midpoint zero g value */
  return (int16_t)value;
}

%endif %- GetX
%-BW_METHOD_END GetX
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetY
%ifdef GetY
%define! RetVal
%include Common\MMA8451QGetY.Inc
int16_t %'ModuleName'%.%GetY(void)
{
  uint16_t value;

  value = %'ModuleName'%.%MeasureGetRawY();
  value -= CalNyOff; /* adjust with calibration offset */
  value -= zeroGValue; /* adjust with midpoint zero g value */
  return (int16_t)value;
}

%endif %- GetY
%-BW_METHOD_END GetY
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZ
%ifdef GetZ
%define! RetVal
%include Common\MMA8451QGetZ.Inc
int16_t %'ModuleName'%.%GetZ(void)
{
  uint16_t value;

  value = %'ModuleName'%.%MeasureGetRawZ();
  value -= CalNzOff; /* adjust with calibration offset */
  value -= zeroGValue; /* adjust with midpoint zero g value */
  return (int16_t)value;
}

%endif %- GetZ
%-BW_METHOD_END GetZ
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\MMA8451QParseCommand.Inc
byte %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io)
{
  if (%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_HELP)==0 || %@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' help")==0) {
    *handled = TRUE;
    return PrintHelp(io);
  } else if ((%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_STATUS)==0) || (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' status")==0)) {
    *handled = TRUE;
    return PrintStatus(io);
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' calibrate x")==0) {
    %'ModuleName'%.CalibrateX1g();
    *handled = TRUE;
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' calibrate y")==0) {
    %'ModuleName'%.CalibrateY1g();
    *handled = TRUE;
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' calibrate z")==0) {
    %'ModuleName'%.CalibrateZ1g();
    *handled = TRUE;
  }
  return ERR_OK;
}

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Write code here ... */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
