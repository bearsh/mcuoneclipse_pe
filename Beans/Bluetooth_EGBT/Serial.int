<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>Serial</Name>
  <Description>Interface "Bluetooth_EGBT\Serial" for component Bluetooth_EGBT, generated by Component Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.003</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>RecvChar</Name>
        <Symbol>RecvChar</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>If any data is received, this method returns one character, otherwise it returns an error code (it does not wait for data). This method is enabled only if the receiver property is enabled.&lt;BR /&gt;\n
&lt;B&gt;Note:&lt;/B&gt; Because the preferred method to handle error and break exception in the interrupt mode is to use events &lt;a href="AsynchroSerialEvents.html#OnError"&gt;OnError&lt;/a&gt; and &lt;a href="AsynchroSerialEvents.html#OnBreak"&gt;OnBreak&lt;/a&gt; the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an exception in interrupt mode is returned only if there is a valid character ready to be read.\n
&lt;!---VER_SPEC ~56800~ ^^ || DON'T CHANGE THIS LINE--&gt;\n
&lt;div class="versionspec"&gt;\n
&lt;B CLASS="VSP"&gt;\n
Version specific information for Freescale 56800 derivatives\n
&lt;/B&gt;\n
&lt;br/&gt;DMA mode:&lt;BR /&gt;\n
If DMA controller is available on the selected CPU and the receiver is configured to use DMA controller then this method only sets the selected DMA channel. Then the status of the DMA transfer can be checked using GetCharsInRxBuf method. See an example of a typical usage for details about the communication using DMA.\n
&lt;/div&gt;\n
&lt;!---VER_SPEC_END  DON'T CHANGE THIS LINE--&gt;</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code, possible codes:&lt;br/&gt; \n     ERR_OK - OK&lt;br/&gt; \n     ERR_SPEED - This device does not work in the active speed mode&lt;br/&gt; \n     ERR_RXEMPTY - No data in receiver&lt;br/&gt; \n     ERR_BREAK - Break character is detected (only when the &lt;a href="AsynchroSerialProperties.html#IntService"&gt;Interrupt service&lt;/a&gt; property is disabled and the &lt;a href="AsynchroSerialProperties.html#SerBreak"&gt;Break signal&lt;/a&gt; property is enabled)&lt;br/&gt; \n     ERR_COMMON - common error occurred (the &lt;a href="#GetError"&gt;GetError&lt;/a&gt; method can be used for error specification)&lt;br/&gt; \n&lt;!---VER_SPEC ~56800~ ^^ || DON'T CHANGE THIS LINE--&gt;\n&lt;div class="versionspec"&gt;\n&lt;B CLASS="VSP"&gt;\nVersion specific information for Freescale 56800 derivatives\n&lt;/B&gt;\n&lt;br/&gt;\nDMA mode:&lt;br/&gt; \nIf DMA controller is available on the selected CPU and the receiver is configured to use DMA controller then only ERR_OK, ERR_RXEMPTY, and ERR_SPEED error code can be returned from this method.&lt;br/&gt;\n&lt;/div&gt;\n&lt;!---VER_SPEC_END  DON'T CHANGE THIS LINE--&gt;</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>Chr</ParName>
          <ParType>TComData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to a received character</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(%'ModuleName'_TComData *Chr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SendBlock</Name>
        <Symbol>SendBlock</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sends a block of characters to the channel.&lt;BR /&gt;\n
This method is available only if non-zero length of the output buffer is defined and the transmitter property is enabled.&lt;BR /&gt;\n
&lt;!---VER_SPEC ~56800~ ^^ || DON'T CHANGE THIS LINE--&gt;\n
&lt;div class="versionspec"&gt;\n
&lt;B CLASS="VSP"&gt;\n
Version specific information for Freescale 56800 derivatives\n
&lt;/B&gt;\n
&lt;br/&gt;DMA mode:&lt;BR /&gt;\n
If DMA controller is available on the selected CPU and the transmitter is configured to use DMA controller then this method only sets the selected DMA channel. Then the status of the DMA transfer can be checked using GetCharsInTxBuf method. See typical usage for details about communication using DMA.\n
&lt;/div&gt;\n
&lt;!---VER_SPEC_END  DON'T CHANGE THIS LINE--&gt;</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code, possible codes:\n     ERR_OK - OK\n     ERR_SPEED - This device does not work in the active speed mode\n     ERR_TXFULL - It was not possible to send requested number of bytes</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>Ptr</ParName>
          <ParType>TComData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the block of data to send</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Size</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the block</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Snd</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to number of data that are sent (moved to buffer)</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(%'ModuleName'_TComData *Ptr, word Size, word *Snd)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ClearRxBuf</Name>
        <Symbol>ClearRxBuf</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Clears the receive buffer.&lt;BR /&gt;\n
This method is available only if non-zero length of the input buffer is defined and the receiver property is enabled.\n
&lt;!---VER_SPEC ~56800~ ^^ || DON'T CHANGE THIS LINE--&gt;\n
&lt;div class="versionspec"&gt;\n
&lt;B CLASS="VSP"&gt;\n
Version specific information for Freescale 56800 derivatives\n
&lt;/B&gt;\n
&lt;br/&gt;DMA mode:&lt;BR /&gt;\n
If DMA controller is available on the selected CPU and the receiver is configured to use DMA controller then this method only stops selected DMA channel.\n
&lt;/div&gt;\n
&lt;!---VER_SPEC_END  DON'T CHANGE THIS LINE--&gt;</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code, possible codes:\n     ERR_OK - OK\n     ERR_SPEED - This device does not work in the active speed mode</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetCharsInRxBuf</Name>
        <Symbol>GetCharsInRxBuf</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the number of characters in the input buffer. This method is available only if the receiver property is enabled.\n
&lt;!---VER_SPEC ~56800~ ^^ || DON'T CHANGE THIS LINE--&gt;\n
&lt;div class="versionspec"&gt;\n
&lt;B CLASS="VSP"&gt;\n
Version specific information for Freescale 56800 derivatives\n
&lt;/B&gt;\n
&lt;br/&gt;DMA mode:&lt;BR /&gt;\n
If DMA controller is available on the selected CPU and the receiver is configured to use DMA controller then this method returns the number of characters in the receive buffer.\n
&lt;/div&gt;\n
&lt;!---VER_SPEC_END  DON'T CHANGE THIS LINE--&gt;</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>16bit unsigned</ReturnType>
        <RetHint>The number of characters in the input buffer.</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>word #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>Serial</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>TError</Name>
      <Hint>Error flags. For languages which don't support bit access is byte access only to error flags possible.</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef union {\n
  byte err;\n
  struct {\n
    bool OverRun  : 1;   /* Overrun error flag */\n
    bool Framing  : 1;   /* Framing error flag */\n
    bool Parity   : 1;   /* Parity error flag */\n
    bool RxBufOvf : 1;   /* Rx buffer full error flag */\n
    bool Noise    : 1;   /* Noise error flag */\n
    bool Break    : 1;   /* Break detect */\n
    bool LINSync  : 1;   /* LIN synchronization error */\n
    bool BitError  : 1;   /* Bit error flag - mismatch to the expected value happened. */\n
  } errName;\n
} %'ModuleName'_TError; /* Error flags. For languages which don't support bit access is byte access only to error flags possible. */\n
</PreparedHint>
      <Type>typedef union {\n
  byte err;\n
  struct {\n
    bool OverRun  : 1;   %&gt;40/* Overrun error flag */\n
    bool Framing  : 1;   %&gt;40/* Framing error flag */\n
    bool Parity   : 1;   %&gt;40/* Parity error flag */\n
    bool RxBufOvf : 1;   %&gt;40/* Rx buffer full error flag */\n
    bool Noise    : 1;   %&gt;40/* Noise error flag */\n
    bool Break    : 1;   %&gt;40/* Break detect */\n
    bool LINSync  : 1;   %&gt;40/* LIN synchronization error */\n
    bool BitError  : 1;   %&gt;40/* Bit error flag - mismatch to the expected value happened. */\n
  } errName;\n
} %'ModuleName'_TError;</Type>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>TComData</Name>
      <Hint>User type for communication. Size of this type depends on the communication data witdh.</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef word %'ModuleName'_TComData ;/* User type for communication. Size of this type depends on the communication data witdh. */\n
</PreparedHint>
      <Type>16bit unsigned</Type>
    </Type>
  </UserTypes>
</Interface>
