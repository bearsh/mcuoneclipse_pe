<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>Timeout</Name>
  <Description>Interface "24AA_EEPROM\Timeout" for component 24AA_EEPROM, generated by Component Wizard</Description>
  <Author>Author</Author>
  <Version>01.000</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>GetCounter</Name>
        <Symbol>GetCounter</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Initializes a new timeout counter and returns the handle to it. At the end, use LeaveCounter() to free up the resource.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>CounterHandle</ReturnType>
        <RetHint>Handle to the counter, to be used for further API calls.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>nofTicks</ParName>
          <ParType>CounterType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Number of ticks for the counter until it expires.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>CounterHandle #M#_#C#(CounterType nofTicks)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>LeaveCounter</Name>
        <Symbol>LeaveCounter</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>To be called to return the counter. Note that a counter always should be returned so it can be reused.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>handle</ParName>
          <ParType>CounterHandle</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Counter handle</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(CounterHandle handle)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>CounterExpired</Name>
        <Symbol>CounterExpired</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns true if the timeout counter has been expired</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>Boolean</ReturnType>
        <RetHint>Returns TRUE if the counter has been expired, FALSE otherwise</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>handle</ParName>
          <ParType>CounterHandle</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>The timeout handle retrieved using GetCounter()</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>bool #M#_#C#(CounterHandle handle)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>Timeout</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>CounterType</Name>
      <Hint>Base type of counter which holds the counting value</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef int16_t %'ModuleName'_CounterType ;/* Base type of counter which holds the counting value */\n
</PreparedHint>
      <Type>16bit signed</Type>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>CounterHandle</Name>
      <Hint>Type for the timeout counter handle.</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef byte %'ModuleName'_CounterHandle ;/* Type for the timeout counter handle. */\n
</PreparedHint>
      <Type>8bit unsigned</Type>
    </Type>
  </UserTypes>
</Interface>
