<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>Utility</Name>
  <Description>Interface "24AA_EEPROM\Utility" for component 24AA_EEPROM, generated by Component Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.001</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>Num16uToStr</Name>
        <Symbol>Num16uToStr</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Converts a signed 16bit value into a string.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to be converted.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, word val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcat</Name>
        <Symbol>strcat</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Same as normal strcat, but safe as it does not write beyond the buffer.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>src</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to source string.</ParHint>
          <ParUserDeclaration>const unsigned char *src</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, const unsigned char *src)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcpy</Name>
        <Symbol>strcpy</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Same as normal strcpy, but safe as it does not write beyond the buffer.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>src</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to source string.</ParHint>
          <ParUserDeclaration>const unsigned char *src</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, const unsigned char *src)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum8Hex</Name>
        <Symbol>strcatNum8Hex</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 8bit unsigned value to a buffer as hex number (without a 0x prefix).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>num</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, byte num)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcmp</Name>
        <Symbol>strcmp</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Wrapper to the standard strcmp() routine</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>16bit signed</ReturnType>
        <RetHint>Returns zero if the two strings are the same</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>str1</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string</ParHint>
          <ParUserDeclaration>const char *</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>str2</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string</ParHint>
          <ParUserDeclaration>const char *</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int16_t #M#_#C#(const char *, const char *)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strncmp</Name>
        <Symbol>strncmp</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Wrapper to the standard strncmp() routine</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>16bit signed</ReturnType>
        <RetHint>Returns zero if the two strings are the same</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>str1</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string</ParHint>
          <ParUserDeclaration>const char *</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>str2</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string</ParHint>
          <ParUserDeclaration>const char *</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>size</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint/>
          <ParUserDeclaration>size_t size</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int16_t #M#_#C#(const char *, const char *, size_t size)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ScanHex16uNumber</Name>
        <Symbol>ScanHex16uNumber</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Scans a hexadecimal 16bit number, starting with 0x</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>String to scan, starting with 0x.. It returns as well until where it has scanned</ParHint>
          <ParUserDeclaration>const unsigned char **str</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to value</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char **str, word *val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>Utility</Template>
  </Registration>
  <UserTypes>
    <EmptySection_DummyValue/>
  </UserTypes>
</Interface>
