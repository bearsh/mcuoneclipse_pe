<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>I2C</Name>
  <Description>Interface 24AA_EEPROM\I2C for bean 24AA_EEPROM, generated by Bean Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.004</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>SelectSlave</Name>
        <Symbol>SelectSlave</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Selects the slave device on the bus.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>i2cAddr</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>I2C Address of device</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(byte i2cAddr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ReadBlock</Name>
        <Symbol>ReadBlock</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Read from the device a block.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>data</ParName>
          <ParType>pointer</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Read buffer</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dataSize</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of read buffer</ParHint>
        </Parameter>
        <Parameter>
          <ParName>flags</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>flags for the transaction</ParHint>
          <ParUserDeclaration>%'ModuleName'_EnumSendFlags flags</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(void* data, word dataSize, %'ModuleName'_EnumSendFlags flags)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>WriteBlock</Name>
        <Symbol>WriteBlock</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Write a block to the device.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>data</ParName>
          <ParType>pointer</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Data write buffer</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dataSize</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint/>
        </Parameter>
        <Parameter>
          <ParName>flags</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>flags for the transaction</ParHint>
          <ParUserDeclaration>%'ModuleName'_EnumSendFlags flags</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(void* data, word dataSize, %'ModuleName'_EnumSendFlags flags)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>GenericI2C</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>TTxAbortStatus</Name>
      <Hint>Status flags. For languages which don't support bit access is byte or word (depend on CPU) access only to status flags possible.</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef union {n  word status;n  struct {n    bool Address7NACK    : 1;   /* Abort 7B address No Acknowledge */n    bool Address1NACK    : 1;   /* Abort 10B address1 No Acknowledge */n    bool Address2NACK    : 1;   /* Abort 10B address2 No Acknowledge */n    bool TxDataNACK      : 1;   /* Abort transmit data No Acknowledge */n    bool GeneralCallNACK : 1;   /* Abort General call No Acknowledge */n    bool GeneralCallRead : 1;   /* Abort General call read */n    bool                 : 1;n    bool StartByteACK    : 1;   /* Abort Start byte Acknowledge detect */n    bool                 : 1;n    bool StartByteNoRST  : 1;   /* Abort Start byte no repeated start */n    bool Read10BNoRST    : 1;   /* Abort 10B read no repeated start */n    bool MasterDisabled  : 1;   /* Abort Master disabled */n    bool ArbitLost       : 1;   /* Arbitration lost */n    bool SlavelushtxFIFO : 1;   /* Abort Slave flush Tx FIFO */n    bool SlaveArbitLost  : 1;   /* Slave arbitration lost */n    bool SlaveReadInTx   : 1;   /* Abort Slave read in transmit */n  } statusName;n} %'ModuleName'_TTxAbortStatus; /* Status flags. For languages which don't support bit access is byte or word (depend on CPU) access only to status flags possible. */\n
</PreparedHint>
      <Specific>&lt;!---VER_SPEC ~~ ^^ |56F802x,56F803x| DON'T CHANGE THIS LINE--&gt;</Specific>
      <Type>typedef union {n  word status;n  struct {n    bool Address7NACK    : 1;   /* Abort 7B address No Acknowledge */n    bool Address1NACK    : 1;   /* Abort 10B address1 No Acknowledge */n    bool Address2NACK    : 1;   /* Abort 10B address2 No Acknowledge */n    bool TxDataNACK      : 1;   /* Abort transmit data No Acknowledge */n    bool GeneralCallNACK : 1;   /* Abort General call No Acknowledge */n    bool GeneralCallRead : 1;   /* Abort General call read */n    bool                 : 1;n    bool StartByteACK    : 1;   /* Abort Start byte Acknowledge detect */n    bool                 : 1;n    bool StartByteNoRST  : 1;   /* Abort Start byte no repeated start */n    bool Read10BNoRST    : 1;   /* Abort 10B read no repeated start */n    bool MasterDisabled  : 1;   /* Abort Master disabled */n    bool ArbitLost       : 1;   /* Arbitration lost */n    bool SlavelushtxFIFO : 1;   /* Abort Slave flush Tx FIFO */n    bool SlaveArbitLost  : 1;   /* Slave arbitration lost */n    bool SlaveReadInTx   : 1;   /* Abort Slave read in transmit */n  } statusName;n} %'ModuleName'_TTxAbortStatus;</Type>
      <HWTestType>pointer</HWTestType>
    </Type>
  </UserTypes>
</Interface>
