<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>UI</Name>
  <Description>Interface UICalendar\UI for bean UICalendar, generated by Bean Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.008</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <EmptySection_DummyValue/>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>UI</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>PixelColor</Name>
      <Hint>type large enough to hold the color information</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef %@Display@'ModuleName'%.Color %'ModuleName'%.PixelColor; /* type large enough to hold the color information */\n
</PreparedHint>
      <Type>typedef %@Display@'ModuleName'%.Color %'ModuleName'%.PixelColor;</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>PixelDim</Name>
      <Hint>type big enough to hold the x and y coordinates</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef %@Display@'ModuleName'%.PixelDim %'ModuleName'%.PixelDim; /* type big enough to hold the x and y coordinates */\n
</PreparedHint>
      <Type>typedef %@Display@'ModuleName'%.PixelDim %'ModuleName'%.PixelDim;</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>painterCallback</Name>
      <Hint>callback to be called to paint the element</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef byte (*%'ModuleName'%.painterCallback) (struct _UIWindow *window, struct _UIElement *element); /* callback to be called to paint the element */\n
</PreparedHint>
      <Type>typedef byte (*%'ModuleName'%.painterCallback) (struct _UIWindow *window, struct _UIElement *element);</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>ElementType</Name>
      <Hint>Alias to element type enumeration</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to element type enumeration */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>FontCallbacks</Name>
      <Hint>Callback to retrieve font information.</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef GFONT_Callbacks %'ModuleName'%.FontCallbacks; /* Callback to retrieve font information. */\n
</PreparedHint>
      <Type>typedef GFONT_Callbacks %'ModuleName'%.FontCallbacks;</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Header</Name>
      <Hint>Alias for header element</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias for header element */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Text</Name>
      <Hint>Alias for StaticText element</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias for StaticText element */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Window</Name>
      <Hint>Alias to Window element.</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to Window element. */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Element</Name>
      <Hint>Alias to Element</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to Element */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>CheckBox</Name>
      <Hint>Alias to checkbox element type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to checkbox element type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Button</Name>
      <Hint>Alias to button element type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to button element type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>BarGraph</Name>
      <Hint>Alias to BarGraph type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to BarGraph type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>ScrollMenu</Name>
      <Hint>Alias to ScrollMenu type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to ScrollMenu type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>CalendarDay</Name>
      <Hint>Calendar day element type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Calendar day element type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>CalendarDateTime</Name>
      <Hint>Alias to CalendarDateTime type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to CalendarDateTime type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>CalendarAppointment</Name>
      <Hint>Alias to calendar appointment</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to calendar appointment */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PCalendarAppointment</Name>
      <Hint>Pointer to a calendar appointment</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef %'ModuleName'_CalendarAppointment* %'ModuleName'_PCalendarAppointment ; /* Pointer to a calendar appointment */\n
</PreparedHint>
      <Type>CalendarAppointment</Type>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Icon</Name>
      <Hint>Alias to icon element type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to icon element type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>IconType</Name>
      <Hint>Alias to icon type enumeration.</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to icon type enumeration. */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Screen</Name>
      <Hint>Alias to screen type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to screen type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PWindow</Name>
      <Hint>Pointer to Window element</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef %'ModuleName'_Window* %'ModuleName'_PWindow ; /* Pointer to Window element */\n
</PreparedHint>
      <Type>Window</Type>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PElement</Name>
      <Hint>Pointer to element</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef %'ModuleName'_Element* %'ModuleName'_PElement ; /* Pointer to element */\n
</PreparedHint>
      <Type>Element</Type>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>EventCallbackKind</Name>
      <Hint>different kinds of window event call back</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* different kinds of window event call back */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PScreen</Name>
      <Hint>pointer to screen</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef %'ModuleName'_Screen* %'ModuleName'_PScreen ; /* pointer to screen */\n
</PreparedHint>
      <Type>Screen</Type>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>DisplayOrientation</Name>
      <Hint/>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
  </UserTypes>
</Interface>
