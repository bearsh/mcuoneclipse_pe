<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>Idea</Name>
  <Description>Interface SSEC\Idea for bean SSEC, generated by Bean Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.003</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>InitKey</Name>
        <Symbol>InitKey</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Initializes key and other parameters of the Idea algorithm</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <ReadOnly>true</ReadOnly>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>IV</ParName>
          <ParType>pointer</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Pointer to initialization vector used in OFB and CFB modes (two 32bit numbers)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>CParam</ParName>
          <ParType>TCryptParam</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to parameters of the Idea algorithm</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void* IV, %'ModuleName'_TCryptParam *CParam)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Encrypt</Name>
        <Symbol>Encrypt</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Encrypts a single data block (8 bytes)</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <ReadOnly>true</ReadOnly>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>Src</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to block that should be encrypted</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Dest</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to result of the encryption process</ParHint>
        </Parameter>
        <Parameter>
          <ParName>CParam</ParName>
          <ParType>TCryptParam</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to parameters of the Idea algorithm</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *Src, byte *Dest, %'ModuleName'_TCryptParam *CParam)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Decrypt</Name>
        <Symbol>Decrypt</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Decrypts a single block of data (8 bytes)</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <ReadOnly>true</ReadOnly>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>Src</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to block that should be decrypted</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Dest</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to result of the decryption process</ParHint>
        </Parameter>
        <Parameter>
          <ParName>CParam</ParName>
          <ParType>TCryptParam</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to parameters of the Idea algorithm</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *Src, byte *Dest, %'ModuleName'_TCryptParam *CParam)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>LoadData16</Name>
        <Symbol>LoadData16</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Loads 16bit number from the specified address</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <ReadOnly>true</ReadOnly>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>TData16</ReturnType>
        <RetHint>16bit number (word)</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>Src</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to source of the loaded number</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>TData16 #M#_#C#(byte *Src)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>StoreData16</Name>
        <Symbol>StoreData16</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Stores 16bit number to the specified address</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <ReadOnly>true</ReadOnly>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>Data</ParName>
          <ParType>TData16</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Stored 16bit number</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Dest</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(TData16 Data, byte *Dest)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>KeyToHex</Name>
        <Symbol>KeyToHex</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Gets a hexadecimal number representing value of the key</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>CParam</ParName>
          <ParType>TCryptParam</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to parameters of the Idea algorithm</ParHint>
        </Parameter>
        <Parameter>
          <ParName>KeyString</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string representing hexadecimal value of the key (32 chars length)</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_TCryptParam *CParam, char *KeyString)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetKeyHex</Name>
        <Symbol>SetKeyHex</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Converts 32chars string (hexadecimal value) to the number representing key</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>Key</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string representing hexadecimal 128bit number</ParHint>
        </Parameter>
        <Parameter>
          <ParName>CParam</ParName>
          <ParType>TCryptParam</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to parameters of the Idea algorithm</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(char *Key, %'ModuleName'_TCryptParam *CParam)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EncryptBlock</Name>
        <Symbol>EncryptBlock</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Encrypts requested count of data blocks</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>Src</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the array of the source data blocks (8 bytes/block)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Dest</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the array of the destination data blocks (8 bytes/block)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Blocks</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Number of the encrypted blocks</ParHint>
        </Parameter>
        <Parameter>
          <ParName>CParam</ParName>
          <ParType>TCryptParam</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to parameters of the Idea algorithm</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *Src, byte *Dest, word Blocks, %'ModuleName'_TCryptParam *CParam)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>DecryptBlock</Name>
        <Symbol>DecryptBlock</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Decrypts requested count of the data blocks</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>Src</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the array of the source data blocks (8 bytes/block)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Dest</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the array of the destination data blocks (8 bytes/block)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Blocks</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Pointer to number of the decrypted blocks</ParHint>
        </Parameter>
        <Parameter>
          <ParName>CParam</ParName>
          <ParType>TCryptParam</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to parameters of the Idea algorithm</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *Src, byte *Dest, word Blocks, %'ModuleName'_TCryptParam *CParam)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <EmptySection_DummyValue/>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>TData32</Name>
      <Hint>Single 32bit data block type</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef dword TData32 ;/* Single 32bit data block type */\n
</PreparedHint>
      <Type>32bit unsigned</Type>
    </Type>
    <Type>
      <UsrType>TArrayType</UsrType>
      <Name>TData64</Name>
      <Hint>Single 64bit data block type</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef word TData64[4] ; /* Single 64bit data block type */\n
</PreparedHint>
      <Type>16bit unsigned</Type>
      <Low>0</Low>
      <High>3</High>
    </Type>
    <Type>
      <UsrType>TArrayType</UsrType>
      <Name>TKey</Name>
      <Hint>128bit key type</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef byte TKey[16] ; /* 128bit key type */\n
</PreparedHint>
      <Type>8bit unsigned</Type>
      <Low>0</Low>
      <High>15</High>
    </Type>
    <Type>
      <UsrType>TArrayType</UsrType>
      <Name>TExpandedKey</Name>
      <Hint>Expanded key table</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef word %'ModuleName'_TExpandedKey[53] ; /* Expanded key table */\n
</PreparedHint>
      <Type>16bit unsigned</Type>
      <Low>0</Low>
      <High>52</High>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>TCryptParam</Name>
      <Hint>Parameters used for encryption/decryption</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Parameters used for encryption/decryption */\n
    TKey Key; /* Key data */\n
    TData64 DFeedback; /* Decryption feedback data block */\n
    TData64 EFeedback; /* Encryption feedback data block */\n
    TData64 InitiationVector; /* Initialization vector (for CFB and OFB modes) */\n
    %'ModuleName'_TExpandedKey S; /* Expanded key table */\n
    %'ModuleName'_TExpandedKey SInverse; /* Expanded inverse key table */\n
  } %'ModuleName'_TCryptParam;\n
</PreparedHint>
      <RecordItem>
        <ItemName>Key</ItemName>
        <ItemType>TKey</ItemType>
        <ItemHint>Key data</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>DFeedback</ItemName>
        <ItemType>TData64</ItemType>
        <ItemHint>Decryption feedback data block</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>EFeedback</ItemName>
        <ItemType>TData64</ItemType>
        <ItemHint>Encryption feedback data block</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>InitiationVector</ItemName>
        <ItemType>TData64</ItemType>
        <ItemHint>Initialization vector (for CFB and OFB modes)</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>S</ItemName>
        <ItemType>TExpandedKey</ItemType>
        <ItemHint>Expanded key table</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>SInverse</ItemName>
        <ItemType>TExpandedKey</ItemType>
        <ItemHint>Expanded inverse key table</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>TData16</Name>
      <Hint>Single 16bit data block</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef word TData16 ;/* Single 16bit data block */\n
</PreparedHint>
      <Type>16bit unsigned</Type>
    </Type>
  </UserTypes>
</Interface>
