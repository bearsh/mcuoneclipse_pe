<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>S19</Name>
  <Description>Interface "BootloaderDisk\S19" for component BL_FAT16_Disk, generated by Component Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.003</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>Parse</Name>
        <Symbol>Parse</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Parses an S19 file and calls the callbacks in order to process it.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>getChar</ParName>
          <ParType>GetCharIterator</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Iterator to read a character from the input stream</ParHint>
        </Parameter>
        <Parameter>
          <ParName>data</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to data for the iterator</ParHint>
          <ParUserDeclaration>void *data</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(%'ModuleName'_GetCharIterator getChar, void *data)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetCurrentAddress</Name>
        <Symbol>GetCurrentAddress</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the current/last address read from the S-Record. This can be used for error reporting.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>32bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>dword #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>S19</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>GetCharIterator</Name>
      <Hint>Iterator to read from input stream. Input is stored into the first argument. With the second argument a data pointer can be passed. Returns ERR_OK or error code.</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef uint8_t (*%'ModuleName'%.GetCharIterator)(uint8_t*, void*); /* Iterator to read from input stream. Input is stored into the first argument. With the second argument a data pointer can be passed. Returns ERR_OK or error code. */\n
</PreparedHint>
      <Type>typedef uint8_t (*%'ModuleName'%.GetCharIterator)(uint8_t*, void*);</Type>
      <HWTestType/>
    </Type>
  </UserTypes>
</Interface>
