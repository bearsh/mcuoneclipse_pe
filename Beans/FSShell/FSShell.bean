<?xml version="1.0" encoding="UTF-8"?>
<Bean>
  <Header>
    <Name>FSShell</Name>
    <Description>File System Shell</Description>
    <Author>Erich Styger</Author>
    <Version>01.231</Version>
    <Icon>FSShell</Icon>
    <TypesFiles>PE,FSShell\FSShell</TypesFiles>
    <FileVersion>6</FileVersion>
  </Header>
  <Options>
    <BW_HelpType>&lt;none&gt;</BW_HelpType>
    <BW_HelpFiles>,"Application Notes",Events,Methods,Properties</BW_HelpFiles>
    <BW_AutoSaveHelp>yes</BW_AutoSaveHelp>
    <BW_AutoSaveDriver>yes</BW_AutoSaveDriver>
    <BW_DetailedHelp>yes</BW_DetailedHelp>
    <BW_NeedTps>no</BW_NeedTps>
    <BW_NeedUst>10</BW_NeedUst>
    <BW_NeedCns>0</BW_NeedCns>
    <BeanStatus>PROPOSAL</BeanStatus>
    <Copyright>License   :  Open Source (LGPL)\nCopyright : (c) Copyright Erich Styger, 2012, all rights reserved.\n\nThis an open source software implementing a shell using Processor Expert.\nMain purpose is for a file system, but useful as well without one.\nThis is a free software and is opened for education,  research  and commercial developments under license policy of following terms:\n* This is a free software and there is NO WARRANTY.\n* No restriction on use. You can use, modify and redistribute it for personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.\n* Redistributions of source code must retain the above copyright notice.</Copyright>
    <Category>SW-User Components</Category>
    <DemoDriver>no</DemoDriver>
    <BeanLevel>High</BeanLevel>
    <Shortcut>FSSH</Shortcut>
  </Options>
  <PropertyList>
    <Property>
      <TCompNameItem>
        <Name>Component name</Name>
        <Symbol>DeviceName</Symbol>
        <Hint>Name of the component.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue/>
      </TCompNameItem>
    </Property>
    <Property>
      <TBoolItem>
        <Name>Echo</Name>
        <Symbol>EchoEnabled</Symbol>
        <TypeSpec>typeYesNo</TypeSpec>
        <Hint>If enabled, the component will echo characters read on the terminal.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
      </TBoolItem>
    </Property>
    <Property>
      <TStrgItem>
        <Name>Prompt</Name>
        <Symbol>Prompt</Symbol>
        <Hint>Prompt string to be used. Make sure the string is in double quotes. You can use normal C escape characters like \\r or \n
 as well.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue>"CMD&gt; "</DefaultValue>
        <StrDefine>nothing</StrDefine>
        <MinLength>0</MinLength>
        <MaxLength>-1</MaxLength>
      </TStrgItem>
    </Property>
    <Property>
      <TStrgItem>
        <Name>Project Name</Name>
        <Symbol>ProjectNameStr</Symbol>
        <Hint>Here you can specify a project name which is shown if you use the help command.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue>My Project Name</DefaultValue>
        <StrDefine>nothing</StrDefine>
        <MinLength>0</MinLength>
        <MaxLength>-1</MaxLength>
      </TStrgItem>
    </Property>
    <Property>
      <TStrgItem>
        <Name>Silent Mode Prefix</Name>
        <Symbol>SilentModePrefixChar</Symbol>
        <Hint>If commands start with this prefix character, the command will be executed in silent mode (only errors will be reported). To disable silent support (for better code efficiency, use  an empty char).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue>#</DefaultValue>
        <StrDefine>nothing</StrDefine>
        <MinLength>0</MinLength>
        <MaxLength>-1</MaxLength>
      </TStrgItem>
    </Property>
    <Property>
      <TBoolItem>
        <Name>Blocking Send</Name>
        <Symbol>BlockingSend</Symbol>
        <TypeSpec>typeYesNo</TypeSpec>
        <Hint>If enabled, then sending using SendChar() to the communication channel will block until success.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
      </TBoolItem>
    </Property>
    <Property>
      <TIntgItem>
        <Name>Status Colon Pos</Name>
        <Symbol>StatusColonPos</Symbol>
        <Hint>Position of the ':' for the status commands. Used for SendStatusString().</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue>13</DefaultValue>
        <MinValue>0</MinValue>
        <MaxValue>-1</MaxValue>
        <Bases>DEC</Bases>
        <DefaultBase>DEC</DefaultBase>
        <ExtraHintDisabled>false</ExtraHintDisabled>
        <ChangeValueIntoRange>false</ChangeValueIntoRange>
        <RuntimeProperty>false</RuntimeProperty>
      </TIntgItem>
    </Property>
    <Property>
      <TIntgItem>
        <Name>Help Semicolon Pos</Name>
        <Symbol>HelpSemicolonPos</Symbol>
        <Hint>Position of the ';' in the help commands. Used for SendHelpString().</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue>26</DefaultValue>
        <MinValue>0</MinValue>
        <MaxValue>-1</MaxValue>
        <Bases>DEC</Bases>
        <DefaultBase>DEC</DefaultBase>
        <ExtraHintDisabled>false</ExtraHintDisabled>
        <ChangeValueIntoRange>false</ChangeValueIntoRange>
        <RuntimeProperty>false</RuntimeProperty>
      </TIntgItem>
    </Property>
    <Property>
      <TBoolGrupItem>
        <Name>Multi Command</Name>
        <Symbol>MultiCommandEnabled</Symbol>
        <TypeSpec>typeEnaDis</TypeSpec>
        <Hint>Enables execution of multiple commands in a single command, separated with a separation char.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>Disabled</Description>
        <Expanded>No</Expanded>
        <DefaultValue>false</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <Children>
          <GrupItem>
            <TIntgItem>
              <Name>Length</Name>
              <Symbol>MaxSubCommandStringSize</Symbol>
              <Hint>Length of possible sub command string. Used as buffer on the stack, so should not be choosen too large</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue>32</DefaultValue>
              <MinValue>2</MinValue>
              <MaxValue>-1</MaxValue>
              <Bases>DEC</Bases>
              <DefaultBase>DEC</DefaultBase>
              <ExtraHintDisabled>false</ExtraHintDisabled>
              <ChangeValueIntoRange>false</ChangeValueIntoRange>
              <RuntimeProperty>false</RuntimeProperty>
            </TIntgItem>
          </GrupItem>
          <GrupItem>
            <TStrgItem>
              <Name>Separator</Name>
              <Symbol>MultiCmdSeparationChar</Symbol>
              <Hint>Multiple commands can be separated using this separation character</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue>;</DefaultValue>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
            </TStrgItem>
          </GrupItem>
        </Children>
      </TBoolGrupItem>
    </Property>
    <Property>
      <TInhrLinkItem>
        <Name>Utility</Name>
        <Symbol>Utility</Symbol>
        <TypeSpec>Utility_I</TypeSpec>
        <Hint>Interface to utility</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <DefaultValue/>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <SortStyle/>
      </TInhrLinkItem>
    </Property>
    <Property>
      <TGrupItem>
        <Name>Shell</Name>
        <Symbol>Symbol</Symbol>
        <Hint>Group defining the console. If enabled, a console/terminal needs to be specified. This console then provides the default stdio (stdin, stdout, stderr) channels.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>Shell Interface</Description>
        <Expanded>Yes</Expanded>
        <Children>
          <GrupItem>
            <TBoolGrupItem>
              <Name>LDD</Name>
              <Symbol>LDDConsoleEnabled</Symbol>
              <TypeSpec>typeEnaDis</TypeSpec>
              <Hint>Using Logical Device Driver</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <BoldName>true</BoldName>
              <EditLine>false</EditLine>
              <Description>Disabled</Description>
              <Expanded>No</Expanded>
              <DefaultValue>false</DefaultValue>
              <DefineSymbol>YES_NO</DefineSymbol>
              <IfDisabled>setNOTHING</IfDisabled>
              <Children>
                <GrupItem>
                  <TBoolGrupItem>
                    <Name>USB CDC</Name>
                    <Symbol>USBCDDEnabled</Symbol>
                    <TypeSpec>typeEnaDis</TypeSpec>
                    <Hint>Enable for USB CDC communication</Hint>
                    <ItemLevel>BASIC</ItemLevel>
                    <BoldName>true</BoldName>
                    <EditLine>false</EditLine>
                    <Description>Disabled</Description>
                    <Expanded>No</Expanded>
                    <DefaultValue>false</DefaultValue>
                    <DefineSymbol>YES_NO</DefineSymbol>
                    <IfDisabled>setNOTHING</IfDisabled>
                    <Children>
                      <GrupItem>
                        <TInhrLinkItem>
                          <Name>USB CDC</Name>
                          <Symbol>USBCDC</Symbol>
                          <TypeSpec>FSShell\USBCDC</TypeSpec>
                          <Hint>USB CDC Interface</Hint>
                          <ItemLevel>BASIC</ItemLevel>
                          <EditLine>false</EditLine>
                          <DefaultValue/>
                          <CanDelete>false</CanDelete>
                          <IconPopup>false</IconPopup>
                          <SortStyle/>
                        </TInhrLinkItem>
                      </GrupItem>
                    </Children>
                  </TBoolGrupItem>
                </GrupItem>
                <GrupItem>
                  <TBoolGrupItem>
                    <Name>Serial</Name>
                    <Symbol>SerialEnabled</Symbol>
                    <TypeSpec>typeEnaDis</TypeSpec>
                    <Hint>Enable for SCI/Serial communication</Hint>
                    <ItemLevel>BASIC</ItemLevel>
                    <BoldName>true</BoldName>
                    <EditLine>false</EditLine>
                    <Description>Enabled</Description>
                    <Expanded>Yes</Expanded>
                    <DefaultValue>true</DefaultValue>
                    <DefineSymbol>YES_NO</DefineSymbol>
                    <IfDisabled>setNOTHING</IfDisabled>
                    <Children>
                      <GrupItem>
                        <TInhrLinkItem>
                          <Name>Serial</Name>
                          <Symbol>SerialLDD</Symbol>
                          <TypeSpec>FSShell\SerialLDD</TypeSpec>
                          <Hint>Interface to the serial (SCI) hardware</Hint>
                          <ItemLevel>BASIC</ItemLevel>
                          <EditLine>false</EditLine>
                          <DefaultValue/>
                          <CanDelete>false</CanDelete>
                          <IconPopup>false</IconPopup>
                          <SortStyle/>
                        </TInhrLinkItem>
                      </GrupItem>
                      <GrupItem>
                        <TInhrItem>
                          <Name>RX Buffer</Name>
                          <Symbol>RxBuffer</Symbol>
                          <TypeSpec>FSShell\RingBuffer</TypeSpec>
                          <Hint>Buffer used for incoming characters</Hint>
                          <ItemLevel>BASIC</ItemLevel>
                          <EditLine>false</EditLine>
                          <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
                          <DefaultIndex>-1</DefaultIndex>
                          <TextValueIndex>false</TextValueIndex>
                          <RuntimeProperty>false</RuntimeProperty>
                          <CanDelete>false</CanDelete>
                          <IconPopup>false</IconPopup>
                          <InhrBeanBaseName>RxBuf</InhrBeanBaseName>
                          <ShowInheritedMethodsEventsInPrjTree>true</ShowInheritedMethodsEventsInPrjTree>
                        </TInhrItem>
                      </GrupItem>
                    </Children>
                  </TBoolGrupItem>
                </GrupItem>
              </Children>
            </TBoolGrupItem>
          </GrupItem>
          <GrupItem>
            <TBoolGrupItem>
              <Name>non-LDD</Name>
              <Symbol>ConsoleEnabled</Symbol>
              <TypeSpec>typeEnaDis</TypeSpec>
              <Hint>Using traditional driver</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <BoldName>true</BoldName>
              <EditLine>false</EditLine>
              <Description>Disabled</Description>
              <Expanded>No</Expanded>
              <DefaultValue>false</DefaultValue>
              <DefineSymbol>YES_NO</DefineSymbol>
              <IfDisabled>setNOTHING</IfDisabled>
              <Children>
                <GrupItem>
                  <TInhrLinkItem>
                    <Name>Serial</Name>
                    <Symbol>Serial</Symbol>
                    <TypeSpec>FSShell\Serial</TypeSpec>
                    <Hint>Interface to low level asynchroserial component</Hint>
                    <ItemLevel>BASIC</ItemLevel>
                    <EditLine>false</EditLine>
                    <DefaultValue/>
                    <CanDelete>false</CanDelete>
                    <IconPopup>false</IconPopup>
                    <SortStyle/>
                  </TInhrLinkItem>
                </GrupItem>
              </Children>
            </TBoolGrupItem>
          </GrupItem>
        </Children>
      </TGrupItem>
    </Property>
    <Property>
      <TBoolGrupItem>
        <Name>File System</Name>
        <Symbol>FSenabled</Symbol>
        <TypeSpec>typeEnaDis</TypeSpec>
        <Hint>Configures the file system</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>Disabled</Description>
        <Expanded>No</Expanded>
        <DefaultValue>false</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <Children>
          <GrupItem>
            <TIntgItem>
              <Name>File print buffer size</Name>
              <Symbol>FilePrintBufferSize</Symbol>
              <Hint>Size of read buffer on stack for PrintFile() method: a higher number increases performance, but increases memory used on the stack.</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue>32</DefaultValue>
              <MinValue>4</MinValue>
              <MaxValue>-1</MaxValue>
              <Bases>DEC</Bases>
              <DefaultBase>DEC</DefaultBase>
              <ExtraHintDisabled>false</ExtraHintDisabled>
              <ChangeValueIntoRange>false</ChangeValueIntoRange>
              <RuntimeProperty>false</RuntimeProperty>
            </TIntgItem>
          </GrupItem>
          <GrupItem>
            <TIntgItem>
              <Name>File copy buffer size</Name>
              <Symbol>FileCopyBufferSize</Symbol>
              <Hint>Size of copy buffer on stack for CopyFile() method: a higher number increases performance, but increases memory used on the stack.</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue>32</DefaultValue>
              <MinValue>4</MinValue>
              <MaxValue>-1</MaxValue>
              <Bases>DEC</Bases>
              <DefaultBase>DEC</DefaultBase>
              <ExtraHintDisabled>false</ExtraHintDisabled>
              <ChangeValueIntoRange>false</ChangeValueIntoRange>
              <RuntimeProperty>false</RuntimeProperty>
            </TIntgItem>
          </GrupItem>
          <GrupItem>
            <TInhrLinkItem>
              <Name>File System</Name>
              <Symbol>FS</Symbol>
              <TypeSpec>FSShell\FS</TypeSpec>
              <Hint>Interface to File System</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
        </Children>
      </TBoolGrupItem>
    </Property>
    <Property>
      <TBoolGrupItem>
        <Name>RTOS</Name>
        <Symbol>HasRTOS</Symbol>
        <TypeSpec>typeEnaDis</TypeSpec>
        <Hint>Enables RTOS support</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>Disabled</Description>
        <Expanded>Yes</Expanded>
        <DefaultValue>false</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <Children>
          <GrupItem>
            <TBoolItem>
              <Name>Use dynamic heap</Name>
              <Symbol>UseRTOSDynamicMemory</Symbol>
              <TypeSpec>typeYesNo</TypeSpec>
              <Hint>If dynamic memory (malloc(), free()) of the RTOS shall be used. This will reduce the amount of stack and global memory used, but requires memory from the operating system.</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
              <DefaultIndex>0</DefaultIndex>
              <TextValueIndex>false</TextValueIndex>
              <RuntimeProperty>false</RuntimeProperty>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <DefaultValue>true</DefaultValue>
              <Popup>false</Popup>
            </TBoolItem>
          </GrupItem>
          <GrupItem>
            <TBoolItem>
              <Name>Shell Serial Semaphore</Name>
              <Symbol>ConsoleSempahore</Symbol>
              <TypeSpec>typeYesNo</TypeSpec>
              <Hint>If enabled, a semaphore is used to grant mutual access to the console/serial/SCI hardware. Useful if multiple tasks needs to write to the shell console. Make sure you call the Init() routine of the componenent first in order to create the semaphore.</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
              <DefaultIndex>1</DefaultIndex>
              <TextValueIndex>false</TextValueIndex>
              <RuntimeProperty>false</RuntimeProperty>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <DefaultValue>false</DefaultValue>
              <Popup>false</Popup>
            </TBoolItem>
          </GrupItem>
          <GrupItem>
            <TInhrLinkItem>
              <Name>RTOS</Name>
              <Symbol>RTOS</Symbol>
              <TypeSpec>FSShell\RTOS</TypeSpec>
              <Hint>Interface to operating system</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
        </Children>
      </TBoolGrupItem>
    </Property>
    <Property>
      <TBoolGrupItem>
        <Name>Time and Date</Name>
        <Symbol>TimeDateEnabled</Symbol>
        <TypeSpec>typeEnaDis</TypeSpec>
        <Hint>If enabled, date and time commands are supported</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>Disabled</Description>
        <Expanded>No</Expanded>
        <DefaultValue>false</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <Children>
          <GrupItem>
            <TBoolGrupItem>
              <Name>SW RTC</Name>
              <Symbol>SWRTCenabled</Symbol>
              <TypeSpec>typeEnaDis</TypeSpec>
              <Hint>If the TimeDate (software RTC) is used</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <BoldName>true</BoldName>
              <EditLine>false</EditLine>
              <Description>Disabled</Description>
              <Expanded>No</Expanded>
              <DefaultValue>false</DefaultValue>
              <DefineSymbol>YES_NO</DefineSymbol>
              <IfDisabled>setNOTHING</IfDisabled>
              <Children>
                <GrupItem>
                  <TInhrLinkItem>
                    <Name>TimeDate</Name>
                    <Symbol>SWRTC</Symbol>
                    <TypeSpec>FSShell\TimeDate</TypeSpec>
                    <Hint>Interface to realtime clock</Hint>
                    <ItemLevel>BASIC</ItemLevel>
                    <EditLine>false</EditLine>
                    <DefaultValue/>
                    <CanDelete>false</CanDelete>
                    <IconPopup>false</IconPopup>
                    <SortStyle/>
                  </TInhrLinkItem>
                </GrupItem>
              </Children>
            </TBoolGrupItem>
          </GrupItem>
          <GrupItem>
            <TBoolGrupItem>
              <Name>HW RTC</Name>
              <Symbol>RTCEnabled</Symbol>
              <TypeSpec>typeEnaDis</TypeSpec>
              <Hint>Enabled if using an RTC (Realtime clock)</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <BoldName>true</BoldName>
              <EditLine>false</EditLine>
              <Description>Disabled</Description>
              <Expanded>No</Expanded>
              <DefaultValue>false</DefaultValue>
              <DefineSymbol>YES_NO</DefineSymbol>
              <IfDisabled>setNOTHING</IfDisabled>
              <Children>
                <GrupItem>
                  <TInhrLinkItem>
                    <Name>RTC</Name>
                    <Symbol>HWRTC</Symbol>
                    <TypeSpec>FSShell\RTC</TypeSpec>
                    <Hint>RTC Interface</Hint>
                    <ItemLevel>BASIC</ItemLevel>
                    <EditLine>false</EditLine>
                    <DefaultValue/>
                    <CanDelete>false</CanDelete>
                    <IconPopup>false</IconPopup>
                    <SortStyle/>
                  </TInhrLinkItem>
                </GrupItem>
              </Children>
            </TBoolGrupItem>
          </GrupItem>
        </Children>
      </TBoolGrupItem>
    </Property>
  </PropertyList>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>PrintPrompt</Name>
        <Symbol>PrintPrompt</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Prints the prompt to the stdOut channel</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to IO to be used</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SendNum8u</Name>
        <Symbol>SendNum8u</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sends an 8bit unsigned number to the given I/O</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>val</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>number to print</ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>StdIO_OutErr_FctType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>I/O callbacks to be used for printing.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte val, %'ModuleName'_StdIO_OutErr_FctType io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SendNum8s</Name>
        <Symbol>SendNum8s</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sends an 8bit signed number to the given I/O</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>val</ParName>
          <ParType>8bit signed</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>number to print</ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>StdIO_OutErr_FctType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>I/O callbacks to be used for printing.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(signed char val, %'ModuleName'_StdIO_OutErr_FctType io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SendNum16u</Name>
        <Symbol>SendNum16u</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sends a 16bit unsigned number to the given I/O</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>number to print</ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>StdIO_OutErr_FctType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>I/O callbacks to be used for printing.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(word val, %'ModuleName'_StdIO_OutErr_FctType io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SendNum16s</Name>
        <Symbol>SendNum16s</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sends a 16bit signed number to the given I/O</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit signed</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>number to print</ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>StdIO_OutErr_FctType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>I/O callbacks to be used for printing.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(int16_t val, %'ModuleName'_StdIO_OutErr_FctType io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SendNum32u</Name>
        <Symbol>SendNum32u</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sends a 32bit unsigned number to the given I/O</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>val</ParName>
          <ParType>32bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>number to print</ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>StdIO_OutErr_FctType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>I/O callbacks to be used for printing.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(dword val, %'ModuleName'_StdIO_OutErr_FctType io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SendNum32s</Name>
        <Symbol>SendNum32s</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sends a 32bit signed number to the given I/O</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>val</ParName>
          <ParType>32bit signed</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>number to print</ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>StdIO_OutErr_FctType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>I/O callbacks to be used for printing.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(long val, %'ModuleName'_StdIO_OutErr_FctType io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SendStr</Name>
        <Symbol>SendStr</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Prints a string using an I/O function</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>String (zero terminated) to be printed.</ParHint>
          <ParUserDeclaration>const byte *str</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>StdIO_OutErr_FctType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>I/O callbacks to be used for printing.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(const byte *str, %'ModuleName'_StdIO_OutErr_FctType io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>PrintDirectory</Name>
        <Symbol>PrintDirectory</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Prints a directory</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>dirName</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Directory folder to be printed</ParHint>
          <ParUserDeclaration>const byte *dirName</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const byte *dirName, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>CopyFile</Name>
        <Symbol>CopyFile</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Copy a file</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>srcFileName</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Source file name</ParHint>
          <ParUserDeclaration>const byte *srcFileName</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>dstFileName</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Destination file name</ParHint>
          <ParUserDeclaration>const byte *dstFileName</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const byte *srcFileName, const byte *dstFileName, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>DeleteFile</Name>
        <Symbol>DeleteFile</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Deletes a file</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>fileName</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Filename of file to be deleted</ParHint>
          <ParUserDeclaration>const byte *fileName</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const byte *fileName, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>PrintFile</Name>
        <Symbol>PrintFile</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Prints the content of a file</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>fileName</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Name of file to be printed</ParHint>
          <ParUserDeclaration>const byte *fileName</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const byte *fileName, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>MakeDirectory</Name>
        <Symbol>MakeDirectory</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Creates a directory</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>dirName</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Directory name</ParHint>
          <ParUserDeclaration>const byte *dirName</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callback routines</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const byte *dirName, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ChangeDirectory</Name>
        <Symbol>ChangeDirectory</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Changes to a directory</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>dirName</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Directory name</ParHint>
          <ParUserDeclaration>const byte *dirName</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callback routines</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const byte *dirName, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>RenameFile</Name>
        <Symbol>RenameFile</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Renames a file</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>srcFileName</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Source file name</ParHint>
          <ParUserDeclaration>const byte *srcFileName</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>dstFileName</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Destination file name</ParHint>
          <ParUserDeclaration>const byte *dstFileName</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to </ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const byte *srcFileName, const byte *dstFileName, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>UnMountFileSystem</Name>
        <Symbol>UnMountFileSystem</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Unmounts the file system for a drive</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>logicalDrive</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>The drive number to be used</ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(byte logicalDrive, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>MountFileSystem</Name>
        <Symbol>MountFileSystem</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Mounts a file system</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>fileSystemObject</ParName>
          <ParType>FATFS</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to a file system object</ParHint>
        </Parameter>
        <Parameter>
          <ParName>logicalDrive</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>The drive number to be used</ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(%'ModuleName'_FATFS *fileSystemObject, byte logicalDrive, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>CheckCardPresence</Name>
        <Symbol>CheckCardPresence</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method checks if card has been inserted or removed and mounts or unmounts the file system.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>cardMounted</ParName>
          <ParType>Boolean</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to initialize this variable to FALSE on the caller side the first time.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>drive</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>drive number, pass 0 as default drive</ParHint>
        </Parameter>
        <Parameter>
          <ParName>fileSystemObject</ParName>
          <ParType>FATFS</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to </ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to io handler to be used. Can be NULL, then no messages are written.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(bool *cardMounted, byte drive, %'ModuleName'_FATFS *fileSystemObject, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>PrintSector</Name>
        <Symbol>PrintSector</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Prints information about the current disk</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>drive</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>drive number, starting with zero</ParHint>
        </Parameter>
        <Parameter>
          <ParName>sectorNo</ParName>
          <ParType>32bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>sector number</ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(byte drive, dword sectorNo, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>PrintDiskInfo</Name>
        <Symbol>PrintDiskInfo</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Prints information about the current disk</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>drive</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>drive number, starting with zero</ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(byte drive, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Date</Name>
        <Symbol>Date</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Processes the date command</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>cmd</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to command string</ParHint>
          <ParUserDeclaration>const unsigned char *cmd</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char *cmd, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Time</Name>
        <Symbol>Time</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Processes the time command</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>cmd</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to command string</ParHint>
          <ParUserDeclaration>const unsigned char *cmd</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char *cmd, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>PrintStatus</Name>
        <Symbol>PrintStatus</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Prints various available system status information</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(%'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ShellCmd</Name>
        <Symbol>ShellCmd</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Parses a shell command. Use 'help' to get a list of supported commands.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>cmd</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to command string</ParHint>
          <ParUserDeclaration>const unsigned char *cmd</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>handled</ParName>
          <ParType>Boolean</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to variable to indicate if the command has been handled. The caller passes this variable to the command scanner to find out if the passed command has been handled. The variable is initialized by the caller.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char *cmd, bool *handled, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ReadLine</Name>
        <Symbol>ReadLine</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Reads a line from stdIn and returns TRUE if we have a line, FALSE otherwise.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>Boolean</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>buf</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to buffer where to read in the information</ParHint>
        </Parameter>
        <Parameter>
          <ParName>bufSize</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>size of buffer</ParHint>
          <ParUserDeclaration>size_t bufSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>bool #M#_#C#(byte *buf, size_t bufSize, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>PrintCommandFailed</Name>
        <Symbol>PrintCommandFailed</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Prints a standard message for failed or unknown commands</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>cmd</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to command which was failing</ParHint>
          <ParUserDeclaration>const unsigned char *cmd</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(const unsigned char *cmd, %'ModuleName'_ConstStdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ParseCommand</Name>
        <Symbol>ParseCommand</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Parses a shell command. It handles first the internal commands and will call the provided callback.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>cmd</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to command string</ParHint>
          <ParUserDeclaration>const unsigned char *cmd</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O callbacks</ParHint>
        </Parameter>
        <Parameter>
          <ParName>parseCallback</ParName>
          <ParType>ParseCommandCallback</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>callback which will be called to parse commands in the user application, or NULL if not used.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char *cmd, %'ModuleName'_ConstStdIOType *io, %'ModuleName'_ParseCommandCallback parseCallback)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetStdio</Name>
        <Symbol>GetStdio</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the default stdio channel. This method is only available if a shell is enabled in the component properties.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>ConstStdIOTypePtr</ReturnType>
        <RetHint>Pointer to the stdio descriptor</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_ConstStdIOTypePtr #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ReadAndParseLine</Name>
        <Symbol>ReadAndParseLine</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Reads characters from the default input channel and appends it to the buffer. Once a new line has been detected, the line will be parsed.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>cmdBuf</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to buffer provided by the caller where to store the command to read in. Characters will be appended, so make sure string buffer is initialized with a zero byte at the beginning.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>cmdBufSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of buffer</ParHint>
          <ParUserDeclaration>size_t cmdBufSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>ConstStdIOType</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O channels to be used</ParHint>
        </Parameter>
        <Parameter>
          <ParName>parseCallback</ParName>
          <ParType>ParseCommandCallback</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>callback provided by the user application to parse user commands. If not used, NULL can be passed.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(byte *cmdBuf, size_t cmdBufSize, %'ModuleName'_ConstStdIOType *io, %'ModuleName'_ParseCommandCallback parseCallback)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>RequestSerial</Name>
        <Symbol>RequestSerial</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Used to get mutual access to the shell console. Only has an effect if using an RTOS with semaphore for the console access.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ReleaseSerial</Name>
        <Symbol>ReleaseSerial</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Used to release mutual access to the shell console. Only has an effect if using an RTOS with semaphore for the console access.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetSemaphore</Name>
        <Symbol>GetSemaphore</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Return the semaphore of the shell.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>pointer</ReturnType>
        <RetHint>semaphore, or NULL if not used or not allocated.</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void* #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SendSeparatedStrings</Name>
        <Symbol>SendSeparatedStrings</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Prints a string using an I/O function, formated for the 'help' command</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>false</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>false</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>strA</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to first string</ParHint>
          <ParUserDeclaration>const byte *strA</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>strB</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to second string</ParHint>
          <ParUserDeclaration>const byte *strB</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>tabChar</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Character to be used as separator</ParHint>
        </Parameter>
        <Parameter>
          <ParName>tabPos</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Position of the tab character</ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>StdIO_OutErr_FctType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>I/O callbacks to be used for printing.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(const byte *strA, const byte *strB, byte tabChar, byte tabPos, %'ModuleName'_StdIO_OutErr_FctType io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SendStatusStr</Name>
        <Symbol>SendStatusStr</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Prints a status string using an I/O function, formated for the 'status' command</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>strItem</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string of the command</ParHint>
          <ParUserDeclaration>const byte *strItem</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>strStatus</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to help text string</ParHint>
          <ParUserDeclaration>const byte *strStatus</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>StdIO_OutErr_FctType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>I/O callbacks to be used for printing.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(const byte *strItem, const byte *strStatus, %'ModuleName'_StdIO_OutErr_FctType io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SendHelpStr</Name>
        <Symbol>SendHelpStr</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Prints a string using an I/O function, formated for the 'help' command</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>strCmd</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string of the command</ParHint>
          <ParUserDeclaration>const byte *strCmd</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>strHelp</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to help text string</ParHint>
          <ParUserDeclaration>const byte *strHelp</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>StdIO_OutErr_FctType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>I/O callbacks to be used for printing.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(const byte *strCmd, const byte *strHelp, %'ModuleName'_StdIO_OutErr_FctType io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ReadChar</Name>
        <Symbol>ReadChar</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Reads a character (blocking)</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>c</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to character to be used to store the result</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *c)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SendChar</Name>
        <Symbol>SendChar</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sends a character (blocking)</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>ch</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>character to be sent</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte ch)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>KeyPressed</Name>
        <Symbol>KeyPressed</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Checks if a key has been pressed (a character is present in the input buffer)</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>Boolean</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>bool #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Init</Name>
        <Symbol>Init</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Initializes the module, especially creates the mutex semaphore if an RTOS is used.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Deinit</Name>
        <Symbol>Deinit</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>De-Initializes the module, especially frees the mutex semaphore if an RTOS is used.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <Event>
      <TStrgItem>
        <Name>Event module name</Name>
        <Symbol>EventModule</Symbol>
        <Hint>Name of the user module (without extension), where the events from this component are placed.</Hint>
        <ItemLevel>ADVANCED</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue>Events</DefaultValue>
        <StrDefine>nothing</StrDefine>
        <MinLength>0</MinLength>
        <MaxLength>-1</MaxLength>
      </TStrgItem>
    </Event>
    <Event>
      <TEvntItem>
        <Name>OnRequestRTC</Name>
        <Symbol>OnRequestRTC</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Event called before accessing the RTC</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>don't generate code</Description>
        <Expanded>No</Expanded>
        <DefaultValue>false</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <IsAssembler>false</IsAssembler>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #C#(void)</ANSIC>
        </Declarations>
        <Children>
          <GrupItem>
            <TEvntName>
              <Name>Event procedure name</Name>
              <Symbol>Name</Symbol>
              <Hint>OnRequestRTC procedure name</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue/>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
              <ErrorIfNotSet>true</ErrorIfNotSet>
              <IdentType>EVNT</IdentType>
            </TEvntName>
          </GrupItem>
        </Children>
      </TEvntItem>
    </Event>
    <Event>
      <TEvntItem>
        <Name>OnReleaseRTC</Name>
        <Symbol>OnReleaseRTC</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Event called after accessing the RTC</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>don't generate code</Description>
        <Expanded>No</Expanded>
        <DefaultValue>false</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <IsAssembler>false</IsAssembler>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #C#(void)</ANSIC>
        </Declarations>
        <Children>
          <GrupItem>
            <TEvntName>
              <Name>Event procedure name</Name>
              <Symbol>Name</Symbol>
              <Hint>OnReleaseRTC procedure name</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue/>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
              <ErrorIfNotSet>true</ErrorIfNotSet>
              <IdentType>EVNT</IdentType>
            </TEvntName>
          </GrupItem>
        </Children>
      </TEvntItem>
    </Event>
    <Event>
      <TEvntItem>
        <Name>OnTimeSet</Name>
        <Symbol>OnTimeSet</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Event called at the time before the clock is set. Useful to reset a counter at application level</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>don't generate code</Description>
        <Expanded>No</Expanded>
        <DefaultValue>false</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <IsAssembler>false</IsAssembler>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>hour</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>new hour value</ParHint>
        </Parameter>
        <Parameter>
          <ParName>minute</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>new minute value</ParHint>
        </Parameter>
        <Parameter>
          <ParName>second</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>new second value</ParHint>
        </Parameter>
        <Parameter>
          <ParName>hSecond</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>new hundreds of second value</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #C#(byte hour, byte minute, byte second, byte hSecond)</ANSIC>
        </Declarations>
        <Children>
          <GrupItem>
            <TEvntName>
              <Name>Event procedure name</Name>
              <Symbol>Name</Symbol>
              <Hint>OnTimeSet procedure name</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue/>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
              <ErrorIfNotSet>true</ErrorIfNotSet>
              <IdentType>EVNT</IdentType>
            </TEvntName>
          </GrupItem>
        </Children>
      </TEvntItem>
    </Event>
    <Event>
      <TEvntItem>
        <Name>OnBlockReceived</Name>
        <Symbol>OnBlockReceived</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This event is called when the requested number of data is moved to the input buffer.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <IsInSimulink>true</IsInSimulink>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>don't generate code</Description>
        <Expanded>No</Expanded>
        <DefaultValue>false</DefaultValue>
        <DefineSymbol>DEF_UNDEF</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <IsAssembler>true</IsAssembler>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>UserDataPtr</ParName>
          <ParType>LDD_TUserData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the user or RTOS specific data. This pointer is passed as the parameter of Init method.</ParHint>
        </Parameter>
        <Scope>OVERRIDE</Scope>
        <Declarations>
          <ANSIC>void #C#(LDD_TUserData *UserDataPtr)</ANSIC>
        </Declarations>
        <Children>
          <GrupItem>
            <TEvntName>
              <Name>Event procedure name</Name>
              <Symbol>Name</Symbol>
              <Hint>OnBlockReceived procedure name</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue/>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
              <ErrorIfNotSet>true</ErrorIfNotSet>
              <IdentType>EVNT</IdentType>
            </TEvntName>
          </GrupItem>
        </Children>
      </TEvntItem>
    </Event>
    <Event>
      <TEvntItem>
        <Name>OnBlockSent</Name>
        <Symbol>OnBlockSent</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This event is called after the last character from the output buffer is moved to the transmitter. </Hint>
        <ItemLevel>BASIC</ItemLevel>
        <IsInSimulink>true</IsInSimulink>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>don't generate code</Description>
        <Expanded>No</Expanded>
        <DefaultValue>false</DefaultValue>
        <DefineSymbol>DEF_UNDEF</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <IsAssembler>true</IsAssembler>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>UserDataPtr</ParName>
          <ParType>LDD_TUserData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the user or RTOS specific data. This pointer is passed as the parameter of Init method.</ParHint>
        </Parameter>
        <Scope>OVERRIDE</Scope>
        <Declarations>
          <ANSIC>void #C#(LDD_TUserData *UserDataPtr)</ANSIC>
        </Declarations>
        <Children>
          <GrupItem>
            <TEvntName>
              <Name>Event procedure name</Name>
              <Symbol>Name</Symbol>
              <Hint>OnBlockSent procedure name</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue/>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
              <ErrorIfNotSet>true</ErrorIfNotSet>
              <IdentType>EVNT</IdentType>
            </TEvntName>
          </GrupItem>
        </Children>
      </TEvntItem>
    </Event>
  </EventList>
  <Links>
    <EmptySection_DummyValue/>
  </Links>
  <Revisions>
    <RevisionVersion>2</RevisionVersion>
  </Revisions>
</Bean>
