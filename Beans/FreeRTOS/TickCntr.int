<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>TickCntr</Name>
  <Description>Interface "FreeRTOS\TickCntr" for component FreeRTOS, generated by Component Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.005</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>Enable</Name>
        <Symbol>Enable</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method enables the component, i.e. timer is enabled and the internal clocks are counted. The method usually also reset the counter (if it is supported by HW). \n
The method is not available if the counter is shared.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code, possible codes:\n     ERR_OK - OK\n     ERR_SPEED - This device does not work in the active speed mode</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Disable</Name>
        <Symbol>Disable</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method disables the component, i.e. timer is disabled and the internal clocks are stopped. Last counter value is usually preserved in the counter (if it is supported by HW). \n
The method is not available if the counter is shared.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code, possible codes:\n     ERR_OK - OK\n     ERR_SPEED - This device does not work in the active speed mode</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetCounterValue</Name>
        <Symbol>GetCounterValue</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method returns a content of the counter.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code, possible codes:\n     ERR_OK - OK\n     ERR_SPEED - This device does not work in the active speed mode</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>Value</ParName>
          <ParType>TTimerValue</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to returned value.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(%'ModuleName'_TTimerValue *Value)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Reset</Name>
        <Symbol>Reset</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method resets the timer-counter (sets to zero for up-counting HW or to appropriate value for down-counting HW). The method is available only if the counter register can be set by software and the counter is not shared.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAsOwnr_?Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code, possible codes:\n     ERR_OK - OK\n     ERR_SPEED - This device does not work in the active speed mode</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <Event>
      <TEvntItem>
        <Name>OnInterrupt</Name>
        <Symbol>OnInterrupt</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This event is called when a compare matches the counter value (if compare or reload is selected as a interrupt source) or a counter overflows (for free-running devices). It is valid only when the component is enabled - &lt;a href="FreeCntrMethods.html#Enable"&gt;"Enable"&lt;/a&gt; and the events are enabled - &lt;a href="FreeCntrMethods.html#EnableEvent"&gt;"EnableEvent"&lt;/a&gt;. The event is available only if &lt;a href="FreeCntrProperties.html#IntService"&gt;Interrupt service/event&lt;/a&gt; is enabled.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>don't generate code</Description>
        <Expanded>No</Expanded>
        <DefaultValue>false</DefaultValue>
        <DefineSymbol>DEF_UNDEF</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <IsAssembler>true</IsAssembler>
        <Mode>meiAlwReq_!Exist</Mode>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #C#(void)</ANSIC>
        </Declarations>
        <Children>
          <GrupItem>
            <TEvntName>
              <Name>Event procedure name</Name>
              <Symbol>Name</Symbol>
              <Hint>OnInterrupt procedure name</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue/>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
              <ErrorIfNotSet>true</ErrorIfNotSet>
              <IdentType>EVNT</IdentType>
            </TEvntName>
          </GrupItem>
          <GrupItem>
            <TPriorItem>
              <Name>Priority</Name>
              <Symbol>Priority</Symbol>
              <Hint>OnOverflow priority</Hint>
              <ItemLevel>ADVANCED</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue>same as interrupt</DefaultValue>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TPriorItem>
          </GrupItem>
        </Children>
      </TEvntItem>
    </Event>
  </EventList>
  <Registration>
    <Template>TickCntr</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>TTimerValue</Name>
      <Hint>Counter or compare value, width depends on timer width, 8, 16, 32 or 64 bits.</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef dlong %'ModuleName'_TTimerValue ;/* Counter or compare value, width depends on timer width, 8, 16, 32 or 64 bits. */\n
</PreparedHint>
      <Type>64bit unsigned</Type>
    </Type>
  </UserTypes>
</Interface>
