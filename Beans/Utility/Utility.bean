<?xml version="1.0" encoding="UTF-8"?>
<Bean>
  <Header>
    <Name>Utility</Name>
    <Description>Utility Module</Description>
    <Author>Erich Styger</Author>
    <Version>01.086</Version>
    <Icon>Utility</Icon>
    <TypesFiles>PE,Utility\Utility</TypesFiles>
    <FileVersion>6</FileVersion>
  </Header>
  <Options>
    <BW_HelpType>Basic</BW_HelpType>
    <BW_HelpFiles>,Properties,Methods,Events</BW_HelpFiles>
    <BW_AutoSaveHelp>yes</BW_AutoSaveHelp>
    <BW_AutoSaveDriver>yes</BW_AutoSaveDriver>
    <BW_DetailedHelp>yes</BW_DetailedHelp>
    <BW_NeedTps>no</BW_NeedTps>
    <BW_NeedUst>0</BW_NeedUst>
    <BW_NeedCns>0</BW_NeedCns>
    <BeanStatus>PROPOSAL</BeanStatus>
    <Copyright>License   :  Open Source (LGPL)\nCopyright : (c) Copyright Erich Styger, 2012, all rights reserved.\nxatoi(): Copyright (C) 2010, ChaN, all right reserved. (see copyright notice and license at the function implementation).\n\nThis an open source software implementing utility functions using Processor Expert.\nThis is a free software and is opened for education,  research and commercial developments under license policy of following terms:\n* This is a free software and there is NO WARRANTY.\n* No restriction on use. You can use, modify and redistribute it for\n  personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.\n* Redistributions of source code must retain the above copyright notice.</Copyright>
    <Category>SW-User Components</Category>
    <DemoDriver>no</DemoDriver>
    <BeanLevel>High</BeanLevel>
    <Shortcut>UTIL</Shortcut>
  </Options>
  <PropertyList>
    <Property>
      <TCompNameItem>
        <Name>Component name</Name>
        <Symbol>DeviceName</Symbol>
        <Hint>Name of the component.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue/>
      </TCompNameItem>
    </Property>
  </PropertyList>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>strcpy</Name>
        <Symbol>strcpy</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Same as normal strcpy, but safe as it does not write beyond the buffer.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>src</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to source string.</ParHint>
          <ParUserDeclaration>const unsigned char *src</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, const unsigned char *src)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcat</Name>
        <Symbol>strcat</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Same as normal strcat, but safe as it does not write beyond the buffer.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>src</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to source string.</ParHint>
          <ParUserDeclaration>const unsigned char *src</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, const unsigned char *src)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>chcat</Name>
        <Symbol>chcat</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Adds a single character to a zero byte terminated buffer. It cares about buffer overflow.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>ch</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>character to append</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, byte ch)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ShiftRightAndFill</Name>
        <Symbol>ShiftRightAndFill</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Moves the content of a string to the right and fills the space on the left side with a pattern</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>false</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>false</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>fill</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>fill character</ParHint>
        </Parameter>
        <Parameter>
          <ParName>nofFill</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>number of maximum fill character</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, byte fill, byte nofFill)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Num8sToStr</Name>
        <Symbol>Num8sToStr</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Converts a signed 8bit value into a string.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>8bit signed</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to be converted.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, signed char val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Num8uToStr</Name>
        <Symbol>Num8uToStr</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Converts an unsigned 8bit value into a string.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to be converted.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, byte val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Num16sToStr</Name>
        <Symbol>Num16sToStr</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Converts a signed 16bit value into a string.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit signed</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to be converted.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, int16_t val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Num16uToStr</Name>
        <Symbol>Num16uToStr</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Converts a signed 16bit value into a string.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to be converted.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, word val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Num32uToStr</Name>
        <Symbol>Num32uToStr</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Converts an unsigned 32bit value into a string.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>32bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to be converted.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, dword val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Num32sToStr</Name>
        <Symbol>Num32sToStr</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Converts a signed 32bit value into a string.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>32bit signed</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to be converted.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, long val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Num16sToStrFormatted</Name>
        <Symbol>Num16sToStrFormatted</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Converts a 16bit signed value to string.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit signed</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>fill</ParName>
          <ParType>char</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Fill character</ParHint>
        </Parameter>
        <Parameter>
          <ParName>nofFill</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Number of fill characters</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, int16_t val, char fill, byte nofFill)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Num16uToStrFormatted</Name>
        <Symbol>Num16uToStrFormatted</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Converts a 16bit unsigned value to string.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>fill</ParName>
          <ParType>char</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Fill character</ParHint>
        </Parameter>
        <Parameter>
          <ParName>nofFill</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Number of fill characters</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, word val, char fill, byte nofFill)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Num32uToStrFormatted</Name>
        <Symbol>Num32uToStrFormatted</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Converts a 32bit unsigned value to string.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>32bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>fill</ParName>
          <ParType>char</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Fill character</ParHint>
        </Parameter>
        <Parameter>
          <ParName>nofFill</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Number of fill characters</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, dword val, char fill, byte nofFill)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Num32sToStrFormatted</Name>
        <Symbol>Num32sToStrFormatted</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Converts a 32bit signed value to string.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>32bit signed</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>fill</ParName>
          <ParType>char</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Fill character</ParHint>
        </Parameter>
        <Parameter>
          <ParName>nofFill</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Number of fill characters</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, long val, char fill, byte nofFill)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum8u</Name>
        <Symbol>strcatNum8u</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 8bit unsigned value to a string buffer.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, byte val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum8s</Name>
        <Symbol>strcatNum8s</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 8bit signed value to a string buffer.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>8bit signed</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, signed char val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum16u</Name>
        <Symbol>strcatNum16u</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 16bit unsigned value to a string buffer.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, word val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum16s</Name>
        <Symbol>strcatNum16s</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 16bit signed value to a string buffer.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit signed</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, int16_t val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum32u</Name>
        <Symbol>strcatNum32u</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 32bit signed value to a string buffer.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>32bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, dword val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum32s</Name>
        <Symbol>strcatNum32s</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 32bit signed value to a string buffer.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>32bit signed</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, long val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum16uFormatted</Name>
        <Symbol>strcatNum16uFormatted</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 16bit unsigned value to a string buffer in a formatted way.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>fill</ParName>
          <ParType>char</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Fill character</ParHint>
        </Parameter>
        <Parameter>
          <ParName>nofFill</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Number of fill characters</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, word val, char fill, byte nofFill)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum16sFormatted</Name>
        <Symbol>strcatNum16sFormatted</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 16bit signed value to a string buffer in a formatted way.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit signed</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>fill</ParName>
          <ParType>char</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Fill character</ParHint>
        </Parameter>
        <Parameter>
          <ParName>nofFill</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Number of fill characters</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, int16_t val, char fill, byte nofFill)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum32uFormatted</Name>
        <Symbol>strcatNum32uFormatted</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 32bit unsigned value to a string buffer in a formatted way.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>32bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>fill</ParName>
          <ParType>char</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Fill character</ParHint>
        </Parameter>
        <Parameter>
          <ParName>nofFill</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Number of fill characters</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, dword val, char fill, byte nofFill)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum32sFormatted</Name>
        <Symbol>strcatNum32sFormatted</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 32bit signed value to a string buffer in a formatted way.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>32bit signed</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>fill</ParName>
          <ParType>char</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Fill character</ParHint>
        </Parameter>
        <Parameter>
          <ParName>nofFill</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Number of fill characters</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, long val, char fill, byte nofFill)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum8Hex</Name>
        <Symbol>strcatNum8Hex</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 8bit unsigned value to a buffer as hex number (without a 0x prefix).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>num</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, byte num)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum16Hex</Name>
        <Symbol>strcatNum16Hex</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>num</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, word num)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum24Hex</Name>
        <Symbol>strcatNum24Hex</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 32bit unsigned value to a buffer as hex number (without a 0x prefix). Only 24bits are used.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>num</ParName>
          <ParType>32bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, dword num)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcatNum32Hex</Name>
        <Symbol>strcatNum32Hex</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>dst</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to destination string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the destination buffer (in bytes).</ParHint>
          <ParUserDeclaration>size_t dstSize</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>num</ParName>
          <ParType>32bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Value to convert.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte *dst, size_t dstSize, dword num)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>IsLeapYear</Name>
        <Symbol>IsLeapYear</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns true if a given year is a leap year</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>Boolean</ReturnType>
        <RetHint>If the year is a leap year or not.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>year</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Year, in the YYYY format.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>bool #M#_#C#(word year)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>WeekDay</Name>
        <Symbol>WeekDay</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the weekday for a given date &gt;= 1.Jan.1900</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Returns the weekday, 0 for Sunday, 1 for Monday, 2 for Tuesday, etc.</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>year</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>year in YYYY format</ParHint>
        </Parameter>
        <Parameter>
          <ParName>month</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>month of the year (1: January, 2: February, etc)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>day</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>day of the moth (starting with 1)</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(word year, byte month, byte day)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ReadEscapedName</Name>
        <Symbol>ReadEscapedName</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Scans an escaped name from a string. This is useful e.g. for double quoted file names.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>6</ParamCount>
        <Parameter>
          <ParName>filename</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>the name to be copied. Names may be in quoted format</ParHint>
          <ParUserDeclaration>const unsigned char *filename</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>destname</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>the destination of the copy. Names are not in quoted format. destname may be NULL to get the other return values only</ParHint>
        </Parameter>
        <Parameter>
          <ParName>maxlen</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>length allocated for destname</ParHint>
          <ParUserDeclaration>size_t maxlen</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>lenRead</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>length read in filename to copy the whole name. Note that filenames maybe space terminated, so *lenRead &lt; strlen(filename)</ParHint>
          <ParUserDeclaration>size_t *lenRead</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>lenWritten</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>the size written in destname. In case of overflows in destname, lenWritten is still increased but destname no longer written. The have the string length in these cases use strlen(destname)</ParHint>
          <ParUserDeclaration>size_t *lenWritten</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>terminators</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>additional characters where a name should terminate. May be NULL</ParHint>
          <ParUserDeclaration>const char *terminators</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char *filename, byte *destname, size_t maxlen, size_t *lenRead, size_t *lenWritten, const char *terminators)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>xatoi</Name>
        <Symbol>xatoi</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Custom atoi() (ascii to int) implementation by Elm Chan</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string to scan. Returns until where it has scanned.</ParHint>
          <ParUserDeclaration>const unsigned char **str</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>res</ParName>
          <ParType>32bit signed</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to where to store the result</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char **str, long *res)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ScanDate</Name>
        <Symbol>ScanDate</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the string to be scanned. The function advances the pointer.</ParHint>
          <ParUserDeclaration>const unsigned char **str</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>day</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to where to store the day value</ParHint>
        </Parameter>
        <Parameter>
          <ParName>month</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to where to store the month value</ParHint>
        </Parameter>
        <Parameter>
          <ParName>year</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to where to store the year value</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char **str, byte *day, byte *month, word *year)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ScanTime</Name>
        <Symbol>ScanTime</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Pointer to the string to be scanned. The function advances the pointer.</ParHint>
          <ParUserDeclaration>const unsigned char **str</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>hour</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to where to store the hour value</ParHint>
        </Parameter>
        <Parameter>
          <ParName>minute</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to where to store the minute value</ParHint>
        </Parameter>
        <Parameter>
          <ParName>second</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to where to store the second value</ParHint>
        </Parameter>
        <Parameter>
          <ParName>hSecond</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to scans the hundreds of second part. If not present in string, zero is stored</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char **str, byte *hour, byte *minute, byte *second, byte *hSecond)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ScanDecimal8uNumber</Name>
        <Symbol>ScanDecimal8uNumber</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Scans a decimal 16bit unsigned number</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>String to scan, starting with 0x. It returns as well until where it has scanned</ParHint>
          <ParUserDeclaration>const unsigned char **str</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to value</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char **str, byte *val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ScanDecimal16uNumber</Name>
        <Symbol>ScanDecimal16uNumber</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Scans a decimal 16bit unsigned number</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>String to scan, starting with 0x. It returns as well until where it has scanned</ParHint>
          <ParUserDeclaration>const unsigned char **str</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to value</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char **str, word *val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ScanDecimal32uNumber</Name>
        <Symbol>ScanDecimal32uNumber</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Scans a decimal 32bit unsigned number</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>string to scan. It returns as well until where it has scanned</ParHint>
          <ParUserDeclaration>const unsigned char **str</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>32bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to value</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char **str, dword *val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ScanHex8uNumber</Name>
        <Symbol>ScanHex8uNumber</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Scans a hexadecimal 8bit number, starting with 0x</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>String to scan, starting with 0x. It returns as well until where it has scanned</ParHint>
          <ParUserDeclaration>const unsigned char **str</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to value</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char **str, byte *val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ScanHex16uNumber</Name>
        <Symbol>ScanHex16uNumber</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Scans a hexadecimal 16bit number, starting with 0x</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>String to scan, starting with 0x.. It returns as well until where it has scanned</ParHint>
          <ParUserDeclaration>const unsigned char **str</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to value</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char **str, word *val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ScanHex32uNumber</Name>
        <Symbol>ScanHex32uNumber</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Scans a hexadecimal 32bit number, starting with 0x</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>String to scan, starting with 0x. It returns as well until where it has scanned</ParHint>
          <ParUserDeclaration>const unsigned char **str</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>val</ParName>
          <ParType>32bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to value</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(const unsigned char **str, dword *val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strcmp</Name>
        <Symbol>strcmp</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Wrapper to the standard strcmp() routine</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>16bit signed</ReturnType>
        <RetHint>Returns zero if the two strings are the same</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>str1</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string</ParHint>
          <ParUserDeclaration>const char *</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>str2</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string</ParHint>
          <ParUserDeclaration>const char *</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int16_t #M#_#C#(const char *, const char *)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strncmp</Name>
        <Symbol>strncmp</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Wrapper to the standard strncmp() routine</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>16bit signed</ReturnType>
        <RetHint>Returns zero if the two strings are the same</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>str1</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string</ParHint>
          <ParUserDeclaration>const char *</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>str2</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string</ParHint>
          <ParUserDeclaration>const char *</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>size</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint/>
          <ParUserDeclaration>size_t size</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int16_t #M#_#C#(const char *, const char *, size_t size)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strtailcmp</Name>
        <Symbol>strtailcmp</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Compares the tail of a string and returns 0 if it matches, 1 otherwise</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>returns 0 if tail matches, -1 otherwise</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string. This string is compared if it contains the tail.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>tail</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to tail string.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(byte *str, byte *tail)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strlen</Name>
        <Symbol>strlen</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Wrapper to the standard strlen() function.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>16bit unsigned</ReturnType>
        <RetHint>size of strinig</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint/>
          <ParUserDeclaration>const char *</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>word #M#_#C#(const char *)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>strCutTail</Name>
        <Symbol>strCutTail</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Removes a tailing substring from a string. The string passed will be modified (the tail is cut by writing a zero byte to the string!)</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code, ERR_OK if no error, otherwise ERR_FAIL if tail is not found</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to string where to remove the tail</ParHint>
        </Parameter>
        <Parameter>
          <ParName>tail</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to substring to remove</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(byte *str, byte *tail)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <Links>
    <EmptySection_DummyValue/>
  </Links>
  <Revisions>
    <RevisionVersion>2</RevisionVersion>
  </Revisions>
</Bean>
